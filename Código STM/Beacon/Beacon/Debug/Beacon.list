
Beacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08009a70  08009a70  00019a70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d90  08009d90  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009d90  08009d90  00019d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d98  08009d98  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d98  08009d98  00019d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d9c  08009d9c  00019d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028e4  20000078  08009e18  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000295c  08009e18  0002295c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a25  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000336a  00000000  00000000  00038acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001498  00000000  00000000  0003be38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001300  00000000  00000000  0003d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029030  00000000  00000000  0003e5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010fc6  00000000  00000000  00067600  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fad44  00000000  00000000  000785c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017330a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b50  00000000  00000000  00173388  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a54 	.word	0x08009a54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08009a54 	.word	0x08009a54

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b972 	b.w	8000e94 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	4688      	mov	r8, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14b      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4615      	mov	r5, r2
 8000bda:	d967      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0720 	rsb	r7, r2, #32
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	fa20 f707 	lsr.w	r7, r0, r7
 8000bee:	4095      	lsls	r5, r2
 8000bf0:	ea47 0803 	orr.w	r8, r7, r3
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c00:	fa1f fc85 	uxth.w	ip, r5
 8000c04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18eb      	adds	r3, r5, r3
 8000c16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c1a:	f080 811b 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8118 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c24:	3f02      	subs	r7, #2
 8000c26:	442b      	add	r3, r5
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	192c      	adds	r4, r5, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8107 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	f240 8104 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c50:	3802      	subs	r0, #2
 8000c52:	442c      	add	r4, r5
 8000c54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c58:	eba4 040c 	sub.w	r4, r4, ip
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	b11e      	cbz	r6, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c6 4300 	strd	r4, r3, [r6]
 8000c68:	4639      	mov	r1, r7
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0xbe>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80eb 	beq.w	8000e4e <__udivmoddi4+0x286>
 8000c78:	2700      	movs	r7, #0
 8000c7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c7e:	4638      	mov	r0, r7
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	fab3 f783 	clz	r7, r3
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d147      	bne.n	8000d1e <__udivmoddi4+0x156>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d302      	bcc.n	8000c98 <__udivmoddi4+0xd0>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	f200 80fa 	bhi.w	8000e8c <__udivmoddi4+0x2c4>
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4698      	mov	r8, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d0e0      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000ca6:	e9c6 4800 	strd	r4, r8, [r6]
 8000caa:	e7dd      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000cac:	b902      	cbnz	r2, 8000cb0 <__udivmoddi4+0xe8>
 8000cae:	deff      	udf	#255	; 0xff
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f040 808f 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cba:	1b49      	subs	r1, r1, r5
 8000cbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc0:	fa1f f885 	uxth.w	r8, r5
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cdc:	18eb      	adds	r3, r5, r3
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cf8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x14c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x14a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80b6 	bhi.w	8000e7e <__udivmoddi4+0x2b6>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e79f      	b.n	8000c5e <__udivmoddi4+0x96>
 8000d1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d22:	40bb      	lsls	r3, r7
 8000d24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d3c:	4325      	orrs	r5, r4
 8000d3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d42:	0c2c      	lsrs	r4, r5, #16
 8000d44:	fb08 3319 	mls	r3, r8, r9, r3
 8000d48:	fa1f fa8e 	uxth.w	sl, lr
 8000d4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d50:	fb09 f40a 	mul.w	r4, r9, sl
 8000d54:	429c      	cmp	r4, r3
 8000d56:	fa02 f207 	lsl.w	r2, r2, r7
 8000d5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1e 0303 	adds.w	r3, lr, r3
 8000d64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d68:	f080 8087 	bcs.w	8000e7a <__udivmoddi4+0x2b2>
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	f240 8084 	bls.w	8000e7a <__udivmoddi4+0x2b2>
 8000d72:	f1a9 0902 	sub.w	r9, r9, #2
 8000d76:	4473      	add	r3, lr
 8000d78:	1b1b      	subs	r3, r3, r4
 8000d7a:	b2ad      	uxth	r5, r5
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d8c:	45a2      	cmp	sl, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1e 0404 	adds.w	r4, lr, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d98:	d26b      	bcs.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9a:	45a2      	cmp	sl, r4
 8000d9c:	d969      	bls.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4474      	add	r4, lr
 8000da2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000da6:	fba0 8902 	umull	r8, r9, r0, r2
 8000daa:	eba4 040a 	sub.w	r4, r4, sl
 8000dae:	454c      	cmp	r4, r9
 8000db0:	46c2      	mov	sl, r8
 8000db2:	464b      	mov	r3, r9
 8000db4:	d354      	bcc.n	8000e60 <__udivmoddi4+0x298>
 8000db6:	d051      	beq.n	8000e5c <__udivmoddi4+0x294>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d069      	beq.n	8000e90 <__udivmoddi4+0x2c8>
 8000dbc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dc4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dc8:	40fd      	lsrs	r5, r7
 8000dca:	40fc      	lsrs	r4, r7
 8000dcc:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd0:	e9c6 5400 	strd	r5, r4, [r6]
 8000dd4:	2700      	movs	r7, #0
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f703 	lsr.w	r7, r0, r3
 8000de0:	4095      	lsls	r5, r2
 8000de2:	fa01 f002 	lsl.w	r0, r1, r2
 8000de6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dee:	4338      	orrs	r0, r7
 8000df0:	0c01      	lsrs	r1, r0, #16
 8000df2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000df6:	fa1f f885 	uxth.w	r8, r5
 8000dfa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb07 f308 	mul.w	r3, r7, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d907      	bls.n	8000e1e <__udivmoddi4+0x256>
 8000e0e:	1869      	adds	r1, r5, r1
 8000e10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e14:	d22f      	bcs.n	8000e76 <__udivmoddi4+0x2ae>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d92d      	bls.n	8000e76 <__udivmoddi4+0x2ae>
 8000e1a:	3f02      	subs	r7, #2
 8000e1c:	4429      	add	r1, r5
 8000e1e:	1acb      	subs	r3, r1, r3
 8000e20:	b281      	uxth	r1, r0
 8000e22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2e:	fb00 f308 	mul.w	r3, r0, r8
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x27e>
 8000e36:	1869      	adds	r1, r5, r1
 8000e38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e3c:	d217      	bcs.n	8000e6e <__udivmoddi4+0x2a6>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d915      	bls.n	8000e6e <__udivmoddi4+0x2a6>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4429      	add	r1, r5
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e4c:	e73b      	b.n	8000cc6 <__udivmoddi4+0xfe>
 8000e4e:	4637      	mov	r7, r6
 8000e50:	4630      	mov	r0, r6
 8000e52:	e709      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e54:	4607      	mov	r7, r0
 8000e56:	e6e7      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6fb      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e5c:	4541      	cmp	r1, r8
 8000e5e:	d2ab      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e64:	eb69 020e 	sbc.w	r2, r9, lr
 8000e68:	3801      	subs	r0, #1
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	e7a4      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e6e:	4660      	mov	r0, ip
 8000e70:	e7e9      	b.n	8000e46 <__udivmoddi4+0x27e>
 8000e72:	4618      	mov	r0, r3
 8000e74:	e795      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e76:	4667      	mov	r7, ip
 8000e78:	e7d1      	b.n	8000e1e <__udivmoddi4+0x256>
 8000e7a:	4681      	mov	r9, r0
 8000e7c:	e77c      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	442c      	add	r4, r5
 8000e82:	e747      	b.n	8000d14 <__udivmoddi4+0x14c>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	442b      	add	r3, r5
 8000e8a:	e72f      	b.n	8000cec <__udivmoddi4+0x124>
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	e708      	b.n	8000ca2 <__udivmoddi4+0xda>
 8000e90:	4637      	mov	r7, r6
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0xa0>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <MX_DMA_Init+0x48>)
 8000ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <MX_DMA_Init+0x48>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6493      	str	r3, [r2, #72]	; 0x48
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <MX_DMA_Init+0x48>)
 8000eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2105      	movs	r1, #5
 8000eba:	200e      	movs	r0, #14
 8000ebc:	f001 fcea 	bl	8002894 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000ec0:	200e      	movs	r0, #14
 8000ec2:	f001 fd03 	bl	80028cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2105      	movs	r1, #5
 8000eca:	200f      	movs	r0, #15
 8000ecc:	f001 fce2 	bl	8002894 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ed0:	200f      	movs	r0, #15
 8000ed2:	f001 fcfb 	bl	80028cc <HAL_NVIC_EnableIRQ>

}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ef4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <vApplicationGetIdleTaskMemory+0x30>)
 8000efa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2280      	movs	r2, #128	; 0x80
 8000f00:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000094 	.word	0x20000094
 8000f14:	200000e8 	.word	0x200000e8

08000f18 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f18:	b5b0      	push	{r4, r5, r7, lr}
 8000f1a:	b092      	sub	sp, #72	; 0x48
 8000f1c:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of DataRx */
  osMessageQStaticDef(DataRx, 16, Beacon_t, DataRxBuffer, &DataRxControlBlock);
 8000f1e:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_FREERTOS_Init+0x74>)
 8000f20:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000f24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  DataRxHandle = osMessageCreate(osMessageQ(DataRx), NULL);
 8000f2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f004 ff4b 	bl	8005dcc <osMessageCreate>
 8000f36:	4602      	mov	r2, r0
 8000f38:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <MX_FREERTOS_Init+0x78>)
 8000f3a:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_FREERTOS_Init+0x7c>)
 8000f3e:	f107 041c 	add.w	r4, r7, #28
 8000f42:	461d      	mov	r5, r3
 8000f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f004 feff 	bl	8005d5a <osThreadCreate>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_FREERTOS_Init+0x80>)
 8000f60:	601a      	str	r2, [r3, #0]

  /* definition and creation of ProcessaDados */
  osThreadStaticDef(ProcessaDados, funcProcessaDados, osPriorityNormal, 0, 1024, ProcessaDadosBuffer, &ProcessaDadosControlBlock);
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_FREERTOS_Init+0x84>)
 8000f64:	463c      	mov	r4, r7
 8000f66:	461d      	mov	r5, r3
 8000f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ProcessaDadosHandle = osThreadCreate(osThread(ProcessaDados), NULL);
 8000f74:	463b      	mov	r3, r7
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f004 feee 	bl	8005d5a <osThreadCreate>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <MX_FREERTOS_Init+0x88>)
 8000f82:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000f84:	bf00      	nop
 8000f86:	3748      	adds	r7, #72	; 0x48
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f8c:	08009a70 	.word	0x08009a70
 8000f90:	20000508 	.word	0x20000508
 8000f94:	08009a8c 	.word	0x08009a8c
 8000f98:	200004b8 	.word	0x200004b8
 8000f9c:	08009ab8 	.word	0x08009ab8
 8000fa0:	20000504 	.word	0x20000504

08000fa4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	uint8_t aTxHdlc[]= {0x7E,0x00,0x04,0x08,0x01,0x41,0x53,0x62};
 8000fac:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <StartDefaultTask+0x44>)
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fb6:	e883 0003 	stmia.w	r3, {r0, r1}


  /* Infinite loop */
  for(;;)
  {
	  if(UartReady == IDLE)
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <StartDefaultTask+0x48>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10a      	bne.n	8000fd8 <StartDefaultTask+0x34>
	  {
		  HAL_UART_Transmit_DMA(&huart1, aTxHdlc, sizeof(aTxHdlc));
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	2208      	movs	r2, #8
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <StartDefaultTask+0x4c>)
 8000fcc:	f003 fe4a 	bl	8004c64 <HAL_UART_Transmit_DMA>
		  UartReady = BUSY;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <StartDefaultTask+0x48>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	e002      	b.n	8000fde <StartDefaultTask+0x3a>
	  }
	  else
	  {
		  osDelay(100);
 8000fd8:	2064      	movs	r0, #100	; 0x64
 8000fda:	f004 fee3 	bl	8005da4 <osDelay>
	  }

	  osDelay(5000);
 8000fde:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fe2:	f004 fedf 	bl	8005da4 <osDelay>
	  if(UartReady == IDLE)
 8000fe6:	e7e8      	b.n	8000fba <StartDefaultTask+0x16>
 8000fe8:	08009ad4 	.word	0x08009ad4
 8000fec:	20001844 	.word	0x20001844
 8000ff0:	200018d8 	.word	0x200018d8
 8000ff4:	00000000 	.word	0x00000000

08000ff8 <funcProcessaDados>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_funcProcessaDados */
void funcProcessaDados(void const * argument)
{
 8000ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffa:	b0ef      	sub	sp, #444	; 0x1bc
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN funcProcessaDados */
	float_t dist_B1_B2_Fixa = 1.1;
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <funcProcessaDados+0x28>)
 8001004:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

	uint16_t panID[64];
	//uint8_t aTxHdlc[127];
	static Beacon_t Device;

	portBASE_TYPE xHigherPriorityTaskWoken = pdTRUE;
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2201      	movs	r2, #1
 800100e:	601a      	str	r2, [r3, #0]

	uint8_t cnt = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
	uint8_t indice = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
  /* Infinite loop */
  for(;;)
  {
	  while(xQueueReceiveFromISR(DataRxHandle, &Device, &xHigherPriorityTaskWoken) == pdTRUE)
 800101c:	f000 bdcf 	b.w	8001bbe <funcProcessaDados+0xbc6>
 8001020:	3f8ccccd 	.word	0x3f8ccccd
	  {
		  if((Device.panId[0]==0x8A&&Device.panId[1]==0x8E)||(Device.panId[0]==0xC9&&Device.panId[1]==0x6F))
 8001024:	4bea      	ldr	r3, [pc, #936]	; (80013d0 <funcProcessaDados+0x3d8>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b8a      	cmp	r3, #138	; 0x8a
 800102a:	d103      	bne.n	8001034 <funcProcessaDados+0x3c>
 800102c:	4be8      	ldr	r3, [pc, #928]	; (80013d0 <funcProcessaDados+0x3d8>)
 800102e:	785b      	ldrb	r3, [r3, #1]
 8001030:	2b8e      	cmp	r3, #142	; 0x8e
 8001032:	d007      	beq.n	8001044 <funcProcessaDados+0x4c>
 8001034:	4be6      	ldr	r3, [pc, #920]	; (80013d0 <funcProcessaDados+0x3d8>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2bc9      	cmp	r3, #201	; 0xc9
 800103a:	d12c      	bne.n	8001096 <funcProcessaDados+0x9e>
 800103c:	4be4      	ldr	r3, [pc, #912]	; (80013d0 <funcProcessaDados+0x3d8>)
 800103e:	785b      	ldrb	r3, [r3, #1]
 8001040:	2b6f      	cmp	r3, #111	; 0x6f
 8001042:	d128      	bne.n	8001096 <funcProcessaDados+0x9e>
		  {
			  cnt++;
 8001044:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8001048:	3301      	adds	r3, #1
 800104a:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
			  distance[indice] = rssi_to_meter(Device.rssi);
 800104e:	4be0      	ldr	r3, [pc, #896]	; (80013d0 <funcProcessaDados+0x3d8>)
 8001050:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001054:	f897 41ae 	ldrb.w	r4, [r7, #430]	; 0x1ae
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fdc5 	bl	8001be8 <rssi_to_meter>
 800105e:	eef0 7a40 	vmov.f32	s15, s0
 8001062:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001066:	00a3      	lsls	r3, r4, #2
 8001068:	4413      	add	r3, r2
 800106a:	edc3 7a00 	vstr	s15, [r3]
			  panID[indice++] = ((Device.panId[0]<<8)|Device.panId[1]);
 800106e:	4bd8      	ldr	r3, [pc, #864]	; (80013d0 <funcProcessaDados+0x3d8>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21a      	sxth	r2, r3
 8001076:	4bd6      	ldr	r3, [pc, #856]	; (80013d0 <funcProcessaDados+0x3d8>)
 8001078:	785b      	ldrb	r3, [r3, #1]
 800107a:	b21b      	sxth	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b219      	sxth	r1, r3
 8001080:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	f887 21ae 	strb.w	r2, [r7, #430]	; 0x1ae
 800108a:	461a      	mov	r2, r3
 800108c:	b289      	uxth	r1, r1
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  }

		  if(indice>1 && indice%2==0)
 8001096:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800109a:	2b01      	cmp	r3, #1
 800109c:	f240 8588 	bls.w	8001bb0 <funcProcessaDados+0xbb8>
 80010a0:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f040 8580 	bne.w	8001bb0 <funcProcessaDados+0xbb8>
		  {

			  if((panID[indice-2]==0x8A8E && panID[indice-1]==0xC96F)||(panID[indice-2]==0xC96F && panID[indice-1]==0x8A8E))
 80010b0:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80010b4:	1e9a      	subs	r2, r3, #2
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010be:	f648 228e 	movw	r2, #35470	; 0x8a8e
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d10a      	bne.n	80010dc <funcProcessaDados+0xe4>
 80010c6:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80010ca:	1e5a      	subs	r2, r3, #1
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010d4:	f64c 126f 	movw	r2, #51567	; 0xc96f
 80010d8:	4293      	cmp	r3, r2
 80010da:	d017      	beq.n	800110c <funcProcessaDados+0x114>
 80010dc:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80010e0:	1e9a      	subs	r2, r3, #2
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010ea:	f64c 126f 	movw	r2, #51567	; 0xc96f
 80010ee:	4293      	cmp	r3, r2
 80010f0:	f040 855e 	bne.w	8001bb0 <funcProcessaDados+0xbb8>
 80010f4:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80010f8:	1e5a      	subs	r2, r3, #1
 80010fa:	f107 0310 	add.w	r3, r7, #16
 80010fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001102:	f648 228e 	movw	r2, #35470	; 0x8a8e
 8001106:	4293      	cmp	r3, r2
 8001108:	f040 8552 	bne.w	8001bb0 <funcProcessaDados+0xbb8>
			  {
				  if(panID[indice-2]!=panID[indice-1])
 800110c:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001110:	1e9a      	subs	r2, r3, #2
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800111a:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800111e:	1e59      	subs	r1, r3, #1
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001128:	429a      	cmp	r2, r3
 800112a:	f000 8541 	beq.w	8001bb0 <funcProcessaDados+0xbb8>
				  {
					  ang_alfa = acos((pow(distance[indice-2],2)- pow(dist_B1_B2_Fixa,2) - pow(distance[indice-1],2))/(-2*dist_B1_B2_Fixa*distance[indice-1]));
 800112e:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001132:	3b02      	subs	r3, #2
 8001134:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f9aa 	bl	8000498 <__aeabi_f2d>
 8001144:	4603      	mov	r3, r0
 8001146:	460c      	mov	r4, r1
 8001148:	ed9f 1b9f 	vldr	d1, [pc, #636]	; 80013c8 <funcProcessaDados+0x3d0>
 800114c:	ec44 3b10 	vmov	d0, r3, r4
 8001150:	f006 fa92 	bl	8007678 <pow>
 8001154:	ec55 4b10 	vmov	r4, r5, d0
 8001158:	f8d7 01a8 	ldr.w	r0, [r7, #424]	; 0x1a8
 800115c:	f7ff f99c 	bl	8000498 <__aeabi_f2d>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	ed9f 1b98 	vldr	d1, [pc, #608]	; 80013c8 <funcProcessaDados+0x3d0>
 8001168:	ec43 2b10 	vmov	d0, r2, r3
 800116c:	f006 fa84 	bl	8007678 <pow>
 8001170:	ec53 2b10 	vmov	r2, r3, d0
 8001174:	4620      	mov	r0, r4
 8001176:	4629      	mov	r1, r5
 8001178:	f7ff f82e 	bl	80001d8 <__aeabi_dsub>
 800117c:	4603      	mov	r3, r0
 800117e:	460c      	mov	r4, r1
 8001180:	4625      	mov	r5, r4
 8001182:	461c      	mov	r4, r3
 8001184:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001188:	3b01      	subs	r3, #1
 800118a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f97f 	bl	8000498 <__aeabi_f2d>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	ed9f 1b8a 	vldr	d1, [pc, #552]	; 80013c8 <funcProcessaDados+0x3d0>
 80011a2:	ec43 2b10 	vmov	d0, r2, r3
 80011a6:	f006 fa67 	bl	8007678 <pow>
 80011aa:	ec53 2b10 	vmov	r2, r3, d0
 80011ae:	4620      	mov	r0, r4
 80011b0:	4629      	mov	r1, r5
 80011b2:	f7ff f811 	bl	80001d8 <__aeabi_dsub>
 80011b6:	4603      	mov	r3, r0
 80011b8:	460c      	mov	r4, r1
 80011ba:	4625      	mov	r5, r4
 80011bc:	461c      	mov	r4, r3
 80011be:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 80011c2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80011c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011ca:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e0:	ee17 0a90 	vmov	r0, s15
 80011e4:	f7ff f958 	bl	8000498 <__aeabi_f2d>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4620      	mov	r0, r4
 80011ee:	4629      	mov	r1, r5
 80011f0:	f7ff fad4 	bl	800079c <__aeabi_ddiv>
 80011f4:	4603      	mov	r3, r0
 80011f6:	460c      	mov	r4, r1
 80011f8:	ec44 3b17 	vmov	d7, r3, r4
 80011fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001200:	eef0 0a67 	vmov.f32	s1, s15
 8001204:	f006 f9e0 	bl	80075c8 <acos>
 8001208:	ec54 3b10 	vmov	r3, r4, d0
 800120c:	4618      	mov	r0, r3
 800120e:	4621      	mov	r1, r4
 8001210:	f7ff fc72 	bl	8000af8 <__aeabi_d2f>
 8001214:	4603      	mov	r3, r0
 8001216:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
					  ang_beta = acos((pow(distance[indice-1],2)- pow(dist_B1_B2_Fixa,2) - pow(distance[indice-2],2))/(-2*dist_B1_B2_Fixa*distance[indice-2]));
 800121a:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800121e:	3b01      	subs	r3, #1
 8001220:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f934 	bl	8000498 <__aeabi_f2d>
 8001230:	4603      	mov	r3, r0
 8001232:	460c      	mov	r4, r1
 8001234:	ed9f 1b64 	vldr	d1, [pc, #400]	; 80013c8 <funcProcessaDados+0x3d0>
 8001238:	ec44 3b10 	vmov	d0, r3, r4
 800123c:	f006 fa1c 	bl	8007678 <pow>
 8001240:	ec55 4b10 	vmov	r4, r5, d0
 8001244:	f8d7 01a8 	ldr.w	r0, [r7, #424]	; 0x1a8
 8001248:	f7ff f926 	bl	8000498 <__aeabi_f2d>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 80013c8 <funcProcessaDados+0x3d0>
 8001254:	ec43 2b10 	vmov	d0, r2, r3
 8001258:	f006 fa0e 	bl	8007678 <pow>
 800125c:	ec53 2b10 	vmov	r2, r3, d0
 8001260:	4620      	mov	r0, r4
 8001262:	4629      	mov	r1, r5
 8001264:	f7fe ffb8 	bl	80001d8 <__aeabi_dsub>
 8001268:	4603      	mov	r3, r0
 800126a:	460c      	mov	r4, r1
 800126c:	4625      	mov	r5, r4
 800126e:	461c      	mov	r4, r3
 8001270:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001274:	3b02      	subs	r3, #2
 8001276:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f909 	bl	8000498 <__aeabi_f2d>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 80013c8 <funcProcessaDados+0x3d0>
 800128e:	ec43 2b10 	vmov	d0, r2, r3
 8001292:	f006 f9f1 	bl	8007678 <pow>
 8001296:	ec53 2b10 	vmov	r2, r3, d0
 800129a:	4620      	mov	r0, r4
 800129c:	4629      	mov	r1, r5
 800129e:	f7fe ff9b 	bl	80001d8 <__aeabi_dsub>
 80012a2:	4603      	mov	r3, r0
 80012a4:	460c      	mov	r4, r1
 80012a6:	4625      	mov	r5, r4
 80012a8:	461c      	mov	r4, r3
 80012aa:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 80012ae:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80012b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012b6:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80012ba:	3b02      	subs	r3, #2
 80012bc:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	edd3 7a00 	vldr	s15, [r3]
 80012c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012cc:	ee17 0a90 	vmov	r0, s15
 80012d0:	f7ff f8e2 	bl	8000498 <__aeabi_f2d>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4620      	mov	r0, r4
 80012da:	4629      	mov	r1, r5
 80012dc:	f7ff fa5e 	bl	800079c <__aeabi_ddiv>
 80012e0:	4603      	mov	r3, r0
 80012e2:	460c      	mov	r4, r1
 80012e4:	ec44 3b17 	vmov	d7, r3, r4
 80012e8:	eeb0 0a47 	vmov.f32	s0, s14
 80012ec:	eef0 0a67 	vmov.f32	s1, s15
 80012f0:	f006 f96a 	bl	80075c8 <acos>
 80012f4:	ec54 3b10 	vmov	r3, r4, d0
 80012f8:	4618      	mov	r0, r3
 80012fa:	4621      	mov	r1, r4
 80012fc:	f7ff fbfc 	bl	8000af8 <__aeabi_d2f>
 8001300:	4603      	mov	r3, r0
 8001302:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0

					  if(ang_alfa>=ang_beta&&distance[indice-2]<=distance[indice-1])
 8001306:	ed97 7a69 	vldr	s14, [r7, #420]	; 0x1a4
 800130a:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 800130e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001316:	f2c0 810e 	blt.w	8001536 <funcProcessaDados+0x53e>
 800131a:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800131e:	3b02      	subs	r3, #2
 8001320:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	ed93 7a00 	vldr	s14, [r3]
 800132c:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001330:	3b01      	subs	r3, #1
 8001332:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001346:	f200 80f6 	bhi.w	8001536 <funcProcessaDados+0x53e>
					  {
					  	d1y1 = 1000*(sin(ang_alfa)*distance[indice-2]);
 800134a:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 800134e:	f7ff f8a3 	bl	8000498 <__aeabi_f2d>
 8001352:	4603      	mov	r3, r0
 8001354:	460c      	mov	r4, r1
 8001356:	ec44 3b10 	vmov	d0, r3, r4
 800135a:	f006 f8ed 	bl	8007538 <sin>
 800135e:	ec56 5b10 	vmov	r5, r6, d0
 8001362:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001366:	3b02      	subs	r3, #2
 8001368:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f890 	bl	8000498 <__aeabi_f2d>
 8001378:	4603      	mov	r3, r0
 800137a:	460c      	mov	r4, r1
 800137c:	461a      	mov	r2, r3
 800137e:	4623      	mov	r3, r4
 8001380:	4628      	mov	r0, r5
 8001382:	4631      	mov	r1, r6
 8001384:	f7ff f8e0 	bl	8000548 <__aeabi_dmul>
 8001388:	4603      	mov	r3, r0
 800138a:	460c      	mov	r4, r1
 800138c:	4618      	mov	r0, r3
 800138e:	4621      	mov	r1, r4
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <funcProcessaDados+0x3dc>)
 8001396:	f7ff f8d7 	bl	8000548 <__aeabi_dmul>
 800139a:	4603      	mov	r3, r0
 800139c:	460c      	mov	r4, r1
 800139e:	4618      	mov	r0, r3
 80013a0:	4621      	mov	r1, r4
 80013a2:	f7ff fba9 	bl	8000af8 <__aeabi_d2f>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
					  	d1y2 = 1000*(sin(ang_beta)*distance[indice-1]);
 80013ac:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 80013b0:	f7ff f872 	bl	8000498 <__aeabi_f2d>
 80013b4:	4603      	mov	r3, r0
 80013b6:	460c      	mov	r4, r1
 80013b8:	ec44 3b10 	vmov	d0, r3, r4
 80013bc:	f006 f8bc 	bl	8007538 <sin>
 80013c0:	ec56 5b10 	vmov	r5, r6, d0
 80013c4:	e008      	b.n	80013d8 <funcProcessaDados+0x3e0>
 80013c6:	bf00      	nop
 80013c8:	00000000 	.word	0x00000000
 80013cc:	40000000 	.word	0x40000000
 80013d0:	200002e8 	.word	0x200002e8
 80013d4:	408f4000 	.word	0x408f4000
 80013d8:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80013dc:	3b01      	subs	r3, #1
 80013de:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f855 	bl	8000498 <__aeabi_f2d>
 80013ee:	4603      	mov	r3, r0
 80013f0:	460c      	mov	r4, r1
 80013f2:	461a      	mov	r2, r3
 80013f4:	4623      	mov	r3, r4
 80013f6:	4628      	mov	r0, r5
 80013f8:	4631      	mov	r1, r6
 80013fa:	f7ff f8a5 	bl	8000548 <__aeabi_dmul>
 80013fe:	4603      	mov	r3, r0
 8001400:	460c      	mov	r4, r1
 8001402:	4618      	mov	r0, r3
 8001404:	4621      	mov	r1, r4
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	4bd2      	ldr	r3, [pc, #840]	; (8001754 <funcProcessaDados+0x75c>)
 800140c:	f7ff f89c 	bl	8000548 <__aeabi_dmul>
 8001410:	4603      	mov	r3, r0
 8001412:	460c      	mov	r4, r1
 8001414:	4618      	mov	r0, r3
 8001416:	4621      	mov	r1, r4
 8001418:	f7ff fb6e 	bl	8000af8 <__aeabi_d2f>
 800141c:	4603      	mov	r3, r0
 800141e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

					  	d1x1 = 1000*(cos(ang_alfa)*distance[indice-2]);
 8001422:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8001426:	f7ff f837 	bl	8000498 <__aeabi_f2d>
 800142a:	4603      	mov	r3, r0
 800142c:	460c      	mov	r4, r1
 800142e:	ec44 3b10 	vmov	d0, r3, r4
 8001432:	f006 f83d 	bl	80074b0 <cos>
 8001436:	ec56 5b10 	vmov	r5, r6, d0
 800143a:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800143e:	3b02      	subs	r3, #2
 8001440:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f824 	bl	8000498 <__aeabi_f2d>
 8001450:	4603      	mov	r3, r0
 8001452:	460c      	mov	r4, r1
 8001454:	461a      	mov	r2, r3
 8001456:	4623      	mov	r3, r4
 8001458:	4628      	mov	r0, r5
 800145a:	4631      	mov	r1, r6
 800145c:	f7ff f874 	bl	8000548 <__aeabi_dmul>
 8001460:	4603      	mov	r3, r0
 8001462:	460c      	mov	r4, r1
 8001464:	4618      	mov	r0, r3
 8001466:	4621      	mov	r1, r4
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	4bb9      	ldr	r3, [pc, #740]	; (8001754 <funcProcessaDados+0x75c>)
 800146e:	f7ff f86b 	bl	8000548 <__aeabi_dmul>
 8001472:	4603      	mov	r3, r0
 8001474:	460c      	mov	r4, r1
 8001476:	4618      	mov	r0, r3
 8001478:	4621      	mov	r1, r4
 800147a:	f7ff fb3d 	bl	8000af8 <__aeabi_d2f>
 800147e:	4603      	mov	r3, r0
 8001480:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
					  	d1x2 = 1000*(cos(ang_beta)*distance[indice-1]);
 8001484:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8001488:	f7ff f806 	bl	8000498 <__aeabi_f2d>
 800148c:	4603      	mov	r3, r0
 800148e:	460c      	mov	r4, r1
 8001490:	ec44 3b10 	vmov	d0, r3, r4
 8001494:	f006 f80c 	bl	80074b0 <cos>
 8001498:	ec56 5b10 	vmov	r5, r6, d0
 800149c:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80014a0:	3b01      	subs	r3, #1
 80014a2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7fe fff3 	bl	8000498 <__aeabi_f2d>
 80014b2:	4603      	mov	r3, r0
 80014b4:	460c      	mov	r4, r1
 80014b6:	461a      	mov	r2, r3
 80014b8:	4623      	mov	r3, r4
 80014ba:	4628      	mov	r0, r5
 80014bc:	4631      	mov	r1, r6
 80014be:	f7ff f843 	bl	8000548 <__aeabi_dmul>
 80014c2:	4603      	mov	r3, r0
 80014c4:	460c      	mov	r4, r1
 80014c6:	4618      	mov	r0, r3
 80014c8:	4621      	mov	r1, r4
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	4ba1      	ldr	r3, [pc, #644]	; (8001754 <funcProcessaDados+0x75c>)
 80014d0:	f7ff f83a 	bl	8000548 <__aeabi_dmul>
 80014d4:	4603      	mov	r3, r0
 80014d6:	460c      	mov	r4, r1
 80014d8:	4618      	mov	r0, r3
 80014da:	4621      	mov	r1, r4
 80014dc:	f7ff fb0c 	bl	8000af8 <__aeabi_d2f>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

					  	dist_x = ((d1x1+((1000*dist_B1_B2_Fixa)-d1x2))/2);
 80014e6:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 80014ea:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8001758 <funcProcessaDados+0x760>
 80014ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014f2:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 80014f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014fa:	edd7 7a65 	vldr	s15, [r7, #404]	; 0x194
 80014fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001502:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001506:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800150a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800150e:	ee17 3a90 	vmov	r3, s15
 8001512:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

					  	dist_y = ((d1y1+d1y2)/2);
 8001516:	ed97 7a67 	vldr	s14, [r7, #412]	; 0x19c
 800151a:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 800151e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001522:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001526:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800152a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800152e:	ee17 3a90 	vmov	r3, s15
 8001532:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
					  }

					  if(ang_alfa<=ang_beta&&distance[indice-2]<=distance[indice-1])
 8001536:	ed97 7a69 	vldr	s14, [r7, #420]	; 0x1a4
 800153a:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 800153e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001546:	f200 8109 	bhi.w	800175c <funcProcessaDados+0x764>
 800154a:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800154e:	3b02      	subs	r3, #2
 8001550:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	ed93 7a00 	vldr	s14, [r3]
 800155c:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001560:	3b01      	subs	r3, #1
 8001562:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	edd3 7a00 	vldr	s15, [r3]
 800156e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001576:	f200 80f1 	bhi.w	800175c <funcProcessaDados+0x764>
					  {
					   	d1y1 = 1000*(sin(ang_beta)*distance[indice-2]);
 800157a:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 800157e:	f7fe ff8b 	bl	8000498 <__aeabi_f2d>
 8001582:	4603      	mov	r3, r0
 8001584:	460c      	mov	r4, r1
 8001586:	ec44 3b10 	vmov	d0, r3, r4
 800158a:	f005 ffd5 	bl	8007538 <sin>
 800158e:	ec56 5b10 	vmov	r5, r6, d0
 8001592:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001596:	3b02      	subs	r3, #2
 8001598:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ff78 	bl	8000498 <__aeabi_f2d>
 80015a8:	4603      	mov	r3, r0
 80015aa:	460c      	mov	r4, r1
 80015ac:	461a      	mov	r2, r3
 80015ae:	4623      	mov	r3, r4
 80015b0:	4628      	mov	r0, r5
 80015b2:	4631      	mov	r1, r6
 80015b4:	f7fe ffc8 	bl	8000548 <__aeabi_dmul>
 80015b8:	4603      	mov	r3, r0
 80015ba:	460c      	mov	r4, r1
 80015bc:	4618      	mov	r0, r3
 80015be:	4621      	mov	r1, r4
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	4b63      	ldr	r3, [pc, #396]	; (8001754 <funcProcessaDados+0x75c>)
 80015c6:	f7fe ffbf 	bl	8000548 <__aeabi_dmul>
 80015ca:	4603      	mov	r3, r0
 80015cc:	460c      	mov	r4, r1
 80015ce:	4618      	mov	r0, r3
 80015d0:	4621      	mov	r1, r4
 80015d2:	f7ff fa91 	bl	8000af8 <__aeabi_d2f>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
					  	d1y2 = 1000*(sin(ang_alfa)*distance[indice-1]);
 80015dc:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 80015e0:	f7fe ff5a 	bl	8000498 <__aeabi_f2d>
 80015e4:	4603      	mov	r3, r0
 80015e6:	460c      	mov	r4, r1
 80015e8:	ec44 3b10 	vmov	d0, r3, r4
 80015ec:	f005 ffa4 	bl	8007538 <sin>
 80015f0:	ec56 5b10 	vmov	r5, r6, d0
 80015f4:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80015f8:	3b01      	subs	r3, #1
 80015fa:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff47 	bl	8000498 <__aeabi_f2d>
 800160a:	4603      	mov	r3, r0
 800160c:	460c      	mov	r4, r1
 800160e:	461a      	mov	r2, r3
 8001610:	4623      	mov	r3, r4
 8001612:	4628      	mov	r0, r5
 8001614:	4631      	mov	r1, r6
 8001616:	f7fe ff97 	bl	8000548 <__aeabi_dmul>
 800161a:	4603      	mov	r3, r0
 800161c:	460c      	mov	r4, r1
 800161e:	4618      	mov	r0, r3
 8001620:	4621      	mov	r1, r4
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4b4b      	ldr	r3, [pc, #300]	; (8001754 <funcProcessaDados+0x75c>)
 8001628:	f7fe ff8e 	bl	8000548 <__aeabi_dmul>
 800162c:	4603      	mov	r3, r0
 800162e:	460c      	mov	r4, r1
 8001630:	4618      	mov	r0, r3
 8001632:	4621      	mov	r1, r4
 8001634:	f7ff fa60 	bl	8000af8 <__aeabi_d2f>
 8001638:	4603      	mov	r3, r0
 800163a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

					  	d1x1 = 1000*(cos(ang_beta)*distance[indice-2]);
 800163e:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8001642:	f7fe ff29 	bl	8000498 <__aeabi_f2d>
 8001646:	4603      	mov	r3, r0
 8001648:	460c      	mov	r4, r1
 800164a:	ec44 3b10 	vmov	d0, r3, r4
 800164e:	f005 ff2f 	bl	80074b0 <cos>
 8001652:	ec56 5b10 	vmov	r5, r6, d0
 8001656:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800165a:	3b02      	subs	r3, #2
 800165c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff16 	bl	8000498 <__aeabi_f2d>
 800166c:	4603      	mov	r3, r0
 800166e:	460c      	mov	r4, r1
 8001670:	461a      	mov	r2, r3
 8001672:	4623      	mov	r3, r4
 8001674:	4628      	mov	r0, r5
 8001676:	4631      	mov	r1, r6
 8001678:	f7fe ff66 	bl	8000548 <__aeabi_dmul>
 800167c:	4603      	mov	r3, r0
 800167e:	460c      	mov	r4, r1
 8001680:	4618      	mov	r0, r3
 8001682:	4621      	mov	r1, r4
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	4b32      	ldr	r3, [pc, #200]	; (8001754 <funcProcessaDados+0x75c>)
 800168a:	f7fe ff5d 	bl	8000548 <__aeabi_dmul>
 800168e:	4603      	mov	r3, r0
 8001690:	460c      	mov	r4, r1
 8001692:	4618      	mov	r0, r3
 8001694:	4621      	mov	r1, r4
 8001696:	f7ff fa2f 	bl	8000af8 <__aeabi_d2f>
 800169a:	4603      	mov	r3, r0
 800169c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
					  	d1x2 = 1000*(cos(ang_alfa)*distance[indice-1]);
 80016a0:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 80016a4:	f7fe fef8 	bl	8000498 <__aeabi_f2d>
 80016a8:	4603      	mov	r3, r0
 80016aa:	460c      	mov	r4, r1
 80016ac:	ec44 3b10 	vmov	d0, r3, r4
 80016b0:	f005 fefe 	bl	80074b0 <cos>
 80016b4:	ec56 5b10 	vmov	r5, r6, d0
 80016b8:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80016bc:	3b01      	subs	r3, #1
 80016be:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe fee5 	bl	8000498 <__aeabi_f2d>
 80016ce:	4603      	mov	r3, r0
 80016d0:	460c      	mov	r4, r1
 80016d2:	461a      	mov	r2, r3
 80016d4:	4623      	mov	r3, r4
 80016d6:	4628      	mov	r0, r5
 80016d8:	4631      	mov	r1, r6
 80016da:	f7fe ff35 	bl	8000548 <__aeabi_dmul>
 80016de:	4603      	mov	r3, r0
 80016e0:	460c      	mov	r4, r1
 80016e2:	4618      	mov	r0, r3
 80016e4:	4621      	mov	r1, r4
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <funcProcessaDados+0x75c>)
 80016ec:	f7fe ff2c 	bl	8000548 <__aeabi_dmul>
 80016f0:	4603      	mov	r3, r0
 80016f2:	460c      	mov	r4, r1
 80016f4:	4618      	mov	r0, r3
 80016f6:	4621      	mov	r1, r4
 80016f8:	f7ff f9fe 	bl	8000af8 <__aeabi_d2f>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

					  	dist_x = ((d1x1+((1000*dist_B1_B2_Fixa)-d1x2))/2);
 8001702:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 8001706:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001758 <funcProcessaDados+0x760>
 800170a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800170e:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 8001712:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001716:	edd7 7a65 	vldr	s15, [r7, #404]	; 0x194
 800171a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800171e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001722:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800172a:	ee17 3a90 	vmov	r3, s15
 800172e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

					  	dist_y = ((d1y1+d1y2)/2);
 8001732:	ed97 7a67 	vldr	s14, [r7, #412]	; 0x19c
 8001736:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 800173a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800173e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001742:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800174a:	ee17 3a90 	vmov	r3, s15
 800174e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001752:	e003      	b.n	800175c <funcProcessaDados+0x764>
 8001754:	408f4000 	.word	0x408f4000
 8001758:	447a0000 	.word	0x447a0000
					  }

					  if(ang_alfa>=ang_beta&&distance[indice-2]>=distance[indice-1])
 800175c:	ed97 7a69 	vldr	s14, [r7, #420]	; 0x1a4
 8001760:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 8001764:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176c:	f2c0 8104 	blt.w	8001978 <funcProcessaDados+0x980>
 8001770:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001774:	3b02      	subs	r3, #2
 8001776:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	ed93 7a00 	vldr	s14, [r3]
 8001782:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001786:	3b01      	subs	r3, #1
 8001788:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179c:	f2c0 80ec 	blt.w	8001978 <funcProcessaDados+0x980>
					  {
					   	d1y1 = 1000*(sin(ang_alfa)*distance[indice-1]);
 80017a0:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 80017a4:	f7fe fe78 	bl	8000498 <__aeabi_f2d>
 80017a8:	4603      	mov	r3, r0
 80017aa:	460c      	mov	r4, r1
 80017ac:	ec44 3b10 	vmov	d0, r3, r4
 80017b0:	f005 fec2 	bl	8007538 <sin>
 80017b4:	ec56 5b10 	vmov	r5, r6, d0
 80017b8:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80017bc:	3b01      	subs	r3, #1
 80017be:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe fe65 	bl	8000498 <__aeabi_f2d>
 80017ce:	4603      	mov	r3, r0
 80017d0:	460c      	mov	r4, r1
 80017d2:	461a      	mov	r2, r3
 80017d4:	4623      	mov	r3, r4
 80017d6:	4628      	mov	r0, r5
 80017d8:	4631      	mov	r1, r6
 80017da:	f7fe feb5 	bl	8000548 <__aeabi_dmul>
 80017de:	4603      	mov	r3, r0
 80017e0:	460c      	mov	r4, r1
 80017e2:	4618      	mov	r0, r3
 80017e4:	4621      	mov	r1, r4
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	4beb      	ldr	r3, [pc, #940]	; (8001b98 <funcProcessaDados+0xba0>)
 80017ec:	f7fe feac 	bl	8000548 <__aeabi_dmul>
 80017f0:	4603      	mov	r3, r0
 80017f2:	460c      	mov	r4, r1
 80017f4:	4618      	mov	r0, r3
 80017f6:	4621      	mov	r1, r4
 80017f8:	f7ff f97e 	bl	8000af8 <__aeabi_d2f>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
					   	d1y2 = 1000*(sin(ang_beta)*distance[indice-2]);
 8001802:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8001806:	f7fe fe47 	bl	8000498 <__aeabi_f2d>
 800180a:	4603      	mov	r3, r0
 800180c:	460c      	mov	r4, r1
 800180e:	ec44 3b10 	vmov	d0, r3, r4
 8001812:	f005 fe91 	bl	8007538 <sin>
 8001816:	ec56 5b10 	vmov	r5, r6, d0
 800181a:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800181e:	3b02      	subs	r3, #2
 8001820:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe34 	bl	8000498 <__aeabi_f2d>
 8001830:	4603      	mov	r3, r0
 8001832:	460c      	mov	r4, r1
 8001834:	461a      	mov	r2, r3
 8001836:	4623      	mov	r3, r4
 8001838:	4628      	mov	r0, r5
 800183a:	4631      	mov	r1, r6
 800183c:	f7fe fe84 	bl	8000548 <__aeabi_dmul>
 8001840:	4603      	mov	r3, r0
 8001842:	460c      	mov	r4, r1
 8001844:	4618      	mov	r0, r3
 8001846:	4621      	mov	r1, r4
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	4bd2      	ldr	r3, [pc, #840]	; (8001b98 <funcProcessaDados+0xba0>)
 800184e:	f7fe fe7b 	bl	8000548 <__aeabi_dmul>
 8001852:	4603      	mov	r3, r0
 8001854:	460c      	mov	r4, r1
 8001856:	4618      	mov	r0, r3
 8001858:	4621      	mov	r1, r4
 800185a:	f7ff f94d 	bl	8000af8 <__aeabi_d2f>
 800185e:	4603      	mov	r3, r0
 8001860:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

					   	d1x1 = 1000*(cos(ang_alfa)*distance[indice-1]);
 8001864:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8001868:	f7fe fe16 	bl	8000498 <__aeabi_f2d>
 800186c:	4603      	mov	r3, r0
 800186e:	460c      	mov	r4, r1
 8001870:	ec44 3b10 	vmov	d0, r3, r4
 8001874:	f005 fe1c 	bl	80074b0 <cos>
 8001878:	ec56 5b10 	vmov	r5, r6, d0
 800187c:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001880:	3b01      	subs	r3, #1
 8001882:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe03 	bl	8000498 <__aeabi_f2d>
 8001892:	4603      	mov	r3, r0
 8001894:	460c      	mov	r4, r1
 8001896:	461a      	mov	r2, r3
 8001898:	4623      	mov	r3, r4
 800189a:	4628      	mov	r0, r5
 800189c:	4631      	mov	r1, r6
 800189e:	f7fe fe53 	bl	8000548 <__aeabi_dmul>
 80018a2:	4603      	mov	r3, r0
 80018a4:	460c      	mov	r4, r1
 80018a6:	4618      	mov	r0, r3
 80018a8:	4621      	mov	r1, r4
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	4bba      	ldr	r3, [pc, #744]	; (8001b98 <funcProcessaDados+0xba0>)
 80018b0:	f7fe fe4a 	bl	8000548 <__aeabi_dmul>
 80018b4:	4603      	mov	r3, r0
 80018b6:	460c      	mov	r4, r1
 80018b8:	4618      	mov	r0, r3
 80018ba:	4621      	mov	r1, r4
 80018bc:	f7ff f91c 	bl	8000af8 <__aeabi_d2f>
 80018c0:	4603      	mov	r3, r0
 80018c2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
					   	d1x2 = 1000*(cos(ang_beta)*distance[indice-2]);
 80018c6:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 80018ca:	f7fe fde5 	bl	8000498 <__aeabi_f2d>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	ec44 3b10 	vmov	d0, r3, r4
 80018d6:	f005 fdeb 	bl	80074b0 <cos>
 80018da:	ec56 5b10 	vmov	r5, r6, d0
 80018de:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80018e2:	3b02      	subs	r3, #2
 80018e4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fdd2 	bl	8000498 <__aeabi_f2d>
 80018f4:	4603      	mov	r3, r0
 80018f6:	460c      	mov	r4, r1
 80018f8:	461a      	mov	r2, r3
 80018fa:	4623      	mov	r3, r4
 80018fc:	4628      	mov	r0, r5
 80018fe:	4631      	mov	r1, r6
 8001900:	f7fe fe22 	bl	8000548 <__aeabi_dmul>
 8001904:	4603      	mov	r3, r0
 8001906:	460c      	mov	r4, r1
 8001908:	4618      	mov	r0, r3
 800190a:	4621      	mov	r1, r4
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	4ba1      	ldr	r3, [pc, #644]	; (8001b98 <funcProcessaDados+0xba0>)
 8001912:	f7fe fe19 	bl	8000548 <__aeabi_dmul>
 8001916:	4603      	mov	r3, r0
 8001918:	460c      	mov	r4, r1
 800191a:	4618      	mov	r0, r3
 800191c:	4621      	mov	r1, r4
 800191e:	f7ff f8eb 	bl	8000af8 <__aeabi_d2f>
 8001922:	4603      	mov	r3, r0
 8001924:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

					   	dist_x = ((d1x1+((1000*dist_B1_B2_Fixa)-d1x2))/2);
 8001928:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 800192c:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8001b9c <funcProcessaDados+0xba4>
 8001930:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001934:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 8001938:	ee37 7a67 	vsub.f32	s14, s14, s15
 800193c:	edd7 7a65 	vldr	s15, [r7, #404]	; 0x194
 8001940:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001944:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001948:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800194c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001950:	ee17 3a90 	vmov	r3, s15
 8001954:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

					   	dist_y = ((d1y1+d1y2)/2);
 8001958:	ed97 7a67 	vldr	s14, [r7, #412]	; 0x19c
 800195c:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 8001960:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001964:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001968:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800196c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001970:	ee17 3a90 	vmov	r3, s15
 8001974:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
					  }

					  if(ang_alfa<=ang_beta&&distance[indice-2]>=distance[indice-1])
 8001978:	ed97 7a69 	vldr	s14, [r7, #420]	; 0x1a4
 800197c:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 8001980:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001988:	f200 810a 	bhi.w	8001ba0 <funcProcessaDados+0xba8>
 800198c:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001990:	3b02      	subs	r3, #2
 8001992:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	ed93 7a00 	vldr	s14, [r3]
 800199e:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80019a2:	3b01      	subs	r3, #1
 80019a4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	edd3 7a00 	vldr	s15, [r3]
 80019b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b8:	f2c0 80f2 	blt.w	8001ba0 <funcProcessaDados+0xba8>
					  {
						d1y1 = 1000*(sin(ang_beta)*distance[indice-1]);
 80019bc:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 80019c0:	f7fe fd6a 	bl	8000498 <__aeabi_f2d>
 80019c4:	4603      	mov	r3, r0
 80019c6:	460c      	mov	r4, r1
 80019c8:	ec44 3b10 	vmov	d0, r3, r4
 80019cc:	f005 fdb4 	bl	8007538 <sin>
 80019d0:	ec56 5b10 	vmov	r5, r6, d0
 80019d4:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80019d8:	3b01      	subs	r3, #1
 80019da:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fd57 	bl	8000498 <__aeabi_f2d>
 80019ea:	4603      	mov	r3, r0
 80019ec:	460c      	mov	r4, r1
 80019ee:	461a      	mov	r2, r3
 80019f0:	4623      	mov	r3, r4
 80019f2:	4628      	mov	r0, r5
 80019f4:	4631      	mov	r1, r6
 80019f6:	f7fe fda7 	bl	8000548 <__aeabi_dmul>
 80019fa:	4603      	mov	r3, r0
 80019fc:	460c      	mov	r4, r1
 80019fe:	4618      	mov	r0, r3
 8001a00:	4621      	mov	r1, r4
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	4b64      	ldr	r3, [pc, #400]	; (8001b98 <funcProcessaDados+0xba0>)
 8001a08:	f7fe fd9e 	bl	8000548 <__aeabi_dmul>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	460c      	mov	r4, r1
 8001a10:	4618      	mov	r0, r3
 8001a12:	4621      	mov	r1, r4
 8001a14:	f7ff f870 	bl	8000af8 <__aeabi_d2f>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
					  	d1y2 = 1000*(sin(ang_alfa)*distance[indice-2]);
 8001a1e:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8001a22:	f7fe fd39 	bl	8000498 <__aeabi_f2d>
 8001a26:	4603      	mov	r3, r0
 8001a28:	460c      	mov	r4, r1
 8001a2a:	ec44 3b10 	vmov	d0, r3, r4
 8001a2e:	f005 fd83 	bl	8007538 <sin>
 8001a32:	ec56 5b10 	vmov	r5, r6, d0
 8001a36:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001a3a:	3b02      	subs	r3, #2
 8001a3c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fd26 	bl	8000498 <__aeabi_f2d>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	460c      	mov	r4, r1
 8001a50:	461a      	mov	r2, r3
 8001a52:	4623      	mov	r3, r4
 8001a54:	4628      	mov	r0, r5
 8001a56:	4631      	mov	r1, r6
 8001a58:	f7fe fd76 	bl	8000548 <__aeabi_dmul>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	460c      	mov	r4, r1
 8001a60:	4618      	mov	r0, r3
 8001a62:	4621      	mov	r1, r4
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	4b4b      	ldr	r3, [pc, #300]	; (8001b98 <funcProcessaDados+0xba0>)
 8001a6a:	f7fe fd6d 	bl	8000548 <__aeabi_dmul>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	460c      	mov	r4, r1
 8001a72:	4618      	mov	r0, r3
 8001a74:	4621      	mov	r1, r4
 8001a76:	f7ff f83f 	bl	8000af8 <__aeabi_d2f>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

					  	d1x2 = 1000*(cos(ang_beta)*distance[indice-1]);
 8001a80:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8001a84:	f7fe fd08 	bl	8000498 <__aeabi_f2d>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	460c      	mov	r4, r1
 8001a8c:	ec44 3b10 	vmov	d0, r3, r4
 8001a90:	f005 fd0e 	bl	80074b0 <cos>
 8001a94:	ec56 5b10 	vmov	r5, r6, d0
 8001a98:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fcf5 	bl	8000498 <__aeabi_f2d>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	460c      	mov	r4, r1
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4623      	mov	r3, r4
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	4631      	mov	r1, r6
 8001aba:	f7fe fd45 	bl	8000548 <__aeabi_dmul>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	460c      	mov	r4, r1
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	4b33      	ldr	r3, [pc, #204]	; (8001b98 <funcProcessaDados+0xba0>)
 8001acc:	f7fe fd3c 	bl	8000548 <__aeabi_dmul>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	460c      	mov	r4, r1
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	4621      	mov	r1, r4
 8001ad8:	f7ff f80e 	bl	8000af8 <__aeabi_d2f>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
					  	d1x1 = 1000*(cos(ang_alfa)*distance[indice-2]);
 8001ae2:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8001ae6:	f7fe fcd7 	bl	8000498 <__aeabi_f2d>
 8001aea:	4603      	mov	r3, r0
 8001aec:	460c      	mov	r4, r1
 8001aee:	ec44 3b10 	vmov	d0, r3, r4
 8001af2:	f005 fcdd 	bl	80074b0 <cos>
 8001af6:	ec56 5b10 	vmov	r5, r6, d0
 8001afa:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001afe:	3b02      	subs	r3, #2
 8001b00:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fcc4 	bl	8000498 <__aeabi_f2d>
 8001b10:	4603      	mov	r3, r0
 8001b12:	460c      	mov	r4, r1
 8001b14:	461a      	mov	r2, r3
 8001b16:	4623      	mov	r3, r4
 8001b18:	4628      	mov	r0, r5
 8001b1a:	4631      	mov	r1, r6
 8001b1c:	f7fe fd14 	bl	8000548 <__aeabi_dmul>
 8001b20:	4603      	mov	r3, r0
 8001b22:	460c      	mov	r4, r1
 8001b24:	4618      	mov	r0, r3
 8001b26:	4621      	mov	r1, r4
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <funcProcessaDados+0xba0>)
 8001b2e:	f7fe fd0b 	bl	8000548 <__aeabi_dmul>
 8001b32:	4603      	mov	r3, r0
 8001b34:	460c      	mov	r4, r1
 8001b36:	4618      	mov	r0, r3
 8001b38:	4621      	mov	r1, r4
 8001b3a:	f7fe ffdd 	bl	8000af8 <__aeabi_d2f>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

					  	dist_x = ((d1x1+((1000*dist_B1_B2_Fixa)-d1x2))/2);
 8001b44:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 8001b48:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001b9c <funcProcessaDados+0xba4>
 8001b4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b50:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 8001b54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b58:	edd7 7a65 	vldr	s15, [r7, #404]	; 0x194
 8001b5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b60:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b6c:	ee17 3a90 	vmov	r3, s15
 8001b70:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

					  	dist_y = ((d1y1+d1y2)/2);
 8001b74:	ed97 7a67 	vldr	s14, [r7, #412]	; 0x19c
 8001b78:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 8001b7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b80:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b8c:	ee17 3a90 	vmov	r3, s15
 8001b90:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001b94:	e004      	b.n	8001ba0 <funcProcessaDados+0xba8>
 8001b96:	bf00      	nop
 8001b98:	408f4000 	.word	0x408f4000
 8001b9c:	447a0000 	.word	0x447a0000
					  }

					  send_x_distance(dist_x);
 8001ba0:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 8001ba4:	f000 f85c 	bl	8001c60 <send_x_distance>

					  send_y_distance(dist_y);
 8001ba8:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 8001bac:	f000 f914 	bl	8001dd8 <send_y_distance>
				  }
			  }
		  }
		  if(indice>63)
 8001bb0:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8001bb4:	2b3f      	cmp	r3, #63	; 0x3f
 8001bb6:	d902      	bls.n	8001bbe <funcProcessaDados+0xbc6>
		  {
			  indice = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
	  while(xQueueReceiveFromISR(DataRxHandle, &Device, &xHigherPriorityTaskWoken) == pdTRUE)
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <funcProcessaDados+0xbe8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f107 020c 	add.w	r2, r7, #12
 8001bc6:	4907      	ldr	r1, [pc, #28]	; (8001be4 <funcProcessaDados+0xbec>)
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f004 fb55 	bl	8006278 <xQueueReceiveFromISR>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	f43f aa27 	beq.w	8001024 <funcProcessaDados+0x2c>
//	 	  else
//	 	  {
//	 		  osDelay(10);
//	 	  }

    osDelay(100);
 8001bd6:	2064      	movs	r0, #100	; 0x64
 8001bd8:	f004 f8e4 	bl	8005da4 <osDelay>
	  while(xQueueReceiveFromISR(DataRxHandle, &Device, &xHigherPriorityTaskWoken) == pdTRUE)
 8001bdc:	e7ef      	b.n	8001bbe <funcProcessaDados+0xbc6>
 8001bde:	bf00      	nop
 8001be0:	20000508 	.word	0x20000508
 8001be4:	200002e8 	.word	0x200002e8

08001be8 <rssi_to_meter>:
  /* USER CODE END funcProcessaDados */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
float_t rssi_to_meter(int8_t rssi){
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]

    float_t meters = 0;
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]

    meters = pow(10,((power_1m-rssi)/prop_meio_x10));
 8001bf8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001bfc:	f06f 031f 	mvn.w	r3, #31
 8001c00:	1a9b      	subs	r3, r3, r2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fc36 	bl	8000474 <__aeabi_i2d>
 8001c08:	a313      	add	r3, pc, #76	; (adr r3, 8001c58 <rssi_to_meter+0x70>)
 8001c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0e:	f7fe fdc5 	bl	800079c <__aeabi_ddiv>
 8001c12:	4603      	mov	r3, r0
 8001c14:	460c      	mov	r4, r1
 8001c16:	ec44 3b17 	vmov	d7, r3, r4
 8001c1a:	eeb0 1a47 	vmov.f32	s2, s14
 8001c1e:	eef0 1a67 	vmov.f32	s3, s15
 8001c22:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8001c50 <rssi_to_meter+0x68>
 8001c26:	f005 fd27 	bl	8007678 <pow>
 8001c2a:	ec54 3b10 	vmov	r3, r4, d0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	4621      	mov	r1, r4
 8001c32:	f7fe ff61 	bl	8000af8 <__aeabi_d2f>
 8001c36:	4603      	mov	r3, r0
 8001c38:	60fb      	str	r3, [r7, #12]
    return meters;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	ee07 3a90 	vmov	s15, r3
  }
 8001c40:	eeb0 0a67 	vmov.f32	s0, s15
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd90      	pop	{r4, r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	f3af 8000 	nop.w
 8001c50:	00000000 	.word	0x00000000
 8001c54:	40240000 	.word	0x40240000
 8001c58:	9999999a 	.word	0x9999999a
 8001c5c:	40389999 	.word	0x40389999

08001c60 <send_x_distance>:

void send_x_distance(uint32_t value_x){
 8001c60:	b5b0      	push	{r4, r5, r7, lr}
 8001c62:	b090      	sub	sp, #64	; 0x40
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	uint8_t send_msg[]= {0x7E,0x00,0x1B,0x10,0x01,0x00,0x13,0xA2,0x00,0x40,0xB0,0x98,0x96,0xFF,0xFE,0x00,0x00,0x76,0x61,0x6C,0x6F,0x72,0x78,0x20,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xE8};
 8001c68:	4b57      	ldr	r3, [pc, #348]	; (8001dc8 <send_x_distance+0x168>)
 8001c6a:	f107 0410 	add.w	r4, r7, #16
 8001c6e:	461d      	mov	r5, r3
 8001c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001c78:	c407      	stmia	r4!, {r0, r1, r2}
 8001c7a:	8023      	strh	r3, [r4, #0]
 8001c7c:	3402      	adds	r4, #2
 8001c7e:	0c1b      	lsrs	r3, r3, #16
 8001c80:	7023      	strb	r3, [r4, #0]
	uint8_t divider_x[6];
	long pot_1;
	long pot_2;
	uint8_t count=0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t cont = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	long sum = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	63bb      	str	r3, [r7, #56]	; 0x38

	for(count=0;count<6;count++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001c98:	e055      	b.n	8001d46 <send_x_distance+0xe6>
	{
		pot_1 = pow(10,6-count);
 8001c9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c9e:	f1c3 0306 	rsb	r3, r3, #6
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fbe6 	bl	8000474 <__aeabi_i2d>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	460c      	mov	r4, r1
 8001cac:	ec44 3b11 	vmov	d1, r3, r4
 8001cb0:	ed9f 0b43 	vldr	d0, [pc, #268]	; 8001dc0 <send_x_distance+0x160>
 8001cb4:	f005 fce0 	bl	8007678 <pow>
 8001cb8:	ec54 3b10 	vmov	r3, r4, d0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	f7fe fef2 	bl	8000aa8 <__aeabi_d2iz>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	637b      	str	r3, [r7, #52]	; 0x34
		pot_2 = pow(10,5-count);
 8001cc8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ccc:	f1c3 0305 	rsb	r3, r3, #5
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fbcf 	bl	8000474 <__aeabi_i2d>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	460c      	mov	r4, r1
 8001cda:	ec44 3b11 	vmov	d1, r3, r4
 8001cde:	ed9f 0b38 	vldr	d0, [pc, #224]	; 8001dc0 <send_x_distance+0x160>
 8001ce2:	f005 fcc9 	bl	8007678 <pow>
 8001ce6:	ec54 3b10 	vmov	r3, r4, d0
 8001cea:	4618      	mov	r0, r3
 8001cec:	4621      	mov	r1, r4
 8001cee:	f7fe fedb 	bl	8000aa8 <__aeabi_d2iz>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	633b      	str	r3, [r7, #48]	; 0x30

		divider_x[count] = (value_x%(pot_1)/pot_2);
 8001cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8001cfe:	fb02 f201 	mul.w	r2, r2, r1
 8001d02:	1a9a      	subs	r2, r3, r2
 8001d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d06:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001d14:	440b      	add	r3, r1
 8001d16:	f803 2c38 	strb.w	r2, [r3, #-56]

		send_msg[24+count] = 0x30+divider_x[count];
 8001d1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d1e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001d22:	4413      	add	r3, r2
 8001d24:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8001d28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d2c:	3318      	adds	r3, #24
 8001d2e:	3230      	adds	r2, #48	; 0x30
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001d36:	440b      	add	r3, r1
 8001d38:	f803 2c30 	strb.w	r2, [r3, #-48]
	for(count=0;count<6;count++)
 8001d3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d40:	3301      	adds	r3, #1
 8001d42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001d46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d9a5      	bls.n	8001c9a <send_x_distance+0x3a>
	}

	for(cont=3;cont<30;cont++)
 8001d4e:	2303      	movs	r3, #3
 8001d50:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001d54:	e00f      	b.n	8001d76 <send_x_distance+0x116>
		{
			sum = sum+send_msg[cont];
 8001d56:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001d5a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001d5e:	4413      	add	r3, r2
 8001d60:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001d64:	461a      	mov	r2, r3
 8001d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d68:	4413      	add	r3, r2
 8001d6a:	63bb      	str	r3, [r7, #56]	; 0x38
	for(cont=3;cont<30;cont++)
 8001d6c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001d70:	3301      	adds	r3, #1
 8001d72:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001d76:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001d7a:	2b1d      	cmp	r3, #29
 8001d7c:	d9eb      	bls.n	8001d56 <send_x_distance+0xf6>
		}

	send_msg[30] = (0xFF-(sum&0xFF));
 8001d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(UartReady == IDLE)
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <send_x_distance+0x16c>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10e      	bne.n	8001db0 <send_x_distance+0x150>
		  {
			  HAL_UART_Transmit_DMA(&huart1, send_msg, sizeof(send_msg));
 8001d92:	f107 0310 	add.w	r3, r7, #16
 8001d96:	221f      	movs	r2, #31
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <send_x_distance+0x170>)
 8001d9c:	f002 ff62 	bl	8004c64 <HAL_UART_Transmit_DMA>
			  UartReady = BUSY;
 8001da0:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <send_x_distance+0x16c>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]
			  osDelay(500);
 8001da6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001daa:	f003 fffb 	bl	8005da4 <osDelay>
		  {
			  osDelay(100);
		  }


  }
 8001dae:	e002      	b.n	8001db6 <send_x_distance+0x156>
			  osDelay(100);
 8001db0:	2064      	movs	r0, #100	; 0x64
 8001db2:	f003 fff7 	bl	8005da4 <osDelay>
  }
 8001db6:	bf00      	nop
 8001db8:	3740      	adds	r7, #64	; 0x40
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	00000000 	.word	0x00000000
 8001dc4:	40240000 	.word	0x40240000
 8001dc8:	08009adc 	.word	0x08009adc
 8001dcc:	20001844 	.word	0x20001844
 8001dd0:	200018d8 	.word	0x200018d8
 8001dd4:	00000000 	.word	0x00000000

08001dd8 <send_y_distance>:

void send_y_distance(uint32_t value_y){
 8001dd8:	b5b0      	push	{r4, r5, r7, lr}
 8001dda:	b090      	sub	sp, #64	; 0x40
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	uint8_t send_msg[]= {0x7E,0x00,0x1B,0x10,0x01,0x00,0x13,0xA2,0x00,0x40,0xB0,0x98,0x96,0xFF,0xFE,0x00,0x00,0x76,0x61,0x6C,0x6F,0x72,0x79,0x20,0xBF,0xBF,0xBF,0xBF,0xBF,0xBF,0xE7};
 8001de0:	4b57      	ldr	r3, [pc, #348]	; (8001f40 <send_y_distance+0x168>)
 8001de2:	f107 0410 	add.w	r4, r7, #16
 8001de6:	461d      	mov	r5, r3
 8001de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001df0:	c407      	stmia	r4!, {r0, r1, r2}
 8001df2:	8023      	strh	r3, [r4, #0]
 8001df4:	3402      	adds	r4, #2
 8001df6:	0c1b      	lsrs	r3, r3, #16
 8001df8:	7023      	strb	r3, [r4, #0]
	uint8_t divider_y[6];
	uint8_t count=0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t cont = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	long pot_1;
	long pot_2;

	long sum = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	63bb      	str	r3, [r7, #56]	; 0x38

	for(count=0;count<6;count++)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001e10:	e055      	b.n	8001ebe <send_y_distance+0xe6>
	{
		pot_1 = pow(10,6-count);
 8001e12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e16:	f1c3 0306 	rsb	r3, r3, #6
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fb2a 	bl	8000474 <__aeabi_i2d>
 8001e20:	4603      	mov	r3, r0
 8001e22:	460c      	mov	r4, r1
 8001e24:	ec44 3b11 	vmov	d1, r3, r4
 8001e28:	ed9f 0b43 	vldr	d0, [pc, #268]	; 8001f38 <send_y_distance+0x160>
 8001e2c:	f005 fc24 	bl	8007678 <pow>
 8001e30:	ec54 3b10 	vmov	r3, r4, d0
 8001e34:	4618      	mov	r0, r3
 8001e36:	4621      	mov	r1, r4
 8001e38:	f7fe fe36 	bl	8000aa8 <__aeabi_d2iz>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
		pot_2 = pow(10,5-count);
 8001e40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e44:	f1c3 0305 	rsb	r3, r3, #5
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe fb13 	bl	8000474 <__aeabi_i2d>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	460c      	mov	r4, r1
 8001e52:	ec44 3b11 	vmov	d1, r3, r4
 8001e56:	ed9f 0b38 	vldr	d0, [pc, #224]	; 8001f38 <send_y_distance+0x160>
 8001e5a:	f005 fc0d 	bl	8007678 <pow>
 8001e5e:	ec54 3b10 	vmov	r3, r4, d0
 8001e62:	4618      	mov	r0, r3
 8001e64:	4621      	mov	r1, r4
 8001e66:	f7fe fe1f 	bl	8000aa8 <__aeabi_d2iz>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30

		divider_y[count] = (value_y%(pot_1)/pot_2);
 8001e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e76:	fb02 f201 	mul.w	r2, r2, r1
 8001e7a:	1a9a      	subs	r2, r3, r2
 8001e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001e8c:	440b      	add	r3, r1
 8001e8e:	f803 2c38 	strb.w	r2, [r3, #-56]

		send_msg[24+count] = 0x30+divider_y[count];
 8001e92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e96:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8001ea0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ea4:	3318      	adds	r3, #24
 8001ea6:	3230      	adds	r2, #48	; 0x30
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001eae:	440b      	add	r3, r1
 8001eb0:	f803 2c30 	strb.w	r2, [r3, #-48]
	for(count=0;count<6;count++)
 8001eb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001eb8:	3301      	adds	r3, #1
 8001eba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001ebe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ec2:	2b05      	cmp	r3, #5
 8001ec4:	d9a5      	bls.n	8001e12 <send_y_distance+0x3a>
	}

	for(cont=3;cont<30;cont++)
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001ecc:	e00f      	b.n	8001eee <send_y_distance+0x116>
	{
		sum = sum+send_msg[cont];
 8001ece:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001ed2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001edc:	461a      	mov	r2, r3
 8001ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee0:	4413      	add	r3, r2
 8001ee2:	63bb      	str	r3, [r7, #56]	; 0x38
	for(cont=3;cont<30;cont++)
 8001ee4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001eee:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001ef2:	2b1d      	cmp	r3, #29
 8001ef4:	d9eb      	bls.n	8001ece <send_y_distance+0xf6>
	}
	send_msg[30] = (0xFF-(sum&0xFF));
 8001ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(UartReady == IDLE)
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <send_y_distance+0x16c>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10e      	bne.n	8001f28 <send_y_distance+0x150>
			  {
				  HAL_UART_Transmit_DMA(&huart1, send_msg, sizeof(send_msg));
 8001f0a:	f107 0310 	add.w	r3, r7, #16
 8001f0e:	221f      	movs	r2, #31
 8001f10:	4619      	mov	r1, r3
 8001f12:	480d      	ldr	r0, [pc, #52]	; (8001f48 <send_y_distance+0x170>)
 8001f14:	f002 fea6 	bl	8004c64 <HAL_UART_Transmit_DMA>
				  UartReady = BUSY;
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <send_y_distance+0x16c>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
				  osDelay(500);
 8001f1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f22:	f003 ff3f 	bl	8005da4 <osDelay>
			  {
				  osDelay(100);
			  }


  }
 8001f26:	e002      	b.n	8001f2e <send_y_distance+0x156>
				  osDelay(100);
 8001f28:	2064      	movs	r0, #100	; 0x64
 8001f2a:	f003 ff3b 	bl	8005da4 <osDelay>
  }
 8001f2e:	bf00      	nop
 8001f30:	3740      	adds	r7, #64	; 0x40
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bdb0      	pop	{r4, r5, r7, pc}
 8001f36:	bf00      	nop
 8001f38:	00000000 	.word	0x00000000
 8001f3c:	40240000 	.word	0x40240000
 8001f40:	08009afc 	.word	0x08009afc
 8001f44:	20001844 	.word	0x20001844
 8001f48:	200018d8 	.word	0x200018d8

08001f4c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <MX_GPIO_Init+0x2c>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	4a08      	ldr	r2, [pc, #32]	; (8001f78 <MX_GPIO_Init+0x2c>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <MX_GPIO_Init+0x2c>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]

}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000

08001f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f80:	f000 fb99 	bl	80026b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f84:	f000 f80d 	bl	8001fa2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f88:	f7ff ffe0 	bl	8001f4c <MX_GPIO_Init>
  MX_DMA_Init();
 8001f8c:	f7fe ff84 	bl	8000e98 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001f90:	f000 fa54 	bl	800243c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_UART1_Start();
 8001f94:	f000 fb28 	bl	80025e8 <MX_UART1_Start>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8001f98:	f7fe ffbe 	bl	8000f18 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001f9c:	f003 fed6 	bl	8005d4c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <main+0x24>

08001fa2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b0b8      	sub	sp, #224	; 0xe0
 8001fa6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fa8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fac:	2244      	movs	r2, #68	; 0x44
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f005 fa72 	bl	800749a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fb6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	60da      	str	r2, [r3, #12]
 8001fc4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fc6:	463b      	mov	r3, r7
 8001fc8:	2288      	movs	r2, #136	; 0x88
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f005 fa64 	bl	800749a <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001fd2:	2310      	movs	r3, #16
 8001fd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001fe4:	2360      	movs	r3, #96	; 0x60
 8001fe6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fea:	2302      	movs	r3, #2
 8001fec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001ffc:	2328      	movs	r3, #40	; 0x28
 8001ffe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002002:	2307      	movs	r3, #7
 8002004:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002008:	2302      	movs	r3, #2
 800200a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800200e:	2302      	movs	r3, #2
 8002010:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002014:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002018:	4618      	mov	r0, r3
 800201a:	f001 f8a9 	bl	8003170 <HAL_RCC_OscConfig>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002024:	f000 f843 	bl	80020ae <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002028:	230f      	movs	r3, #15
 800202a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800202e:	2303      	movs	r3, #3
 8002030:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800203a:	2300      	movs	r3, #0
 800203c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002040:	2300      	movs	r3, #0
 8002042:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002046:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800204a:	2104      	movs	r1, #4
 800204c:	4618      	mov	r0, r3
 800204e:	f001 fc75 	bl	800393c <HAL_RCC_ClockConfig>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002058:	f000 f829 	bl	80020ae <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800205c:	2301      	movs	r3, #1
 800205e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002060:	2300      	movs	r3, #0
 8002062:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002064:	463b      	mov	r3, r7
 8002066:	4618      	mov	r0, r3
 8002068:	f001 fe9e 	bl	8003da8 <HAL_RCCEx_PeriphCLKConfig>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002072:	f000 f81c 	bl	80020ae <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002076:	f44f 7000 	mov.w	r0, #512	; 0x200
 800207a:	f001 f823 	bl	80030c4 <HAL_PWREx_ControlVoltageScaling>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8002084:	f000 f813 	bl	80020ae <Error_Handler>
  }
}
 8002088:	bf00      	nop
 800208a:	37e0      	adds	r7, #224	; 0xe0
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a0:	d101      	bne.n	80020a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020a2:	f000 fb21 	bl	80026e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_MspInit+0x4c>)
 80020c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c6:	4a10      	ldr	r2, [pc, #64]	; (8002108 <HAL_MspInit+0x4c>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6613      	str	r3, [r2, #96]	; 0x60
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_MspInit+0x4c>)
 80020d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_MspInit+0x4c>)
 80020dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020de:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <HAL_MspInit+0x4c>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e4:	6593      	str	r3, [r2, #88]	; 0x58
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_MspInit+0x4c>)
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020f2:	2200      	movs	r2, #0
 80020f4:	210f      	movs	r1, #15
 80020f6:	f06f 0001 	mvn.w	r0, #1
 80020fa:	f000 fbcb 	bl	8002894 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000

0800210c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08c      	sub	sp, #48	; 0x30
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 800211c:	2200      	movs	r2, #0
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	201c      	movs	r0, #28
 8002122:	f000 fbb7 	bl	8002894 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8002126:	201c      	movs	r0, #28
 8002128:	f000 fbd0 	bl	80028cc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800212c:	4b1f      	ldr	r3, [pc, #124]	; (80021ac <HAL_InitTick+0xa0>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002130:	4a1e      	ldr	r2, [pc, #120]	; (80021ac <HAL_InitTick+0xa0>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6593      	str	r3, [r2, #88]	; 0x58
 8002138:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <HAL_InitTick+0xa0>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002144:	f107 0210 	add.w	r2, r7, #16
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f001 fd98 	bl	8003c84 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002154:	f001 fd6a 	bl	8003c2c <HAL_RCC_GetPCLK1Freq>
 8002158:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800215a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215c:	4a14      	ldr	r2, [pc, #80]	; (80021b0 <HAL_InitTick+0xa4>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	0c9b      	lsrs	r3, r3, #18
 8002164:	3b01      	subs	r3, #1
 8002166:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_InitTick+0xa8>)
 800216a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800216e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8002170:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <HAL_InitTick+0xa8>)
 8002172:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002176:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002178:	4a0e      	ldr	r2, [pc, #56]	; (80021b4 <HAL_InitTick+0xa8>)
 800217a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800217e:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <HAL_InitTick+0xa8>)
 8002180:	2200      	movs	r2, #0
 8002182:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_InitTick+0xa8>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800218a:	480a      	ldr	r0, [pc, #40]	; (80021b4 <HAL_InitTick+0xa8>)
 800218c:	f002 fabc 	bl	8004708 <HAL_TIM_Base_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d104      	bne.n	80021a0 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8002196:	4807      	ldr	r0, [pc, #28]	; (80021b4 <HAL_InitTick+0xa8>)
 8002198:	f002 faec 	bl	8004774 <HAL_TIM_Base_Start_IT>
 800219c:	4603      	mov	r3, r0
 800219e:	e000      	b.n	80021a2 <HAL_InitTick+0x96>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3730      	adds	r7, #48	; 0x30
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	431bde83 	.word	0x431bde83
 80021b4:	20001804 	.word	0x20001804

080021b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ca:	e7fe      	b.n	80021ca <HardFault_Handler+0x4>

080021cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d0:	e7fe      	b.n	80021d0 <MemManage_Handler+0x4>

080021d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d6:	e7fe      	b.n	80021d6 <BusFault_Handler+0x4>

080021d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021dc:	e7fe      	b.n	80021dc <UsageFault_Handler+0x4>

080021de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <DMA1_Channel4_IRQHandler+0x10>)
 80021f2:	f000 fcd2 	bl	8002b9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20001848 	.word	0x20001848

08002200 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <DMA1_Channel5_IRQHandler+0x10>)
 8002206:	f000 fcc8 	bl	8002b9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20001890 	.word	0x20001890

08002214 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <TIM2_IRQHandler+0x10>)
 800221a:	f002 fad5 	bl	80047c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20001804 	.word	0x20001804

08002228 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0

	static uint16_t  RearRxBuffer ;
	static uint16_t HeadRx;

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800222c:	481b      	ldr	r0, [pc, #108]	; (800229c <USART1_IRQHandler+0x74>)
 800222e:	f002 fe19 	bl	8004e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (huart1.Instance->ISR & UART_FLAG_IDLE)
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <USART1_IRQHandler+0x74>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b00      	cmp	r3, #0
 800223e:	d02a      	beq.n	8002296 <USART1_IRQHandler+0x6e>
   {

	  RearRxBuffer = 4096 - hdma_usart1_rx.Instance->CNDTR;
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <USART1_IRQHandler+0x78>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	b29b      	uxth	r3, r3
 8002248:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800224c:	b29a      	uxth	r2, r3
 800224e:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <USART1_IRQHandler+0x7c>)
 8002250:	801a      	strh	r2, [r3, #0]
	  while( HeadRx!= RearRxBuffer)
 8002252:	e016      	b.n	8002282 <USART1_IRQHandler+0x5a>
	  {
		  SaveData( &aRxBuffer[HeadRx] );
 8002254:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <USART1_IRQHandler+0x80>)
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	4b14      	ldr	r3, [pc, #80]	; (80022ac <USART1_IRQHandler+0x84>)
 800225c:	4413      	add	r3, r2
 800225e:	4618      	mov	r0, r3
 8002260:	f000 f826 	bl	80022b0 <SaveData>

		  if( HeadRx >= RXDMASIZE)
 8002264:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <USART1_IRQHandler+0x80>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800226c:	d303      	bcc.n	8002276 <USART1_IRQHandler+0x4e>
		  {
			  HeadRx = 0;
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <USART1_IRQHandler+0x80>)
 8002270:	2200      	movs	r2, #0
 8002272:	801a      	strh	r2, [r3, #0]
 8002274:	e005      	b.n	8002282 <USART1_IRQHandler+0x5a>
		  }
		  else
		  {
			  HeadRx++;
 8002276:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <USART1_IRQHandler+0x80>)
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	3301      	adds	r3, #1
 800227c:	b29a      	uxth	r2, r3
 800227e:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <USART1_IRQHandler+0x80>)
 8002280:	801a      	strh	r2, [r3, #0]
	  while( HeadRx!= RearRxBuffer)
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <USART1_IRQHandler+0x80>)
 8002284:	881a      	ldrh	r2, [r3, #0]
 8002286:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <USART1_IRQHandler+0x7c>)
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d1e2      	bne.n	8002254 <USART1_IRQHandler+0x2c>
		  }
	  }

 	  huart1.Instance->ICR = USART_ICR_IDLECF;
 800228e:	4b03      	ldr	r3, [pc, #12]	; (800229c <USART1_IRQHandler+0x74>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2210      	movs	r2, #16
 8002294:	621a      	str	r2, [r3, #32]

   }
  /* USER CODE END USART1_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200018d8 	.word	0x200018d8
 80022a0:	20001890 	.word	0x20001890
 80022a4:	200002ee 	.word	0x200002ee
 80022a8:	200002f0 	.word	0x200002f0
 80022ac:	20001958 	.word	0x20001958

080022b0 <SaveData>:

/* USER CODE BEGIN 1 */

void SaveData( uint8_t *data )
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  static uint8_t AtCmdResponse;
  static uint16_t AtCmd[2];

  static Beacon_t Device;

  portBASE_TYPE xHigherPriorityTaskWoken = pdTRUE;
 80022b8:	2301      	movs	r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]

  RxData[RxCount] = *data;
 80022bc:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <SaveData+0x104>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	461a      	mov	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	7819      	ldrb	r1, [r3, #0]
 80022c6:	4b3c      	ldr	r3, [pc, #240]	; (80023b8 <SaveData+0x108>)
 80022c8:	5499      	strb	r1, [r3, r2]

  switch(RxCount)
 80022ca:	4b3a      	ldr	r3, [pc, #232]	; (80023b4 <SaveData+0x104>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d00e      	beq.n	80022f0 <SaveData+0x40>
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d013      	beq.n	80022fe <SaveData+0x4e>
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d11e      	bne.n	8002318 <SaveData+0x68>
    {

      case 0:

        if(RxData[0] == 0x7E) RxCount++;
 80022da:	4b37      	ldr	r3, [pc, #220]	; (80023b8 <SaveData+0x108>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b7e      	cmp	r3, #126	; 0x7e
 80022e0:	d162      	bne.n	80023a8 <SaveData+0xf8>
 80022e2:	4b34      	ldr	r3, [pc, #208]	; (80023b4 <SaveData+0x104>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	3301      	adds	r3, #1
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4b32      	ldr	r3, [pc, #200]	; (80023b4 <SaveData+0x104>)
 80022ec:	701a      	strb	r2, [r3, #0]

        break;
 80022ee:	e05b      	b.n	80023a8 <SaveData+0xf8>

      case 1:

        RxCount++;
 80022f0:	4b30      	ldr	r3, [pc, #192]	; (80023b4 <SaveData+0x104>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	3301      	adds	r3, #1
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	4b2e      	ldr	r3, [pc, #184]	; (80023b4 <SaveData+0x104>)
 80022fa:	701a      	strb	r2, [r3, #0]

        break;
 80022fc:	e055      	b.n	80023aa <SaveData+0xfa>

      case 2:

        BufferRxSize = (256*RxData[1] + RxData[2]) + 3;
 80022fe:	4b2e      	ldr	r3, [pc, #184]	; (80023b8 <SaveData+0x108>)
 8002300:	789b      	ldrb	r3, [r3, #2]
 8002302:	3303      	adds	r3, #3
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <SaveData+0x10c>)
 8002308:	701a      	strb	r2, [r3, #0]

        RxCount++;
 800230a:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <SaveData+0x104>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	3301      	adds	r3, #1
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <SaveData+0x104>)
 8002314:	701a      	strb	r2, [r3, #0]

        break;
 8002316:	e048      	b.n	80023aa <SaveData+0xfa>

      default:

        if(RxCount == BufferRxSize)
 8002318:	4b26      	ldr	r3, [pc, #152]	; (80023b4 <SaveData+0x104>)
 800231a:	781a      	ldrb	r2, [r3, #0]
 800231c:	4b27      	ldr	r3, [pc, #156]	; (80023bc <SaveData+0x10c>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d13a      	bne.n	800239a <SaveData+0xea>
        {

        	AtCmdResponse = RxData[3];
 8002324:	4b24      	ldr	r3, [pc, #144]	; (80023b8 <SaveData+0x108>)
 8002326:	78da      	ldrb	r2, [r3, #3]
 8002328:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <SaveData+0x110>)
 800232a:	701a      	strb	r2, [r3, #0]
        	if(AtCmdResponse == 0x88)
 800232c:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <SaveData+0x110>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b88      	cmp	r3, #136	; 0x88
 8002332:	d12e      	bne.n	8002392 <SaveData+0xe2>
        	{
        		AtCmd[0] = RxData[5];
 8002334:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <SaveData+0x108>)
 8002336:	795b      	ldrb	r3, [r3, #5]
 8002338:	b29a      	uxth	r2, r3
 800233a:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <SaveData+0x114>)
 800233c:	801a      	strh	r2, [r3, #0]
        		AtCmd[1] = RxData[6];
 800233e:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <SaveData+0x108>)
 8002340:	799b      	ldrb	r3, [r3, #6]
 8002342:	b29a      	uxth	r2, r3
 8002344:	4b1f      	ldr	r3, [pc, #124]	; (80023c4 <SaveData+0x114>)
 8002346:	805a      	strh	r2, [r3, #2]

        		if(AtCmd[0] == 0x41 && AtCmd[1] == 0x53){
 8002348:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <SaveData+0x114>)
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	2b41      	cmp	r3, #65	; 0x41
 800234e:	d120      	bne.n	8002392 <SaveData+0xe2>
 8002350:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <SaveData+0x114>)
 8002352:	885b      	ldrh	r3, [r3, #2]
 8002354:	2b53      	cmp	r3, #83	; 0x53
 8002356:	d11c      	bne.n	8002392 <SaveData+0xe2>
        			Device.panId[0] = RxData[10];
 8002358:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <SaveData+0x108>)
 800235a:	7a9a      	ldrb	r2, [r3, #10]
 800235c:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <SaveData+0x118>)
 800235e:	701a      	strb	r2, [r3, #0]
        			Device.panId[1] = RxData[11];
 8002360:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <SaveData+0x108>)
 8002362:	7ada      	ldrb	r2, [r3, #11]
 8002364:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <SaveData+0x118>)
 8002366:	705a      	strb	r2, [r3, #1]
        			Device.channel = RxData[9];
 8002368:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <SaveData+0x108>)
 800236a:	7a5a      	ldrb	r2, [r3, #9]
 800236c:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <SaveData+0x118>)
 800236e:	709a      	strb	r2, [r3, #2]
        			Device.lqi = RxData[22];
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <SaveData+0x108>)
 8002372:	7d9a      	ldrb	r2, [r3, #22]
 8002374:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <SaveData+0x118>)
 8002376:	711a      	strb	r2, [r3, #4]
        			Device.rssi = RxData[23];
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <SaveData+0x108>)
 800237a:	7ddb      	ldrb	r3, [r3, #23]
 800237c:	b25a      	sxtb	r2, r3
 800237e:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <SaveData+0x118>)
 8002380:	70da      	strb	r2, [r3, #3]


        			xQueueSendFromISR(DataRxHandle, &Device, &xHigherPriorityTaskWoken);
 8002382:	4b12      	ldr	r3, [pc, #72]	; (80023cc <SaveData+0x11c>)
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	f107 020c 	add.w	r2, r7, #12
 800238a:	2300      	movs	r3, #0
 800238c:	490e      	ldr	r1, [pc, #56]	; (80023c8 <SaveData+0x118>)
 800238e:	f003 fedf 	bl	8006150 <xQueueGenericSendFromISR>
        		}
        	}

          RxCount = 0;
 8002392:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <SaveData+0x104>)
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
		  // Seu dado está completo, trate ele e calcule o CRC


        }
        else RxCount++;
       break;
 8002398:	e007      	b.n	80023aa <SaveData+0xfa>
        else RxCount++;
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <SaveData+0x104>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	3301      	adds	r3, #1
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <SaveData+0x104>)
 80023a4:	701a      	strb	r2, [r3, #0]
       break;
 80023a6:	e000      	b.n	80023aa <SaveData+0xfa>
        break;
 80023a8:	bf00      	nop
    }
}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200002f2 	.word	0x200002f2
 80023b8:	200002f4 	.word	0x200002f4
 80023bc:	20000373 	.word	0x20000373
 80023c0:	20000374 	.word	0x20000374
 80023c4:	20000378 	.word	0x20000378
 80023c8:	2000037c 	.word	0x2000037c
 80023cc:	20000508 	.word	0x20000508

080023d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d4:	4b17      	ldr	r3, [pc, #92]	; (8002434 <SystemInit+0x64>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	4a16      	ldr	r2, [pc, #88]	; (8002434 <SystemInit+0x64>)
 80023dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <SystemInit+0x68>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a13      	ldr	r2, [pc, #76]	; (8002438 <SystemInit+0x68>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <SystemInit+0x68>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <SystemInit+0x68>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a0f      	ldr	r2, [pc, #60]	; (8002438 <SystemInit+0x68>)
 80023fc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002400:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002404:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002406:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <SystemInit+0x68>)
 8002408:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800240c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <SystemInit+0x68>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <SystemInit+0x68>)
 8002414:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002418:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <SystemInit+0x68>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <SystemInit+0x64>)
 8002422:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002426:	609a      	str	r2, [r3, #8]
#endif
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00
 8002438:	40021000 	.word	0x40021000

0800243c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <MX_USART1_UART_Init+0x58>)
 8002442:	4a15      	ldr	r2, [pc, #84]	; (8002498 <MX_USART1_UART_Init+0x5c>)
 8002444:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002446:	4b13      	ldr	r3, [pc, #76]	; (8002494 <MX_USART1_UART_Init+0x58>)
 8002448:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800244c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800244e:	4b11      	ldr	r3, [pc, #68]	; (8002494 <MX_USART1_UART_Init+0x58>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002454:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <MX_USART1_UART_Init+0x58>)
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <MX_USART1_UART_Init+0x58>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <MX_USART1_UART_Init+0x58>)
 8002462:	220c      	movs	r2, #12
 8002464:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <MX_USART1_UART_Init+0x58>)
 8002468:	2200      	movs	r2, #0
 800246a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <MX_USART1_UART_Init+0x58>)
 800246e:	2200      	movs	r2, #0
 8002470:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <MX_USART1_UART_Init+0x58>)
 8002474:	2200      	movs	r2, #0
 8002476:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <MX_USART1_UART_Init+0x58>)
 800247a:	2200      	movs	r2, #0
 800247c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800247e:	4805      	ldr	r0, [pc, #20]	; (8002494 <MX_USART1_UART_Init+0x58>)
 8002480:	f002 fba2 	bl	8004bc8 <HAL_UART_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800248a:	f7ff fe10 	bl	80020ae <Error_Handler>
  }

}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200018d8 	.word	0x200018d8
 8002498:	40013800 	.word	0x40013800

0800249c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a45      	ldr	r2, [pc, #276]	; (80025d0 <HAL_UART_MspInit+0x134>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	f040 8084 	bne.w	80025c8 <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024c0:	4b44      	ldr	r3, [pc, #272]	; (80025d4 <HAL_UART_MspInit+0x138>)
 80024c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c4:	4a43      	ldr	r2, [pc, #268]	; (80025d4 <HAL_UART_MspInit+0x138>)
 80024c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ca:	6613      	str	r3, [r2, #96]	; 0x60
 80024cc:	4b41      	ldr	r3, [pc, #260]	; (80025d4 <HAL_UART_MspInit+0x138>)
 80024ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d8:	4b3e      	ldr	r3, [pc, #248]	; (80025d4 <HAL_UART_MspInit+0x138>)
 80024da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024dc:	4a3d      	ldr	r2, [pc, #244]	; (80025d4 <HAL_UART_MspInit+0x138>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024e4:	4b3b      	ldr	r3, [pc, #236]	; (80025d4 <HAL_UART_MspInit+0x138>)
 80024e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fe:	2303      	movs	r3, #3
 8002500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002502:	2307      	movs	r3, #7
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002506:	f107 0314 	add.w	r3, r7, #20
 800250a:	4619      	mov	r1, r3
 800250c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002510:	f000 fc22 	bl	8002d58 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002514:	4b30      	ldr	r3, [pc, #192]	; (80025d8 <HAL_UART_MspInit+0x13c>)
 8002516:	4a31      	ldr	r2, [pc, #196]	; (80025dc <HAL_UART_MspInit+0x140>)
 8002518:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800251a:	4b2f      	ldr	r3, [pc, #188]	; (80025d8 <HAL_UART_MspInit+0x13c>)
 800251c:	2202      	movs	r2, #2
 800251e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002520:	4b2d      	ldr	r3, [pc, #180]	; (80025d8 <HAL_UART_MspInit+0x13c>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002526:	4b2c      	ldr	r3, [pc, #176]	; (80025d8 <HAL_UART_MspInit+0x13c>)
 8002528:	2200      	movs	r2, #0
 800252a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800252c:	4b2a      	ldr	r3, [pc, #168]	; (80025d8 <HAL_UART_MspInit+0x13c>)
 800252e:	2280      	movs	r2, #128	; 0x80
 8002530:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002532:	4b29      	ldr	r3, [pc, #164]	; (80025d8 <HAL_UART_MspInit+0x13c>)
 8002534:	2200      	movs	r2, #0
 8002536:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002538:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <HAL_UART_MspInit+0x13c>)
 800253a:	2200      	movs	r2, #0
 800253c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800253e:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <HAL_UART_MspInit+0x13c>)
 8002540:	2220      	movs	r2, #32
 8002542:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002544:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <HAL_UART_MspInit+0x13c>)
 8002546:	2200      	movs	r2, #0
 8002548:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800254a:	4823      	ldr	r0, [pc, #140]	; (80025d8 <HAL_UART_MspInit+0x13c>)
 800254c:	f000 f9cc 	bl	80028e8 <HAL_DMA_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8002556:	f7ff fdaa 	bl	80020ae <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a1e      	ldr	r2, [pc, #120]	; (80025d8 <HAL_UART_MspInit+0x13c>)
 800255e:	66da      	str	r2, [r3, #108]	; 0x6c
 8002560:	4a1d      	ldr	r2, [pc, #116]	; (80025d8 <HAL_UART_MspInit+0x13c>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002566:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <HAL_UART_MspInit+0x144>)
 8002568:	4a1e      	ldr	r2, [pc, #120]	; (80025e4 <HAL_UART_MspInit+0x148>)
 800256a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 800256c:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <HAL_UART_MspInit+0x144>)
 800256e:	2202      	movs	r2, #2
 8002570:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002572:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_UART_MspInit+0x144>)
 8002574:	2210      	movs	r2, #16
 8002576:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002578:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <HAL_UART_MspInit+0x144>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800257e:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <HAL_UART_MspInit+0x144>)
 8002580:	2280      	movs	r2, #128	; 0x80
 8002582:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002584:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <HAL_UART_MspInit+0x144>)
 8002586:	2200      	movs	r2, #0
 8002588:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <HAL_UART_MspInit+0x144>)
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002590:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <HAL_UART_MspInit+0x144>)
 8002592:	2200      	movs	r2, #0
 8002594:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002596:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_UART_MspInit+0x144>)
 8002598:	2200      	movs	r2, #0
 800259a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800259c:	4810      	ldr	r0, [pc, #64]	; (80025e0 <HAL_UART_MspInit+0x144>)
 800259e:	f000 f9a3 	bl	80028e8 <HAL_DMA_Init>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80025a8:	f7ff fd81 	bl	80020ae <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a0c      	ldr	r2, [pc, #48]	; (80025e0 <HAL_UART_MspInit+0x144>)
 80025b0:	669a      	str	r2, [r3, #104]	; 0x68
 80025b2:	4a0b      	ldr	r2, [pc, #44]	; (80025e0 <HAL_UART_MspInit+0x144>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2105      	movs	r1, #5
 80025bc:	2025      	movs	r0, #37	; 0x25
 80025be:	f000 f969 	bl	8002894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025c2:	2025      	movs	r0, #37	; 0x25
 80025c4:	f000 f982 	bl	80028cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80025c8:	bf00      	nop
 80025ca:	3728      	adds	r7, #40	; 0x28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40013800 	.word	0x40013800
 80025d4:	40021000 	.word	0x40021000
 80025d8:	20001890 	.word	0x20001890
 80025dc:	40020058 	.word	0x40020058
 80025e0:	20001848 	.word	0x20001848
 80025e4:	40020044 	.word	0x40020044

080025e8 <MX_UART1_Start>:
  }
} 

/* USER CODE BEGIN 1 */

void MX_UART1_Start() {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0

	huart1.Instance->ICR = USART_ICR_IDLECF;
 80025ec:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <MX_UART1_Start+0x3c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2210      	movs	r2, #16
 80025f2:	621a      	str	r2, [r3, #32]

	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);  // enable idle line interrupt]
 80025f4:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <MX_UART1_Start+0x3c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <MX_UART1_Start+0x3c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0210 	orr.w	r2, r2, #16
 8002602:	601a      	str	r2, [r3, #0]


	if (HAL_UART_Receive_DMA(&huart1, (uint8_t*) aRxBuffer, RXDMASIZE)
 8002604:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002608:	4907      	ldr	r1, [pc, #28]	; (8002628 <MX_UART1_Start+0x40>)
 800260a:	4806      	ldr	r0, [pc, #24]	; (8002624 <MX_UART1_Start+0x3c>)
 800260c:	f002 fba6 	bl	8004d5c <HAL_UART_Receive_DMA>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_UART1_Start+0x32>
			!= HAL_OK) {
		Error_Handler();
 8002616:	f7ff fd4a 	bl	80020ae <Error_Handler>
	}

	UartReady = IDLE;
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <MX_UART1_Start+0x44>)
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	200018d8 	.word	0x200018d8
 8002628:	20001958 	.word	0x20001958
 800262c:	20001844 	.word	0x20001844

08002630 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = IDLE;
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <HAL_UART_TxCpltCallback+0x1c>)
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]

}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20001844 	.word	0x20001844

08002664 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800269c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002668:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800266a:	e003      	b.n	8002674 <LoopCopyDataInit>

0800266c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800266e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002670:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002672:	3104      	adds	r1, #4

08002674 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002674:	480b      	ldr	r0, [pc, #44]	; (80026a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002678:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800267a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800267c:	d3f6      	bcc.n	800266c <CopyDataInit>
	ldr	r2, =_sbss
 800267e:	4a0b      	ldr	r2, [pc, #44]	; (80026ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8002680:	e002      	b.n	8002688 <LoopFillZerobss>

08002682 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002682:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002684:	f842 3b04 	str.w	r3, [r2], #4

08002688 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002688:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <LoopForever+0x16>)
	cmp	r2, r3
 800268a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800268c:	d3f9      	bcc.n	8002682 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800268e:	f7ff fe9f 	bl	80023d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002692:	f004 fed3 	bl	800743c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002696:	f7ff fc71 	bl	8001f7c <main>

0800269a <LoopForever>:

LoopForever:
    b LoopForever
 800269a:	e7fe      	b.n	800269a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800269c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80026a0:	08009da0 	.word	0x08009da0
	ldr	r0, =_sdata
 80026a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80026a8:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 80026ac:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 80026b0:	2000295c 	.word	0x2000295c

080026b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026b4:	e7fe      	b.n	80026b4 <ADC1_2_IRQHandler>

080026b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c0:	2003      	movs	r0, #3
 80026c2:	f000 f8dc 	bl	800287e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026c6:	2000      	movs	r0, #0
 80026c8:	f7ff fd20 	bl	800210c <HAL_InitTick>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	71fb      	strb	r3, [r7, #7]
 80026d6:	e001      	b.n	80026dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026d8:	f7ff fcf0 	bl	80020bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026dc:	79fb      	ldrb	r3, [r7, #7]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <HAL_IncTick+0x1c>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_IncTick+0x20>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4413      	add	r3, r2
 80026f6:	4a03      	ldr	r2, [pc, #12]	; (8002704 <HAL_IncTick+0x1c>)
 80026f8:	6013      	str	r3, [r2, #0]
}
 80026fa:	bf00      	nop
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	20002958 	.word	0x20002958
 8002708:	20000008 	.word	0x20000008

0800270c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return uwTick;
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <HAL_GetTick+0x14>)
 8002712:	681b      	ldr	r3, [r3, #0]
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20002958 	.word	0x20002958

08002724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <__NVIC_SetPriorityGrouping+0x44>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002740:	4013      	ands	r3, r2
 8002742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800274c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002756:	4a04      	ldr	r2, [pc, #16]	; (8002768 <__NVIC_SetPriorityGrouping+0x44>)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	60d3      	str	r3, [r2, #12]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <__NVIC_GetPriorityGrouping+0x18>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	f003 0307 	and.w	r3, r3, #7
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	2b00      	cmp	r3, #0
 8002798:	db0b      	blt.n	80027b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	f003 021f 	and.w	r2, r3, #31
 80027a0:	4907      	ldr	r1, [pc, #28]	; (80027c0 <__NVIC_EnableIRQ+0x38>)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	2001      	movs	r0, #1
 80027aa:	fa00 f202 	lsl.w	r2, r0, r2
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000e100 	.word	0xe000e100

080027c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	6039      	str	r1, [r7, #0]
 80027ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	db0a      	blt.n	80027ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	490c      	ldr	r1, [pc, #48]	; (8002810 <__NVIC_SetPriority+0x4c>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	0112      	lsls	r2, r2, #4
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	440b      	add	r3, r1
 80027e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ec:	e00a      	b.n	8002804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4908      	ldr	r1, [pc, #32]	; (8002814 <__NVIC_SetPriority+0x50>)
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	3b04      	subs	r3, #4
 80027fc:	0112      	lsls	r2, r2, #4
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	440b      	add	r3, r1
 8002802:	761a      	strb	r2, [r3, #24]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000e100 	.word	0xe000e100
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	; 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f1c3 0307 	rsb	r3, r3, #7
 8002832:	2b04      	cmp	r3, #4
 8002834:	bf28      	it	cs
 8002836:	2304      	movcs	r3, #4
 8002838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3304      	adds	r3, #4
 800283e:	2b06      	cmp	r3, #6
 8002840:	d902      	bls.n	8002848 <NVIC_EncodePriority+0x30>
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3b03      	subs	r3, #3
 8002846:	e000      	b.n	800284a <NVIC_EncodePriority+0x32>
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284c:	f04f 32ff 	mov.w	r2, #4294967295
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43da      	mvns	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	401a      	ands	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002860:	f04f 31ff 	mov.w	r1, #4294967295
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa01 f303 	lsl.w	r3, r1, r3
 800286a:	43d9      	mvns	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002870:	4313      	orrs	r3, r2
         );
}
 8002872:	4618      	mov	r0, r3
 8002874:	3724      	adds	r7, #36	; 0x24
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff ff4c 	bl	8002724 <__NVIC_SetPriorityGrouping>
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028a6:	f7ff ff61 	bl	800276c <__NVIC_GetPriorityGrouping>
 80028aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	6978      	ldr	r0, [r7, #20]
 80028b2:	f7ff ffb1 	bl	8002818 <NVIC_EncodePriority>
 80028b6:	4602      	mov	r2, r0
 80028b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff ff80 	bl	80027c4 <__NVIC_SetPriority>
}
 80028c4:	bf00      	nop
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff ff54 	bl	8002788 <__NVIC_EnableIRQ>
}
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e098      	b.n	8002a2c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	4b4d      	ldr	r3, [pc, #308]	; (8002a38 <HAL_DMA_Init+0x150>)
 8002902:	429a      	cmp	r2, r3
 8002904:	d80f      	bhi.n	8002926 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	4b4b      	ldr	r3, [pc, #300]	; (8002a3c <HAL_DMA_Init+0x154>)
 800290e:	4413      	add	r3, r2
 8002910:	4a4b      	ldr	r2, [pc, #300]	; (8002a40 <HAL_DMA_Init+0x158>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	009a      	lsls	r2, r3, #2
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a48      	ldr	r2, [pc, #288]	; (8002a44 <HAL_DMA_Init+0x15c>)
 8002922:	641a      	str	r2, [r3, #64]	; 0x40
 8002924:	e00e      	b.n	8002944 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	4b46      	ldr	r3, [pc, #280]	; (8002a48 <HAL_DMA_Init+0x160>)
 800292e:	4413      	add	r3, r2
 8002930:	4a43      	ldr	r2, [pc, #268]	; (8002a40 <HAL_DMA_Init+0x158>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	091b      	lsrs	r3, r3, #4
 8002938:	009a      	lsls	r2, r3, #2
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a42      	ldr	r2, [pc, #264]	; (8002a4c <HAL_DMA_Init+0x164>)
 8002942:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800295a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002968:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002974:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002980:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800299e:	d039      	beq.n	8002a14 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	4a27      	ldr	r2, [pc, #156]	; (8002a44 <HAL_DMA_Init+0x15c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d11a      	bne.n	80029e0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80029aa:	4b29      	ldr	r3, [pc, #164]	; (8002a50 <HAL_DMA_Init+0x168>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	f003 031c 	and.w	r3, r3, #28
 80029b6:	210f      	movs	r1, #15
 80029b8:	fa01 f303 	lsl.w	r3, r1, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	4924      	ldr	r1, [pc, #144]	; (8002a50 <HAL_DMA_Init+0x168>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80029c4:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <HAL_DMA_Init+0x168>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6859      	ldr	r1, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d0:	f003 031c 	and.w	r3, r3, #28
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	491d      	ldr	r1, [pc, #116]	; (8002a50 <HAL_DMA_Init+0x168>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
 80029de:	e019      	b.n	8002a14 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80029e0:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <HAL_DMA_Init+0x16c>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e8:	f003 031c 	and.w	r3, r3, #28
 80029ec:	210f      	movs	r1, #15
 80029ee:	fa01 f303 	lsl.w	r3, r1, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	4917      	ldr	r1, [pc, #92]	; (8002a54 <HAL_DMA_Init+0x16c>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80029fa:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <HAL_DMA_Init+0x16c>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6859      	ldr	r1, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f003 031c 	and.w	r3, r3, #28
 8002a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0e:	4911      	ldr	r1, [pc, #68]	; (8002a54 <HAL_DMA_Init+0x16c>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	40020407 	.word	0x40020407
 8002a3c:	bffdfff8 	.word	0xbffdfff8
 8002a40:	cccccccd 	.word	0xcccccccd
 8002a44:	40020000 	.word	0x40020000
 8002a48:	bffdfbf8 	.word	0xbffdfbf8
 8002a4c:	40020400 	.word	0x40020400
 8002a50:	400200a8 	.word	0x400200a8
 8002a54:	400204a8 	.word	0x400204a8

08002a58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_DMA_Start_IT+0x20>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e04b      	b.n	8002b10 <HAL_DMA_Start_IT+0xb8>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d13a      	bne.n	8002b02 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0201 	bic.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f921 	bl	8002cf8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d008      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 020e 	orr.w	r2, r2, #14
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	e00f      	b.n	8002af0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0204 	bic.w	r2, r2, #4
 8002ade:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 020a 	orr.w	r2, r2, #10
 8002aee:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	e005      	b.n	8002b0e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d005      	beq.n	8002b3c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2204      	movs	r2, #4
 8002b34:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
 8002b3a:	e029      	b.n	8002b90 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 020e 	bic.w	r2, r2, #14
 8002b4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0201 	bic.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b60:	f003 021c 	and.w	r2, r3, #28
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	2101      	movs	r1, #1
 8002b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	4798      	blx	r3
    }
  }
  return status;
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	f003 031c 	and.w	r3, r3, #28
 8002bba:	2204      	movs	r2, #4
 8002bbc:	409a      	lsls	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d026      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x7a>
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d021      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0320 	and.w	r3, r3, #32
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d107      	bne.n	8002bee <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0204 	bic.w	r2, r2, #4
 8002bec:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	f003 021c 	and.w	r2, r3, #28
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	2104      	movs	r1, #4
 8002bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002c00:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d071      	beq.n	8002cee <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002c12:	e06c      	b.n	8002cee <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	f003 031c 	and.w	r3, r3, #28
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d02e      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xec>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d029      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10b      	bne.n	8002c58 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 020a 	bic.w	r2, r2, #10
 8002c4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5c:	f003 021c 	and.w	r2, r3, #28
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	2102      	movs	r1, #2
 8002c66:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d038      	beq.n	8002cee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c84:	e033      	b.n	8002cee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	f003 031c 	and.w	r3, r3, #28
 8002c8e:	2208      	movs	r2, #8
 8002c90:	409a      	lsls	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d02a      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x156>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f003 0308 	and.w	r3, r3, #8
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d025      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 020e 	bic.w	r2, r2, #14
 8002cb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb8:	f003 021c 	and.w	r2, r3, #28
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d004      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002cee:	bf00      	nop
 8002cf0:	bf00      	nop
}
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	f003 021c 	and.w	r2, r3, #28
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	2101      	movs	r1, #1
 8002d14:	fa01 f202 	lsl.w	r2, r1, r2
 8002d18:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b10      	cmp	r3, #16
 8002d28:	d108      	bne.n	8002d3c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d3a:	e007      	b.n	8002d4c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	60da      	str	r2, [r3, #12]
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d66:	e17f      	b.n	8003068 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	fa01 f303 	lsl.w	r3, r1, r3
 8002d74:	4013      	ands	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 8171 	beq.w	8003062 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d00b      	beq.n	8002da0 <HAL_GPIO_Init+0x48>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d007      	beq.n	8002da0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d94:	2b11      	cmp	r3, #17
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b12      	cmp	r3, #18
 8002d9e:	d130      	bne.n	8002e02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	2203      	movs	r2, #3
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4013      	ands	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4013      	ands	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	091b      	lsrs	r3, r3, #4
 8002dec:	f003 0201 	and.w	r2, r3, #1
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d118      	bne.n	8002e40 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e14:	2201      	movs	r2, #1
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	08db      	lsrs	r3, r3, #3
 8002e2a:	f003 0201 	and.w	r2, r3, #1
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4013      	ands	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0x128>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b12      	cmp	r3, #18
 8002e7e:	d123      	bne.n	8002ec8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	08da      	lsrs	r2, r3, #3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3208      	adds	r2, #8
 8002e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	220f      	movs	r2, #15
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	08da      	lsrs	r2, r3, #3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3208      	adds	r2, #8
 8002ec2:	6939      	ldr	r1, [r7, #16]
 8002ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4013      	ands	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 0203 	and.w	r2, r3, #3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80ac 	beq.w	8003062 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f0a:	4b5e      	ldr	r3, [pc, #376]	; (8003084 <HAL_GPIO_Init+0x32c>)
 8002f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0e:	4a5d      	ldr	r2, [pc, #372]	; (8003084 <HAL_GPIO_Init+0x32c>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	6613      	str	r3, [r2, #96]	; 0x60
 8002f16:	4b5b      	ldr	r3, [pc, #364]	; (8003084 <HAL_GPIO_Init+0x32c>)
 8002f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f22:	4a59      	ldr	r2, [pc, #356]	; (8003088 <HAL_GPIO_Init+0x330>)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	089b      	lsrs	r3, r3, #2
 8002f28:	3302      	adds	r3, #2
 8002f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	220f      	movs	r2, #15
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4013      	ands	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f4c:	d025      	beq.n	8002f9a <HAL_GPIO_Init+0x242>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a4e      	ldr	r2, [pc, #312]	; (800308c <HAL_GPIO_Init+0x334>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d01f      	beq.n	8002f96 <HAL_GPIO_Init+0x23e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a4d      	ldr	r2, [pc, #308]	; (8003090 <HAL_GPIO_Init+0x338>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d019      	beq.n	8002f92 <HAL_GPIO_Init+0x23a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a4c      	ldr	r2, [pc, #304]	; (8003094 <HAL_GPIO_Init+0x33c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d013      	beq.n	8002f8e <HAL_GPIO_Init+0x236>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a4b      	ldr	r2, [pc, #300]	; (8003098 <HAL_GPIO_Init+0x340>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00d      	beq.n	8002f8a <HAL_GPIO_Init+0x232>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a4a      	ldr	r2, [pc, #296]	; (800309c <HAL_GPIO_Init+0x344>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d007      	beq.n	8002f86 <HAL_GPIO_Init+0x22e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a49      	ldr	r2, [pc, #292]	; (80030a0 <HAL_GPIO_Init+0x348>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d101      	bne.n	8002f82 <HAL_GPIO_Init+0x22a>
 8002f7e:	2306      	movs	r3, #6
 8002f80:	e00c      	b.n	8002f9c <HAL_GPIO_Init+0x244>
 8002f82:	2307      	movs	r3, #7
 8002f84:	e00a      	b.n	8002f9c <HAL_GPIO_Init+0x244>
 8002f86:	2305      	movs	r3, #5
 8002f88:	e008      	b.n	8002f9c <HAL_GPIO_Init+0x244>
 8002f8a:	2304      	movs	r3, #4
 8002f8c:	e006      	b.n	8002f9c <HAL_GPIO_Init+0x244>
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e004      	b.n	8002f9c <HAL_GPIO_Init+0x244>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e002      	b.n	8002f9c <HAL_GPIO_Init+0x244>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_GPIO_Init+0x244>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	f002 0203 	and.w	r2, r2, #3
 8002fa2:	0092      	lsls	r2, r2, #2
 8002fa4:	4093      	lsls	r3, r2
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fac:	4936      	ldr	r1, [pc, #216]	; (8003088 <HAL_GPIO_Init+0x330>)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	089b      	lsrs	r3, r3, #2
 8002fb2:	3302      	adds	r3, #2
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002fba:	4b3a      	ldr	r3, [pc, #232]	; (80030a4 <HAL_GPIO_Init+0x34c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fde:	4a31      	ldr	r2, [pc, #196]	; (80030a4 <HAL_GPIO_Init+0x34c>)
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002fe4:	4b2f      	ldr	r3, [pc, #188]	; (80030a4 <HAL_GPIO_Init+0x34c>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003008:	4a26      	ldr	r2, [pc, #152]	; (80030a4 <HAL_GPIO_Init+0x34c>)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800300e:	4b25      	ldr	r3, [pc, #148]	; (80030a4 <HAL_GPIO_Init+0x34c>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	43db      	mvns	r3, r3
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4013      	ands	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003032:	4a1c      	ldr	r2, [pc, #112]	; (80030a4 <HAL_GPIO_Init+0x34c>)
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003038:	4b1a      	ldr	r3, [pc, #104]	; (80030a4 <HAL_GPIO_Init+0x34c>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	43db      	mvns	r3, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800305c:	4a11      	ldr	r2, [pc, #68]	; (80030a4 <HAL_GPIO_Init+0x34c>)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	3301      	adds	r3, #1
 8003066:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	fa22 f303 	lsr.w	r3, r2, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	f47f ae78 	bne.w	8002d68 <HAL_GPIO_Init+0x10>
  }
}
 8003078:	bf00      	nop
 800307a:	371c      	adds	r7, #28
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	40021000 	.word	0x40021000
 8003088:	40010000 	.word	0x40010000
 800308c:	48000400 	.word	0x48000400
 8003090:	48000800 	.word	0x48000800
 8003094:	48000c00 	.word	0x48000c00
 8003098:	48001000 	.word	0x48001000
 800309c:	48001400 	.word	0x48001400
 80030a0:	48001800 	.word	0x48001800
 80030a4:	40010400 	.word	0x40010400

080030a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030ac:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40007000 	.word	0x40007000

080030c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030d2:	d130      	bne.n	8003136 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030d4:	4b23      	ldr	r3, [pc, #140]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e0:	d038      	beq.n	8003154 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030e2:	4b20      	ldr	r3, [pc, #128]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030ea:	4a1e      	ldr	r2, [pc, #120]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2232      	movs	r2, #50	; 0x32
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
 80030fc:	4a1b      	ldr	r2, [pc, #108]	; (800316c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	0c9b      	lsrs	r3, r3, #18
 8003104:	3301      	adds	r3, #1
 8003106:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003108:	e002      	b.n	8003110 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3b01      	subs	r3, #1
 800310e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003110:	4b14      	ldr	r3, [pc, #80]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800311c:	d102      	bne.n	8003124 <HAL_PWREx_ControlVoltageScaling+0x60>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f2      	bne.n	800310a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003124:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003130:	d110      	bne.n	8003154 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e00f      	b.n	8003156 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003136:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800313e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003142:	d007      	beq.n	8003154 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003144:	4b07      	ldr	r3, [pc, #28]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800314c:	4a05      	ldr	r2, [pc, #20]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800314e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003152:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40007000 	.word	0x40007000
 8003168:	20000000 	.word	0x20000000
 800316c:	431bde83 	.word	0x431bde83

08003170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e3d4      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003182:	4ba1      	ldr	r3, [pc, #644]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800318c:	4b9e      	ldr	r3, [pc, #632]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 80e4 	beq.w	800336c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d007      	beq.n	80031ba <HAL_RCC_OscConfig+0x4a>
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b0c      	cmp	r3, #12
 80031ae:	f040 808b 	bne.w	80032c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	f040 8087 	bne.w	80032c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031ba:	4b93      	ldr	r3, [pc, #588]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_RCC_OscConfig+0x62>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e3ac      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1a      	ldr	r2, [r3, #32]
 80031d6:	4b8c      	ldr	r3, [pc, #560]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d004      	beq.n	80031ec <HAL_RCC_OscConfig+0x7c>
 80031e2:	4b89      	ldr	r3, [pc, #548]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ea:	e005      	b.n	80031f8 <HAL_RCC_OscConfig+0x88>
 80031ec:	4b86      	ldr	r3, [pc, #536]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80031ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d223      	bcs.n	8003244 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fd71 	bl	8003ce8 <RCC_SetFlashLatencyFromMSIRange>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e38d      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003210:	4b7d      	ldr	r3, [pc, #500]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a7c      	ldr	r2, [pc, #496]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003216:	f043 0308 	orr.w	r3, r3, #8
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	4b7a      	ldr	r3, [pc, #488]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	4977      	ldr	r1, [pc, #476]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800322a:	4313      	orrs	r3, r2
 800322c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800322e:	4b76      	ldr	r3, [pc, #472]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	4972      	ldr	r1, [pc, #456]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800323e:	4313      	orrs	r3, r2
 8003240:	604b      	str	r3, [r1, #4]
 8003242:	e025      	b.n	8003290 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003244:	4b70      	ldr	r3, [pc, #448]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a6f      	ldr	r2, [pc, #444]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800324a:	f043 0308 	orr.w	r3, r3, #8
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	4b6d      	ldr	r3, [pc, #436]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	496a      	ldr	r1, [pc, #424]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003262:	4b69      	ldr	r3, [pc, #420]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	4965      	ldr	r1, [pc, #404]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003272:	4313      	orrs	r3, r2
 8003274:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d109      	bne.n	8003290 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fd31 	bl	8003ce8 <RCC_SetFlashLatencyFromMSIRange>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e34d      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003290:	f000 fc36 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8003294:	4601      	mov	r1, r0
 8003296:	4b5c      	ldr	r3, [pc, #368]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	091b      	lsrs	r3, r3, #4
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	4a5a      	ldr	r2, [pc, #360]	; (800340c <HAL_RCC_OscConfig+0x29c>)
 80032a2:	5cd3      	ldrb	r3, [r2, r3]
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	fa21 f303 	lsr.w	r3, r1, r3
 80032ac:	4a58      	ldr	r2, [pc, #352]	; (8003410 <HAL_RCC_OscConfig+0x2a0>)
 80032ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032b0:	4b58      	ldr	r3, [pc, #352]	; (8003414 <HAL_RCC_OscConfig+0x2a4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fe ff29 	bl	800210c <HAL_InitTick>
 80032ba:	4603      	mov	r3, r0
 80032bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d052      	beq.n	800336a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	e331      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d032      	beq.n	8003336 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032d0:	4b4d      	ldr	r3, [pc, #308]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a4c      	ldr	r2, [pc, #304]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032dc:	f7ff fa16 	bl	800270c <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032e4:	f7ff fa12 	bl	800270c <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e31a      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032f6:	4b44      	ldr	r3, [pc, #272]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003302:	4b41      	ldr	r3, [pc, #260]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a40      	ldr	r2, [pc, #256]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003308:	f043 0308 	orr.w	r3, r3, #8
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b3e      	ldr	r3, [pc, #248]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	493b      	ldr	r1, [pc, #236]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800331c:	4313      	orrs	r3, r2
 800331e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003320:	4b39      	ldr	r3, [pc, #228]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	4936      	ldr	r1, [pc, #216]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
 8003334:	e01a      	b.n	800336c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003336:	4b34      	ldr	r3, [pc, #208]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a33      	ldr	r2, [pc, #204]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800333c:	f023 0301 	bic.w	r3, r3, #1
 8003340:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003342:	f7ff f9e3 	bl	800270c <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800334a:	f7ff f9df 	bl	800270c <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e2e7      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800335c:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f0      	bne.n	800334a <HAL_RCC_OscConfig+0x1da>
 8003368:	e000      	b.n	800336c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800336a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d074      	beq.n	8003462 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b08      	cmp	r3, #8
 800337c:	d005      	beq.n	800338a <HAL_RCC_OscConfig+0x21a>
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	2b0c      	cmp	r3, #12
 8003382:	d10e      	bne.n	80033a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2b03      	cmp	r3, #3
 8003388:	d10b      	bne.n	80033a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338a:	4b1f      	ldr	r3, [pc, #124]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d064      	beq.n	8003460 <HAL_RCC_OscConfig+0x2f0>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d160      	bne.n	8003460 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e2c4      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033aa:	d106      	bne.n	80033ba <HAL_RCC_OscConfig+0x24a>
 80033ac:	4b16      	ldr	r3, [pc, #88]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a15      	ldr	r2, [pc, #84]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	e01d      	b.n	80033f6 <HAL_RCC_OscConfig+0x286>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c2:	d10c      	bne.n	80033de <HAL_RCC_OscConfig+0x26e>
 80033c4:	4b10      	ldr	r3, [pc, #64]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a0f      	ldr	r2, [pc, #60]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a0c      	ldr	r2, [pc, #48]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	e00b      	b.n	80033f6 <HAL_RCC_OscConfig+0x286>
 80033de:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a09      	ldr	r2, [pc, #36]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	4b07      	ldr	r3, [pc, #28]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a06      	ldr	r2, [pc, #24]	; (8003408 <HAL_RCC_OscConfig+0x298>)
 80033f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d01c      	beq.n	8003438 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fe:	f7ff f985 	bl	800270c <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003404:	e011      	b.n	800342a <HAL_RCC_OscConfig+0x2ba>
 8003406:	bf00      	nop
 8003408:	40021000 	.word	0x40021000
 800340c:	08009b24 	.word	0x08009b24
 8003410:	20000000 	.word	0x20000000
 8003414:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003418:	f7ff f978 	bl	800270c <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b64      	cmp	r3, #100	; 0x64
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e280      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800342a:	4baf      	ldr	r3, [pc, #700]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0x2a8>
 8003436:	e014      	b.n	8003462 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7ff f968 	bl	800270c <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003440:	f7ff f964 	bl	800270c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	; 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e26c      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003452:	4ba5      	ldr	r3, [pc, #660]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x2d0>
 800345e:	e000      	b.n	8003462 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d060      	beq.n	8003530 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2b04      	cmp	r3, #4
 8003472:	d005      	beq.n	8003480 <HAL_RCC_OscConfig+0x310>
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2b0c      	cmp	r3, #12
 8003478:	d119      	bne.n	80034ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d116      	bne.n	80034ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003480:	4b99      	ldr	r3, [pc, #612]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_RCC_OscConfig+0x328>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e249      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003498:	4b93      	ldr	r3, [pc, #588]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	061b      	lsls	r3, r3, #24
 80034a6:	4990      	ldr	r1, [pc, #576]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034ac:	e040      	b.n	8003530 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d023      	beq.n	80034fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b6:	4b8c      	ldr	r3, [pc, #560]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a8b      	ldr	r2, [pc, #556]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80034bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c2:	f7ff f923 	bl	800270c <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ca:	f7ff f91f 	bl	800270c <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e227      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034dc:	4b82      	ldr	r3, [pc, #520]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	4b7f      	ldr	r3, [pc, #508]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	061b      	lsls	r3, r3, #24
 80034f6:	497c      	ldr	r1, [pc, #496]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	604b      	str	r3, [r1, #4]
 80034fc:	e018      	b.n	8003530 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fe:	4b7a      	ldr	r3, [pc, #488]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a79      	ldr	r2, [pc, #484]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350a:	f7ff f8ff 	bl	800270c <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003512:	f7ff f8fb 	bl	800270c <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e203      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003524:	4b70      	ldr	r3, [pc, #448]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1f0      	bne.n	8003512 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d03c      	beq.n	80035b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d01c      	beq.n	800357e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003544:	4b68      	ldr	r3, [pc, #416]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800354a:	4a67      	ldr	r2, [pc, #412]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003554:	f7ff f8da 	bl	800270c <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800355c:	f7ff f8d6 	bl	800270c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e1de      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800356e:	4b5e      	ldr	r3, [pc, #376]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0ef      	beq.n	800355c <HAL_RCC_OscConfig+0x3ec>
 800357c:	e01b      	b.n	80035b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800357e:	4b5a      	ldr	r3, [pc, #360]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003584:	4a58      	ldr	r2, [pc, #352]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003586:	f023 0301 	bic.w	r3, r3, #1
 800358a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358e:	f7ff f8bd 	bl	800270c <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003596:	f7ff f8b9 	bl	800270c <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e1c1      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035a8:	4b4f      	ldr	r3, [pc, #316]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80035aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1ef      	bne.n	8003596 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80a6 	beq.w	8003710 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c4:	2300      	movs	r3, #0
 80035c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035c8:	4b47      	ldr	r3, [pc, #284]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80035ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10d      	bne.n	80035f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d4:	4b44      	ldr	r3, [pc, #272]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80035d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d8:	4a43      	ldr	r2, [pc, #268]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80035da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035de:	6593      	str	r3, [r2, #88]	; 0x58
 80035e0:	4b41      	ldr	r3, [pc, #260]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80035e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ec:	2301      	movs	r3, #1
 80035ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f0:	4b3e      	ldr	r3, [pc, #248]	; (80036ec <HAL_RCC_OscConfig+0x57c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d118      	bne.n	800362e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035fc:	4b3b      	ldr	r3, [pc, #236]	; (80036ec <HAL_RCC_OscConfig+0x57c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a3a      	ldr	r2, [pc, #232]	; (80036ec <HAL_RCC_OscConfig+0x57c>)
 8003602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003606:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003608:	f7ff f880 	bl	800270c <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003610:	f7ff f87c 	bl	800270c <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e184      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003622:	4b32      	ldr	r3, [pc, #200]	; (80036ec <HAL_RCC_OscConfig+0x57c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d108      	bne.n	8003648 <HAL_RCC_OscConfig+0x4d8>
 8003636:	4b2c      	ldr	r3, [pc, #176]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363c:	4a2a      	ldr	r2, [pc, #168]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003646:	e024      	b.n	8003692 <HAL_RCC_OscConfig+0x522>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b05      	cmp	r3, #5
 800364e:	d110      	bne.n	8003672 <HAL_RCC_OscConfig+0x502>
 8003650:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	4a24      	ldr	r2, [pc, #144]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003658:	f043 0304 	orr.w	r3, r3, #4
 800365c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003660:	4b21      	ldr	r3, [pc, #132]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003666:	4a20      	ldr	r2, [pc, #128]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003670:	e00f      	b.n	8003692 <HAL_RCC_OscConfig+0x522>
 8003672:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003678:	4a1b      	ldr	r2, [pc, #108]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003682:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	4a17      	ldr	r2, [pc, #92]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 800368a:	f023 0304 	bic.w	r3, r3, #4
 800368e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d016      	beq.n	80036c8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369a:	f7ff f837 	bl	800270c <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a0:	e00a      	b.n	80036b8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a2:	f7ff f833 	bl	800270c <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e139      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_RCC_OscConfig+0x578>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0ed      	beq.n	80036a2 <HAL_RCC_OscConfig+0x532>
 80036c6:	e01a      	b.n	80036fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c8:	f7ff f820 	bl	800270c <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ce:	e00f      	b.n	80036f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d0:	f7ff f81c 	bl	800270c <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	; 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d906      	bls.n	80036f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e122      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036f0:	4b90      	ldr	r3, [pc, #576]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1e8      	bne.n	80036d0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036fe:	7ffb      	ldrb	r3, [r7, #31]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d105      	bne.n	8003710 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003704:	4b8b      	ldr	r3, [pc, #556]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 8003706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003708:	4a8a      	ldr	r2, [pc, #552]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 800370a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 8108 	beq.w	800392a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371e:	2b02      	cmp	r3, #2
 8003720:	f040 80d0 	bne.w	80038c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003724:	4b83      	ldr	r3, [pc, #524]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f003 0203 	and.w	r2, r3, #3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	429a      	cmp	r2, r3
 8003736:	d130      	bne.n	800379a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	3b01      	subs	r3, #1
 8003744:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d127      	bne.n	800379a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003754:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003756:	429a      	cmp	r2, r3
 8003758:	d11f      	bne.n	800379a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003764:	2a07      	cmp	r2, #7
 8003766:	bf14      	ite	ne
 8003768:	2201      	movne	r2, #1
 800376a:	2200      	moveq	r2, #0
 800376c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800376e:	4293      	cmp	r3, r2
 8003770:	d113      	bne.n	800379a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377c:	085b      	lsrs	r3, r3, #1
 800377e:	3b01      	subs	r3, #1
 8003780:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003782:	429a      	cmp	r2, r3
 8003784:	d109      	bne.n	800379a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	085b      	lsrs	r3, r3, #1
 8003792:	3b01      	subs	r3, #1
 8003794:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d06e      	beq.n	8003878 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b0c      	cmp	r3, #12
 800379e:	d069      	beq.n	8003874 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037a0:	4b64      	ldr	r3, [pc, #400]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d105      	bne.n	80037b8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037ac:	4b61      	ldr	r3, [pc, #388]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0b7      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037bc:	4b5d      	ldr	r3, [pc, #372]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a5c      	ldr	r2, [pc, #368]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80037c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037c8:	f7fe ffa0 	bl	800270c <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fe ff9c 	bl	800270c <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e0a4      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e2:	4b54      	ldr	r3, [pc, #336]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ee:	4b51      	ldr	r3, [pc, #324]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	4b51      	ldr	r3, [pc, #324]	; (8003938 <HAL_RCC_OscConfig+0x7c8>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037fe:	3a01      	subs	r2, #1
 8003800:	0112      	lsls	r2, r2, #4
 8003802:	4311      	orrs	r1, r2
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003808:	0212      	lsls	r2, r2, #8
 800380a:	4311      	orrs	r1, r2
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003810:	0852      	lsrs	r2, r2, #1
 8003812:	3a01      	subs	r2, #1
 8003814:	0552      	lsls	r2, r2, #21
 8003816:	4311      	orrs	r1, r2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800381c:	0852      	lsrs	r2, r2, #1
 800381e:	3a01      	subs	r2, #1
 8003820:	0652      	lsls	r2, r2, #25
 8003822:	4311      	orrs	r1, r2
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003828:	0912      	lsrs	r2, r2, #4
 800382a:	0452      	lsls	r2, r2, #17
 800382c:	430a      	orrs	r2, r1
 800382e:	4941      	ldr	r1, [pc, #260]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 8003830:	4313      	orrs	r3, r2
 8003832:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003834:	4b3f      	ldr	r3, [pc, #252]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a3e      	ldr	r2, [pc, #248]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 800383a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800383e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003840:	4b3c      	ldr	r3, [pc, #240]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	4a3b      	ldr	r2, [pc, #236]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 8003846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800384a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800384c:	f7fe ff5e 	bl	800270c <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003854:	f7fe ff5a 	bl	800270c <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e062      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003866:	4b33      	ldr	r3, [pc, #204]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003872:	e05a      	b.n	800392a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e059      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003878:	4b2e      	ldr	r3, [pc, #184]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d152      	bne.n	800392a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003884:	4b2b      	ldr	r3, [pc, #172]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a2a      	ldr	r2, [pc, #168]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 800388a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800388e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003890:	4b28      	ldr	r3, [pc, #160]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4a27      	ldr	r2, [pc, #156]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 8003896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800389c:	f7fe ff36 	bl	800270c <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a4:	f7fe ff32 	bl	800270c <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e03a      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038b6:	4b1f      	ldr	r3, [pc, #124]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0x734>
 80038c2:	e032      	b.n	800392a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2b0c      	cmp	r3, #12
 80038c8:	d02d      	beq.n	8003926 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ca:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a19      	ldr	r2, [pc, #100]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80038d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038d4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80038d6:	4b17      	ldr	r3, [pc, #92]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d105      	bne.n	80038ee <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80038e2:	4b14      	ldr	r3, [pc, #80]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	4a13      	ldr	r2, [pc, #76]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80038e8:	f023 0303 	bic.w	r3, r3, #3
 80038ec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80038ee:	4b11      	ldr	r3, [pc, #68]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	4a10      	ldr	r2, [pc, #64]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 80038f4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7fe ff05 	bl	800270c <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003906:	f7fe ff01 	bl	800270c <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e009      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_RCC_OscConfig+0x7c4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1f0      	bne.n	8003906 <HAL_RCC_OscConfig+0x796>
 8003924:	e001      	b.n	800392a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3720      	adds	r7, #32
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40021000 	.word	0x40021000
 8003938:	f99d808c 	.word	0xf99d808c

0800393c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0c8      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003950:	4b66      	ldr	r3, [pc, #408]	; (8003aec <HAL_RCC_ClockConfig+0x1b0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d910      	bls.n	8003980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	4b63      	ldr	r3, [pc, #396]	; (8003aec <HAL_RCC_ClockConfig+0x1b0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 0207 	bic.w	r2, r3, #7
 8003966:	4961      	ldr	r1, [pc, #388]	; (8003aec <HAL_RCC_ClockConfig+0x1b0>)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b5f      	ldr	r3, [pc, #380]	; (8003aec <HAL_RCC_ClockConfig+0x1b0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0b0      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d04c      	beq.n	8003a26 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b03      	cmp	r3, #3
 8003992:	d107      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003994:	4b56      	ldr	r3, [pc, #344]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d121      	bne.n	80039e4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e09e      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d107      	bne.n	80039bc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ac:	4b50      	ldr	r3, [pc, #320]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d115      	bne.n	80039e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e092      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d107      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039c4:	4b4a      	ldr	r3, [pc, #296]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d109      	bne.n	80039e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e086      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039d4:	4b46      	ldr	r3, [pc, #280]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e07e      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039e4:	4b42      	ldr	r3, [pc, #264]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f023 0203 	bic.w	r2, r3, #3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	493f      	ldr	r1, [pc, #252]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f6:	f7fe fe89 	bl	800270c <HAL_GetTick>
 80039fa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fc:	e00a      	b.n	8003a14 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039fe:	f7fe fe85 	bl	800270c <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e066      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a14:	4b36      	ldr	r3, [pc, #216]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 020c 	and.w	r2, r3, #12
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d1eb      	bne.n	80039fe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d008      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a32:	4b2f      	ldr	r3, [pc, #188]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	492c      	ldr	r1, [pc, #176]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a44:	4b29      	ldr	r3, [pc, #164]	; (8003aec <HAL_RCC_ClockConfig+0x1b0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d210      	bcs.n	8003a74 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a52:	4b26      	ldr	r3, [pc, #152]	; (8003aec <HAL_RCC_ClockConfig+0x1b0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 0207 	bic.w	r2, r3, #7
 8003a5a:	4924      	ldr	r1, [pc, #144]	; (8003aec <HAL_RCC_ClockConfig+0x1b0>)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a62:	4b22      	ldr	r3, [pc, #136]	; (8003aec <HAL_RCC_ClockConfig+0x1b0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e036      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a80:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	4918      	ldr	r1, [pc, #96]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a9e:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4910      	ldr	r1, [pc, #64]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ab2:	f000 f825 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8003ab6:	4601      	mov	r1, r0
 8003ab8:	4b0d      	ldr	r3, [pc, #52]	; (8003af0 <HAL_RCC_ClockConfig+0x1b4>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	4a0c      	ldr	r2, [pc, #48]	; (8003af4 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac4:	5cd3      	ldrb	r3, [r2, r3]
 8003ac6:	f003 031f 	and.w	r3, r3, #31
 8003aca:	fa21 f303 	lsr.w	r3, r1, r3
 8003ace:	4a0a      	ldr	r2, [pc, #40]	; (8003af8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe fb18 	bl	800210c <HAL_InitTick>
 8003adc:	4603      	mov	r3, r0
 8003ade:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ae0:	7afb      	ldrb	r3, [r7, #11]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40022000 	.word	0x40022000
 8003af0:	40021000 	.word	0x40021000
 8003af4:	08009b24 	.word	0x08009b24
 8003af8:	20000000 	.word	0x20000000
 8003afc:	20000004 	.word	0x20000004

08003b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b089      	sub	sp, #36	; 0x24
 8003b04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b0e:	4b3d      	ldr	r3, [pc, #244]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b18:	4b3a      	ldr	r3, [pc, #232]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_GetSysClockFreq+0x34>
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	2b0c      	cmp	r3, #12
 8003b2c:	d121      	bne.n	8003b72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d11e      	bne.n	8003b72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b34:	4b33      	ldr	r3, [pc, #204]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d107      	bne.n	8003b50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b40:	4b30      	ldr	r3, [pc, #192]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	61fb      	str	r3, [r7, #28]
 8003b4e:	e005      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b50:	4b2c      	ldr	r3, [pc, #176]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	091b      	lsrs	r3, r3, #4
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b5c:	4a2a      	ldr	r2, [pc, #168]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10d      	bne.n	8003b88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b70:	e00a      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d102      	bne.n	8003b7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b78:	4b24      	ldr	r3, [pc, #144]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	e004      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d101      	bne.n	8003b88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b84:	4b22      	ldr	r3, [pc, #136]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	2b0c      	cmp	r3, #12
 8003b8c:	d133      	bne.n	8003bf6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d002      	beq.n	8003ba4 <HAL_RCC_GetSysClockFreq+0xa4>
 8003b9e:	2b03      	cmp	r3, #3
 8003ba0:	d003      	beq.n	8003baa <HAL_RCC_GetSysClockFreq+0xaa>
 8003ba2:	e005      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ba4:	4b19      	ldr	r3, [pc, #100]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ba6:	617b      	str	r3, [r7, #20]
      break;
 8003ba8:	e005      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003baa:	4b19      	ldr	r3, [pc, #100]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bac:	617b      	str	r3, [r7, #20]
      break;
 8003bae:	e002      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	617b      	str	r3, [r7, #20]
      break;
 8003bb4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bb6:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	091b      	lsrs	r3, r3, #4
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	0a1b      	lsrs	r3, r3, #8
 8003bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	fb02 f203 	mul.w	r2, r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bda:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bdc:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	0e5b      	lsrs	r3, r3, #25
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	3301      	adds	r3, #1
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bf6:	69bb      	ldr	r3, [r7, #24]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3724      	adds	r7, #36	; 0x24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	40021000 	.word	0x40021000
 8003c08:	08009b3c 	.word	0x08009b3c
 8003c0c:	00f42400 	.word	0x00f42400
 8003c10:	007a1200 	.word	0x007a1200

08003c14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c18:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	20000000 	.word	0x20000000

08003c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c30:	f7ff fff0 	bl	8003c14 <HAL_RCC_GetHCLKFreq>
 8003c34:	4601      	mov	r1, r0
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	0a1b      	lsrs	r3, r3, #8
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c42:	5cd3      	ldrb	r3, [r2, r3]
 8003c44:	f003 031f 	and.w	r3, r3, #31
 8003c48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40021000 	.word	0x40021000
 8003c54:	08009b34 	.word	0x08009b34

08003c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c5c:	f7ff ffda 	bl	8003c14 <HAL_RCC_GetHCLKFreq>
 8003c60:	4601      	mov	r1, r0
 8003c62:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	0adb      	lsrs	r3, r3, #11
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c6e:	5cd3      	ldrb	r3, [r2, r3]
 8003c70:	f003 031f 	and.w	r3, r3, #31
 8003c74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	08009b34 	.word	0x08009b34

08003c84 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	220f      	movs	r2, #15
 8003c92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003c94:	4b12      	ldr	r3, [pc, #72]	; (8003ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 0203 	and.w	r2, r3, #3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003cb8:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	08db      	lsrs	r3, r3, #3
 8003cbe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003cc6:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <HAL_RCC_GetClockConfig+0x60>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0207 	and.w	r2, r3, #7
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	601a      	str	r2, [r3, #0]
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	40022000 	.word	0x40022000

08003ce8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cf4:	4b2a      	ldr	r3, [pc, #168]	; (8003da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d00:	f7ff f9d2 	bl	80030a8 <HAL_PWREx_GetVoltageRange>
 8003d04:	6178      	str	r0, [r7, #20]
 8003d06:	e014      	b.n	8003d32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d08:	4b25      	ldr	r3, [pc, #148]	; (8003da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	4a24      	ldr	r2, [pc, #144]	; (8003da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d12:	6593      	str	r3, [r2, #88]	; 0x58
 8003d14:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d20:	f7ff f9c2 	bl	80030a8 <HAL_PWREx_GetVoltageRange>
 8003d24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d26:	4b1e      	ldr	r3, [pc, #120]	; (8003da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2a:	4a1d      	ldr	r2, [pc, #116]	; (8003da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d38:	d10b      	bne.n	8003d52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b80      	cmp	r3, #128	; 0x80
 8003d3e:	d919      	bls.n	8003d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2ba0      	cmp	r3, #160	; 0xa0
 8003d44:	d902      	bls.n	8003d4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d46:	2302      	movs	r3, #2
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	e013      	b.n	8003d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	e010      	b.n	8003d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b80      	cmp	r3, #128	; 0x80
 8003d56:	d902      	bls.n	8003d5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d58:	2303      	movs	r3, #3
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	e00a      	b.n	8003d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b80      	cmp	r3, #128	; 0x80
 8003d62:	d102      	bne.n	8003d6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d64:	2302      	movs	r3, #2
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	e004      	b.n	8003d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b70      	cmp	r3, #112	; 0x70
 8003d6e:	d101      	bne.n	8003d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d70:	2301      	movs	r3, #1
 8003d72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d74:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f023 0207 	bic.w	r2, r3, #7
 8003d7c:	4909      	ldr	r1, [pc, #36]	; (8003da4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d84:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d001      	beq.n	8003d96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40021000 	.word	0x40021000
 8003da4:	40022000 	.word	0x40022000

08003da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003db0:	2300      	movs	r3, #0
 8003db2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003db4:	2300      	movs	r3, #0
 8003db6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d03f      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dcc:	d01c      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dd2:	d802      	bhi.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00e      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003dd8:	e01f      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003dda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dde:	d003      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003de0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003de4:	d01c      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003de6:	e018      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003de8:	4b85      	ldr	r3, [pc, #532]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	4a84      	ldr	r2, [pc, #528]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003df4:	e015      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fab9 	bl	8004374 <RCCEx_PLLSAI1_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e06:	e00c      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3320      	adds	r3, #32
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fba0 	bl	8004554 <RCCEx_PLLSAI2_Config>
 8003e14:	4603      	mov	r3, r0
 8003e16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e18:	e003      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	74fb      	strb	r3, [r7, #19]
      break;
 8003e1e:	e000      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003e20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e22:	7cfb      	ldrb	r3, [r7, #19]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10b      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e28:	4b75      	ldr	r3, [pc, #468]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e36:	4972      	ldr	r1, [pc, #456]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e3e:	e001      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d03f      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e58:	d01c      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003e5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e5e:	d802      	bhi.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00e      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003e64:	e01f      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e6a:	d003      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003e6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e70:	d01c      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003e72:	e018      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e74:	4b62      	ldr	r3, [pc, #392]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	4a61      	ldr	r2, [pc, #388]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e80:	e015      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3304      	adds	r3, #4
 8003e86:	2100      	movs	r1, #0
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fa73 	bl	8004374 <RCCEx_PLLSAI1_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e92:	e00c      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3320      	adds	r3, #32
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fb5a 	bl	8004554 <RCCEx_PLLSAI2_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ea4:	e003      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	74fb      	strb	r3, [r7, #19]
      break;
 8003eaa:	e000      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eae:	7cfb      	ldrb	r3, [r7, #19]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10b      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003eb4:	4b52      	ldr	r3, [pc, #328]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ec2:	494f      	ldr	r1, [pc, #316]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003eca:	e001      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ecc:	7cfb      	ldrb	r3, [r7, #19]
 8003ece:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80a0 	beq.w	800401e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ee2:	4b47      	ldr	r3, [pc, #284]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00d      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef8:	4b41      	ldr	r3, [pc, #260]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efc:	4a40      	ldr	r2, [pc, #256]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f02:	6593      	str	r3, [r2, #88]	; 0x58
 8003f04:	4b3e      	ldr	r3, [pc, #248]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f10:	2301      	movs	r3, #1
 8003f12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f14:	4b3b      	ldr	r3, [pc, #236]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a3a      	ldr	r2, [pc, #232]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f20:	f7fe fbf4 	bl	800270c <HAL_GetTick>
 8003f24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f26:	e009      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f28:	f7fe fbf0 	bl	800270c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d902      	bls.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	74fb      	strb	r3, [r7, #19]
        break;
 8003f3a:	e005      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f3c:	4b31      	ldr	r3, [pc, #196]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0ef      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003f48:	7cfb      	ldrb	r3, [r7, #19]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d15c      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f4e:	4b2c      	ldr	r3, [pc, #176]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01f      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d019      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f6c:	4b24      	ldr	r3, [pc, #144]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f78:	4b21      	ldr	r3, [pc, #132]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7e:	4a20      	ldr	r2, [pc, #128]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f88:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	4a1c      	ldr	r2, [pc, #112]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f98:	4a19      	ldr	r2, [pc, #100]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d016      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003faa:	f7fe fbaf 	bl	800270c <HAL_GetTick>
 8003fae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fb0:	e00b      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb2:	f7fe fbab 	bl	800270c <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d902      	bls.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	74fb      	strb	r3, [r7, #19]
            break;
 8003fc8:	e006      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fca:	4b0d      	ldr	r3, [pc, #52]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0ec      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003fd8:	7cfb      	ldrb	r3, [r7, #19]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fde:	4b08      	ldr	r3, [pc, #32]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fee:	4904      	ldr	r1, [pc, #16]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ff6:	e009      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ff8:	7cfb      	ldrb	r3, [r7, #19]
 8003ffa:	74bb      	strb	r3, [r7, #18]
 8003ffc:	e006      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003ffe:	bf00      	nop
 8004000:	40021000 	.word	0x40021000
 8004004:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004008:	7cfb      	ldrb	r3, [r7, #19]
 800400a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800400c:	7c7b      	ldrb	r3, [r7, #17]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d105      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004012:	4b9e      	ldr	r3, [pc, #632]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004016:	4a9d      	ldr	r2, [pc, #628]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800401c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800402a:	4b98      	ldr	r3, [pc, #608]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004030:	f023 0203 	bic.w	r2, r3, #3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	4994      	ldr	r1, [pc, #592]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800404c:	4b8f      	ldr	r3, [pc, #572]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004052:	f023 020c 	bic.w	r2, r3, #12
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405a:	498c      	ldr	r1, [pc, #560]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800406e:	4b87      	ldr	r3, [pc, #540]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004074:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	4983      	ldr	r1, [pc, #524]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00a      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004090:	4b7e      	ldr	r3, [pc, #504]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004096:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409e:	497b      	ldr	r1, [pc, #492]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0310 	and.w	r3, r3, #16
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040b2:	4b76      	ldr	r3, [pc, #472]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c0:	4972      	ldr	r1, [pc, #456]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040d4:	4b6d      	ldr	r3, [pc, #436]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e2:	496a      	ldr	r1, [pc, #424]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040f6:	4b65      	ldr	r3, [pc, #404]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004104:	4961      	ldr	r1, [pc, #388]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004118:	4b5c      	ldr	r3, [pc, #368]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004126:	4959      	ldr	r1, [pc, #356]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800413a:	4b54      	ldr	r3, [pc, #336]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004140:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004148:	4950      	ldr	r1, [pc, #320]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800415c:	4b4b      	ldr	r3, [pc, #300]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004162:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416a:	4948      	ldr	r1, [pc, #288]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800417e:	4b43      	ldr	r3, [pc, #268]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004184:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418c:	493f      	ldr	r1, [pc, #252]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d028      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041a0:	4b3a      	ldr	r3, [pc, #232]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ae:	4937      	ldr	r1, [pc, #220]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041be:	d106      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041c0:	4b32      	ldr	r3, [pc, #200]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4a31      	ldr	r2, [pc, #196]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041ca:	60d3      	str	r3, [r2, #12]
 80041cc:	e011      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041d6:	d10c      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3304      	adds	r3, #4
 80041dc:	2101      	movs	r1, #1
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f8c8 	bl	8004374 <RCCEx_PLLSAI1_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80041e8:	7cfb      	ldrb	r3, [r7, #19]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80041ee:	7cfb      	ldrb	r3, [r7, #19]
 80041f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d028      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041fe:	4b23      	ldr	r3, [pc, #140]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004204:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420c:	491f      	ldr	r1, [pc, #124]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800421c:	d106      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800421e:	4b1b      	ldr	r3, [pc, #108]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	4a1a      	ldr	r2, [pc, #104]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004228:	60d3      	str	r3, [r2, #12]
 800422a:	e011      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004230:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004234:	d10c      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3304      	adds	r3, #4
 800423a:	2101      	movs	r1, #1
 800423c:	4618      	mov	r0, r3
 800423e:	f000 f899 	bl	8004374 <RCCEx_PLLSAI1_Config>
 8004242:	4603      	mov	r3, r0
 8004244:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004246:	7cfb      	ldrb	r3, [r7, #19]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800424c:	7cfb      	ldrb	r3, [r7, #19]
 800424e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d02b      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004262:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800426a:	4908      	ldr	r1, [pc, #32]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800427a:	d109      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800427c:	4b03      	ldr	r3, [pc, #12]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4a02      	ldr	r2, [pc, #8]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004286:	60d3      	str	r3, [r2, #12]
 8004288:	e014      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800428a:	bf00      	nop
 800428c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004294:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004298:	d10c      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3304      	adds	r3, #4
 800429e:	2101      	movs	r1, #1
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 f867 	bl	8004374 <RCCEx_PLLSAI1_Config>
 80042a6:	4603      	mov	r3, r0
 80042a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042aa:	7cfb      	ldrb	r3, [r7, #19]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80042b0:	7cfb      	ldrb	r3, [r7, #19]
 80042b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d02f      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042c0:	4b2b      	ldr	r3, [pc, #172]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ce:	4928      	ldr	r1, [pc, #160]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042de:	d10d      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3304      	adds	r3, #4
 80042e4:	2102      	movs	r1, #2
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 f844 	bl	8004374 <RCCEx_PLLSAI1_Config>
 80042ec:	4603      	mov	r3, r0
 80042ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042f0:	7cfb      	ldrb	r3, [r7, #19]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d014      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80042f6:	7cfb      	ldrb	r3, [r7, #19]
 80042f8:	74bb      	strb	r3, [r7, #18]
 80042fa:	e011      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004304:	d10c      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3320      	adds	r3, #32
 800430a:	2102      	movs	r1, #2
 800430c:	4618      	mov	r0, r3
 800430e:	f000 f921 	bl	8004554 <RCCEx_PLLSAI2_Config>
 8004312:	4603      	mov	r3, r0
 8004314:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004316:	7cfb      	ldrb	r3, [r7, #19]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800431c:	7cfb      	ldrb	r3, [r7, #19]
 800431e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800432c:	4b10      	ldr	r3, [pc, #64]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800432e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004332:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800433a:	490d      	ldr	r1, [pc, #52]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00b      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800434e:	4b08      	ldr	r3, [pc, #32]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004354:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800435e:	4904      	ldr	r1, [pc, #16]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004366:	7cbb      	ldrb	r3, [r7, #18]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40021000 	.word	0x40021000

08004374 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004382:	4b73      	ldr	r3, [pc, #460]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d018      	beq.n	80043c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800438e:	4b70      	ldr	r3, [pc, #448]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f003 0203 	and.w	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d10d      	bne.n	80043ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
       ||
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80043a6:	4b6a      	ldr	r3, [pc, #424]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
       ||
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d044      	beq.n	8004444 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	73fb      	strb	r3, [r7, #15]
 80043be:	e041      	b.n	8004444 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d00c      	beq.n	80043e2 <RCCEx_PLLSAI1_Config+0x6e>
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d013      	beq.n	80043f4 <RCCEx_PLLSAI1_Config+0x80>
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d120      	bne.n	8004412 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043d0:	4b5f      	ldr	r3, [pc, #380]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d11d      	bne.n	8004418 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043e0:	e01a      	b.n	8004418 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043e2:	4b5b      	ldr	r3, [pc, #364]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d116      	bne.n	800441c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f2:	e013      	b.n	800441c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043f4:	4b56      	ldr	r3, [pc, #344]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10f      	bne.n	8004420 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004400:	4b53      	ldr	r3, [pc, #332]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d109      	bne.n	8004420 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004410:	e006      	b.n	8004420 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
      break;
 8004416:	e004      	b.n	8004422 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004418:	bf00      	nop
 800441a:	e002      	b.n	8004422 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800441c:	bf00      	nop
 800441e:	e000      	b.n	8004422 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004420:	bf00      	nop
    }

    if(status == HAL_OK)
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10d      	bne.n	8004444 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004428:	4b49      	ldr	r3, [pc, #292]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6819      	ldr	r1, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	3b01      	subs	r3, #1
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	430b      	orrs	r3, r1
 800443e:	4944      	ldr	r1, [pc, #272]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004440:	4313      	orrs	r3, r2
 8004442:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d17d      	bne.n	8004546 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800444a:	4b41      	ldr	r3, [pc, #260]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a40      	ldr	r2, [pc, #256]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004450:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004456:	f7fe f959 	bl	800270c <HAL_GetTick>
 800445a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800445c:	e009      	b.n	8004472 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800445e:	f7fe f955 	bl	800270c <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d902      	bls.n	8004472 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	73fb      	strb	r3, [r7, #15]
        break;
 8004470:	e005      	b.n	800447e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004472:	4b37      	ldr	r3, [pc, #220]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1ef      	bne.n	800445e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800447e:	7bfb      	ldrb	r3, [r7, #15]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d160      	bne.n	8004546 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d111      	bne.n	80044ae <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800448a:	4b31      	ldr	r3, [pc, #196]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6892      	ldr	r2, [r2, #8]
 800449a:	0211      	lsls	r1, r2, #8
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	68d2      	ldr	r2, [r2, #12]
 80044a0:	0912      	lsrs	r2, r2, #4
 80044a2:	0452      	lsls	r2, r2, #17
 80044a4:	430a      	orrs	r2, r1
 80044a6:	492a      	ldr	r1, [pc, #168]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	610b      	str	r3, [r1, #16]
 80044ac:	e027      	b.n	80044fe <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d112      	bne.n	80044da <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044b4:	4b26      	ldr	r3, [pc, #152]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80044bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6892      	ldr	r2, [r2, #8]
 80044c4:	0211      	lsls	r1, r2, #8
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6912      	ldr	r2, [r2, #16]
 80044ca:	0852      	lsrs	r2, r2, #1
 80044cc:	3a01      	subs	r2, #1
 80044ce:	0552      	lsls	r2, r2, #21
 80044d0:	430a      	orrs	r2, r1
 80044d2:	491f      	ldr	r1, [pc, #124]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	610b      	str	r3, [r1, #16]
 80044d8:	e011      	b.n	80044fe <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044da:	4b1d      	ldr	r3, [pc, #116]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6892      	ldr	r2, [r2, #8]
 80044ea:	0211      	lsls	r1, r2, #8
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6952      	ldr	r2, [r2, #20]
 80044f0:	0852      	lsrs	r2, r2, #1
 80044f2:	3a01      	subs	r2, #1
 80044f4:	0652      	lsls	r2, r2, #25
 80044f6:	430a      	orrs	r2, r1
 80044f8:	4915      	ldr	r1, [pc, #84]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044fe:	4b14      	ldr	r3, [pc, #80]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a13      	ldr	r2, [pc, #76]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004504:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004508:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450a:	f7fe f8ff 	bl	800270c <HAL_GetTick>
 800450e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004510:	e009      	b.n	8004526 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004512:	f7fe f8fb 	bl	800270c <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d902      	bls.n	8004526 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	73fb      	strb	r3, [r7, #15]
          break;
 8004524:	e005      	b.n	8004532 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0ef      	beq.n	8004512 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d106      	bne.n	8004546 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004538:	4b05      	ldr	r3, [pc, #20]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	4903      	ldr	r1, [pc, #12]	; (8004550 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004542:	4313      	orrs	r3, r2
 8004544:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004546:	7bfb      	ldrb	r3, [r7, #15]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40021000 	.word	0x40021000

08004554 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004562:	4b68      	ldr	r3, [pc, #416]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d018      	beq.n	80045a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800456e:	4b65      	ldr	r3, [pc, #404]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f003 0203 	and.w	r2, r3, #3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d10d      	bne.n	800459a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
       ||
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004586:	4b5f      	ldr	r3, [pc, #380]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
       ||
 8004596:	429a      	cmp	r2, r3
 8004598:	d044      	beq.n	8004624 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	73fb      	strb	r3, [r7, #15]
 800459e:	e041      	b.n	8004624 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d00c      	beq.n	80045c2 <RCCEx_PLLSAI2_Config+0x6e>
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d013      	beq.n	80045d4 <RCCEx_PLLSAI2_Config+0x80>
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d120      	bne.n	80045f2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045b0:	4b54      	ldr	r3, [pc, #336]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d11d      	bne.n	80045f8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c0:	e01a      	b.n	80045f8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045c2:	4b50      	ldr	r3, [pc, #320]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d116      	bne.n	80045fc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d2:	e013      	b.n	80045fc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045d4:	4b4b      	ldr	r3, [pc, #300]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10f      	bne.n	8004600 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045e0:	4b48      	ldr	r3, [pc, #288]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d109      	bne.n	8004600 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045f0:	e006      	b.n	8004600 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	73fb      	strb	r3, [r7, #15]
      break;
 80045f6:	e004      	b.n	8004602 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80045f8:	bf00      	nop
 80045fa:	e002      	b.n	8004602 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80045fc:	bf00      	nop
 80045fe:	e000      	b.n	8004602 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004600:	bf00      	nop
    }

    if(status == HAL_OK)
 8004602:	7bfb      	ldrb	r3, [r7, #15]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10d      	bne.n	8004624 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004608:	4b3e      	ldr	r3, [pc, #248]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b0>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6819      	ldr	r1, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	3b01      	subs	r3, #1
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	430b      	orrs	r3, r1
 800461e:	4939      	ldr	r1, [pc, #228]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004620:	4313      	orrs	r3, r2
 8004622:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d167      	bne.n	80046fa <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800462a:	4b36      	ldr	r3, [pc, #216]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a35      	ldr	r2, [pc, #212]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004636:	f7fe f869 	bl	800270c <HAL_GetTick>
 800463a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800463c:	e009      	b.n	8004652 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800463e:	f7fe f865 	bl	800270c <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d902      	bls.n	8004652 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	73fb      	strb	r3, [r7, #15]
        break;
 8004650:	e005      	b.n	800465e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004652:	4b2c      	ldr	r3, [pc, #176]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1ef      	bne.n	800463e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d14a      	bne.n	80046fa <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d111      	bne.n	800468e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800466a:	4b26      	ldr	r3, [pc, #152]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b0>)
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6892      	ldr	r2, [r2, #8]
 800467a:	0211      	lsls	r1, r2, #8
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	68d2      	ldr	r2, [r2, #12]
 8004680:	0912      	lsrs	r2, r2, #4
 8004682:	0452      	lsls	r2, r2, #17
 8004684:	430a      	orrs	r2, r1
 8004686:	491f      	ldr	r1, [pc, #124]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004688:	4313      	orrs	r3, r2
 800468a:	614b      	str	r3, [r1, #20]
 800468c:	e011      	b.n	80046b2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800468e:	4b1d      	ldr	r3, [pc, #116]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004696:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6892      	ldr	r2, [r2, #8]
 800469e:	0211      	lsls	r1, r2, #8
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6912      	ldr	r2, [r2, #16]
 80046a4:	0852      	lsrs	r2, r2, #1
 80046a6:	3a01      	subs	r2, #1
 80046a8:	0652      	lsls	r2, r2, #25
 80046aa:	430a      	orrs	r2, r1
 80046ac:	4915      	ldr	r1, [pc, #84]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80046b2:	4b14      	ldr	r3, [pc, #80]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a13      	ldr	r2, [pc, #76]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046bc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046be:	f7fe f825 	bl	800270c <HAL_GetTick>
 80046c2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046c4:	e009      	b.n	80046da <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046c6:	f7fe f821 	bl	800270c <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d902      	bls.n	80046da <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	73fb      	strb	r3, [r7, #15]
          break;
 80046d8:	e005      	b.n	80046e6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046da:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0ef      	beq.n	80046c6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d106      	bne.n	80046fa <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80046ec:	4b05      	ldr	r3, [pc, #20]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046ee:	695a      	ldr	r2, [r3, #20]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	4903      	ldr	r1, [pc, #12]	; (8004704 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40021000 	.word	0x40021000

08004708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e01d      	b.n	8004756 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f815 	bl	800475e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3304      	adds	r3, #4
 8004744:	4619      	mov	r1, r3
 8004746:	4610      	mov	r0, r2
 8004748:	f000 f986 	bl	8004a58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
	...

08004774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <HAL_TIM_Base_Start_IT+0x50>)
 8004794:	4013      	ands	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b06      	cmp	r3, #6
 800479c:	d00b      	beq.n	80047b6 <HAL_TIM_Base_Start_IT+0x42>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a4:	d007      	beq.n	80047b6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0201 	orr.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	00010007 	.word	0x00010007

080047c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d122      	bne.n	8004824 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d11b      	bne.n	8004824 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f06f 0202 	mvn.w	r2, #2
 80047f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f905 	bl	8004a1a <HAL_TIM_IC_CaptureCallback>
 8004810:	e005      	b.n	800481e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f8f7 	bl	8004a06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f908 	bl	8004a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	2b04      	cmp	r3, #4
 8004830:	d122      	bne.n	8004878 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b04      	cmp	r3, #4
 800483e:	d11b      	bne.n	8004878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f06f 0204 	mvn.w	r2, #4
 8004848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f8db 	bl	8004a1a <HAL_TIM_IC_CaptureCallback>
 8004864:	e005      	b.n	8004872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f8cd 	bl	8004a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f8de 	bl	8004a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b08      	cmp	r3, #8
 8004884:	d122      	bne.n	80048cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f003 0308 	and.w	r3, r3, #8
 8004890:	2b08      	cmp	r3, #8
 8004892:	d11b      	bne.n	80048cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0208 	mvn.w	r2, #8
 800489c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2204      	movs	r2, #4
 80048a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f8b1 	bl	8004a1a <HAL_TIM_IC_CaptureCallback>
 80048b8:	e005      	b.n	80048c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f8a3 	bl	8004a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f8b4 	bl	8004a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	2b10      	cmp	r3, #16
 80048d8:	d122      	bne.n	8004920 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	2b10      	cmp	r3, #16
 80048e6:	d11b      	bne.n	8004920 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0210 	mvn.w	r2, #16
 80048f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2208      	movs	r2, #8
 80048f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f887 	bl	8004a1a <HAL_TIM_IC_CaptureCallback>
 800490c:	e005      	b.n	800491a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f879 	bl	8004a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f88a 	bl	8004a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b01      	cmp	r3, #1
 800492c:	d10e      	bne.n	800494c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b01      	cmp	r3, #1
 800493a:	d107      	bne.n	800494c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0201 	mvn.w	r2, #1
 8004944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fd fba2 	bl	8002090 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004956:	2b80      	cmp	r3, #128	; 0x80
 8004958:	d10e      	bne.n	8004978 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004964:	2b80      	cmp	r3, #128	; 0x80
 8004966:	d107      	bne.n	8004978 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f914 	bl	8004ba0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004986:	d10e      	bne.n	80049a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004992:	2b80      	cmp	r3, #128	; 0x80
 8004994:	d107      	bne.n	80049a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800499e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f907 	bl	8004bb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b0:	2b40      	cmp	r3, #64	; 0x40
 80049b2:	d10e      	bne.n	80049d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049be:	2b40      	cmp	r3, #64	; 0x40
 80049c0:	d107      	bne.n	80049d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f838 	bl	8004a42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b20      	cmp	r3, #32
 80049de:	d10e      	bne.n	80049fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d107      	bne.n	80049fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f06f 0220 	mvn.w	r2, #32
 80049f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f8c7 	bl	8004b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049fe:	bf00      	nop
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
	...

08004a58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a40      	ldr	r2, [pc, #256]	; (8004b6c <TIM_Base_SetConfig+0x114>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d013      	beq.n	8004a98 <TIM_Base_SetConfig+0x40>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a76:	d00f      	beq.n	8004a98 <TIM_Base_SetConfig+0x40>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a3d      	ldr	r2, [pc, #244]	; (8004b70 <TIM_Base_SetConfig+0x118>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00b      	beq.n	8004a98 <TIM_Base_SetConfig+0x40>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a3c      	ldr	r2, [pc, #240]	; (8004b74 <TIM_Base_SetConfig+0x11c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d007      	beq.n	8004a98 <TIM_Base_SetConfig+0x40>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a3b      	ldr	r2, [pc, #236]	; (8004b78 <TIM_Base_SetConfig+0x120>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d003      	beq.n	8004a98 <TIM_Base_SetConfig+0x40>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a3a      	ldr	r2, [pc, #232]	; (8004b7c <TIM_Base_SetConfig+0x124>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d108      	bne.n	8004aaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a2f      	ldr	r2, [pc, #188]	; (8004b6c <TIM_Base_SetConfig+0x114>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d01f      	beq.n	8004af2 <TIM_Base_SetConfig+0x9a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab8:	d01b      	beq.n	8004af2 <TIM_Base_SetConfig+0x9a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a2c      	ldr	r2, [pc, #176]	; (8004b70 <TIM_Base_SetConfig+0x118>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d017      	beq.n	8004af2 <TIM_Base_SetConfig+0x9a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a2b      	ldr	r2, [pc, #172]	; (8004b74 <TIM_Base_SetConfig+0x11c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d013      	beq.n	8004af2 <TIM_Base_SetConfig+0x9a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a2a      	ldr	r2, [pc, #168]	; (8004b78 <TIM_Base_SetConfig+0x120>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00f      	beq.n	8004af2 <TIM_Base_SetConfig+0x9a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a29      	ldr	r2, [pc, #164]	; (8004b7c <TIM_Base_SetConfig+0x124>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00b      	beq.n	8004af2 <TIM_Base_SetConfig+0x9a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a28      	ldr	r2, [pc, #160]	; (8004b80 <TIM_Base_SetConfig+0x128>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d007      	beq.n	8004af2 <TIM_Base_SetConfig+0x9a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a27      	ldr	r2, [pc, #156]	; (8004b84 <TIM_Base_SetConfig+0x12c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d003      	beq.n	8004af2 <TIM_Base_SetConfig+0x9a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a26      	ldr	r2, [pc, #152]	; (8004b88 <TIM_Base_SetConfig+0x130>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d108      	bne.n	8004b04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a10      	ldr	r2, [pc, #64]	; (8004b6c <TIM_Base_SetConfig+0x114>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d00f      	beq.n	8004b50 <TIM_Base_SetConfig+0xf8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a12      	ldr	r2, [pc, #72]	; (8004b7c <TIM_Base_SetConfig+0x124>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00b      	beq.n	8004b50 <TIM_Base_SetConfig+0xf8>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a11      	ldr	r2, [pc, #68]	; (8004b80 <TIM_Base_SetConfig+0x128>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d007      	beq.n	8004b50 <TIM_Base_SetConfig+0xf8>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a10      	ldr	r2, [pc, #64]	; (8004b84 <TIM_Base_SetConfig+0x12c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d003      	beq.n	8004b50 <TIM_Base_SetConfig+0xf8>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a0f      	ldr	r2, [pc, #60]	; (8004b88 <TIM_Base_SetConfig+0x130>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d103      	bne.n	8004b58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	615a      	str	r2, [r3, #20]
}
 8004b5e:	bf00      	nop
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40012c00 	.word	0x40012c00
 8004b70:	40000400 	.word	0x40000400
 8004b74:	40000800 	.word	0x40000800
 8004b78:	40000c00 	.word	0x40000c00
 8004b7c:	40013400 	.word	0x40013400
 8004b80:	40014000 	.word	0x40014000
 8004b84:	40014400 	.word	0x40014400
 8004b88:	40014800 	.word	0x40014800

08004b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e040      	b.n	8004c5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fd fc56 	bl	800249c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2224      	movs	r2, #36	; 0x24
 8004bf4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0201 	bic.w	r2, r2, #1
 8004c04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fa90 	bl	800512c <UART_SetConfig>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e022      	b.n	8004c5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fdf6 	bl	8005810 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fe7d 	bl	8005954 <UART_CheckIdleState>
 8004c5a:	4603      	mov	r3, r0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	d164      	bne.n	8004d44 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <HAL_UART_Transmit_DMA+0x22>
 8004c80:	88fb      	ldrh	r3, [r7, #6]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e05d      	b.n	8004d46 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_UART_Transmit_DMA+0x34>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e056      	b.n	8004d46 <HAL_UART_Transmit_DMA+0xe2>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	88fa      	ldrh	r2, [r7, #6]
 8004caa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	88fa      	ldrh	r2, [r7, #6]
 8004cb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2221      	movs	r2, #33	; 0x21
 8004cc0:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d02a      	beq.n	8004d20 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cce:	4a20      	ldr	r2, [pc, #128]	; (8004d50 <HAL_UART_Transmit_DMA+0xec>)
 8004cd0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cd6:	4a1f      	ldr	r2, [pc, #124]	; (8004d54 <HAL_UART_Transmit_DMA+0xf0>)
 8004cd8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cde:	4a1e      	ldr	r2, [pc, #120]	; (8004d58 <HAL_UART_Transmit_DMA+0xf4>)
 8004ce0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3328      	adds	r3, #40	; 0x28
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	88fb      	ldrh	r3, [r7, #6]
 8004cfe:	f7fd feab 	bl	8002a58 <HAL_DMA_Start_IT>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00b      	beq.n	8004d20 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2210      	movs	r2, #16
 8004d0c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e012      	b.n	8004d46 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2240      	movs	r2, #64	; 0x40
 8004d26:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d3e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	e000      	b.n	8004d46 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8004d44:	2302      	movs	r3, #2
  }
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	08005b3f 	.word	0x08005b3f
 8004d54:	08005b93 	.word	0x08005b93
 8004d58:	08005c33 	.word	0x08005c33

08004d5c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	4613      	mov	r3, r2
 8004d68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d6e:	2b20      	cmp	r3, #32
 8004d70:	d16c      	bne.n	8004e4c <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <HAL_UART_Receive_DMA+0x22>
 8004d78:	88fb      	ldrh	r3, [r7, #6]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e065      	b.n	8004e4e <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_UART_Receive_DMA+0x34>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e05e      	b.n	8004e4e <HAL_UART_Receive_DMA+0xf2>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	88fa      	ldrh	r2, [r7, #6]
 8004da2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2222      	movs	r2, #34	; 0x22
 8004db0:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d02a      	beq.n	8004e10 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dbe:	4a26      	ldr	r2, [pc, #152]	; (8004e58 <HAL_UART_Receive_DMA+0xfc>)
 8004dc0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dc6:	4a25      	ldr	r2, [pc, #148]	; (8004e5c <HAL_UART_Receive_DMA+0x100>)
 8004dc8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dce:	4a24      	ldr	r2, [pc, #144]	; (8004e60 <HAL_UART_Receive_DMA+0x104>)
 8004dd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3324      	adds	r3, #36	; 0x24
 8004de4:	4619      	mov	r1, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dea:	461a      	mov	r2, r3
 8004dec:	88fb      	ldrh	r3, [r7, #6]
 8004dee:	f7fd fe33 	bl	8002a58 <HAL_DMA_Start_IT>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00b      	beq.n	8004e10 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2210      	movs	r2, #16
 8004dfc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e01e      	b.n	8004e4e <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e26:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e46:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e000      	b.n	8004e4e <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8004e4c:	2302      	movs	r3, #2
  }
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	08005baf 	.word	0x08005baf
 8004e5c:	08005c17 	.word	0x08005c17
 8004e60:	08005c33 	.word	0x08005c33

08004e64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	f640 030f 	movw	r3, #2063	; 0x80f
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d113      	bne.n	8004ebc <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00e      	beq.n	8004ebc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d009      	beq.n	8004ebc <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 8114 	beq.w	80050da <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	4798      	blx	r3
      }
      return;
 8004eba:	e10e      	b.n	80050da <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 80d6 	beq.w	8005070 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d105      	bne.n	8004eda <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 80cb 	beq.w	8005070 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00e      	beq.n	8004f02 <HAL_UART_IRQHandler+0x9e>
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d009      	beq.n	8004f02 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004efa:	f043 0201 	orr.w	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00e      	beq.n	8004f2a <HAL_UART_IRQHandler+0xc6>
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d009      	beq.n	8004f2a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f22:	f043 0204 	orr.w	r2, r3, #4
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00e      	beq.n	8004f52 <HAL_UART_IRQHandler+0xee>
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d009      	beq.n	8004f52 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2204      	movs	r2, #4
 8004f44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f4a:	f043 0202 	orr.w	r2, r3, #2
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d013      	beq.n	8004f84 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d104      	bne.n	8004f70 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d009      	beq.n	8004f84 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2208      	movs	r2, #8
 8004f76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f7c:	f043 0208 	orr.w	r2, r3, #8
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00f      	beq.n	8004fae <HAL_UART_IRQHandler+0x14a>
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fa0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fa6:	f043 0220 	orr.w	r2, r3, #32
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 8093 	beq.w	80050de <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f003 0320 	and.w	r3, r3, #32
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00c      	beq.n	8004fdc <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fe0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fec:	2b40      	cmp	r3, #64	; 0x40
 8004fee:	d004      	beq.n	8004ffa <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d031      	beq.n	800505e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fd7f 	bl	8005afe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500a:	2b40      	cmp	r3, #64	; 0x40
 800500c:	d123      	bne.n	8005056 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800501c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005022:	2b00      	cmp	r3, #0
 8005024:	d013      	beq.n	800504e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800502a:	4a30      	ldr	r2, [pc, #192]	; (80050ec <HAL_UART_IRQHandler+0x288>)
 800502c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005032:	4618      	mov	r0, r3
 8005034:	f7fd fd70 	bl	8002b18 <HAL_DMA_Abort_IT>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d016      	beq.n	800506c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005048:	4610      	mov	r0, r2
 800504a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800504c:	e00e      	b.n	800506c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f862 	bl	8005118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005054:	e00a      	b.n	800506c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f85e 	bl	8005118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800505c:	e006      	b.n	800506c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f85a 	bl	8005118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800506a:	e038      	b.n	80050de <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800506c:	bf00      	nop
    return;
 800506e:	e036      	b.n	80050de <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00d      	beq.n	8005096 <HAL_UART_IRQHandler+0x232>
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800508c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fe3a 	bl	8005d08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005094:	e026      	b.n	80050e4 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00d      	beq.n	80050bc <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d008      	beq.n	80050bc <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d017      	beq.n	80050e2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	4798      	blx	r3
    }
    return;
 80050ba:	e012      	b.n	80050e2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00e      	beq.n	80050e4 <HAL_UART_IRQHandler+0x280>
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d009      	beq.n	80050e4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fe00 	bl	8005cd6 <UART_EndTransmit_IT>
    return;
 80050d6:	bf00      	nop
 80050d8:	e004      	b.n	80050e4 <HAL_UART_IRQHandler+0x280>
      return;
 80050da:	bf00      	nop
 80050dc:	e002      	b.n	80050e4 <HAL_UART_IRQHandler+0x280>
    return;
 80050de:	bf00      	nop
 80050e0:	e000      	b.n	80050e4 <HAL_UART_IRQHandler+0x280>
    return;
 80050e2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80050e4:	3720      	adds	r7, #32
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	08005cab 	.word	0x08005cab

080050f0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800512c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005130:	b08a      	sub	sp, #40	; 0x28
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005136:	2300      	movs	r3, #0
 8005138:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800513e:	2300      	movs	r3, #0
 8005140:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	431a      	orrs	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	4313      	orrs	r3, r2
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	4bb8      	ldr	r3, [pc, #736]	; (8005444 <UART_SetConfig+0x318>)
 8005162:	4013      	ands	r3, r2
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6812      	ldr	r2, [r2, #0]
 8005168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800516a:	430b      	orrs	r3, r1
 800516c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4aae      	ldr	r2, [pc, #696]	; (8005448 <UART_SetConfig+0x31c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d004      	beq.n	800519e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519a:	4313      	orrs	r3, r2
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ae:	430a      	orrs	r2, r1
 80051b0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4aa5      	ldr	r2, [pc, #660]	; (800544c <UART_SetConfig+0x320>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d126      	bne.n	800520a <UART_SetConfig+0xde>
 80051bc:	4ba4      	ldr	r3, [pc, #656]	; (8005450 <UART_SetConfig+0x324>)
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d81a      	bhi.n	8005200 <UART_SetConfig+0xd4>
 80051ca:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0xa4>)
 80051cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d0:	080051e1 	.word	0x080051e1
 80051d4:	080051f1 	.word	0x080051f1
 80051d8:	080051e9 	.word	0x080051e9
 80051dc:	080051f9 	.word	0x080051f9
 80051e0:	2301      	movs	r3, #1
 80051e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e6:	e105      	b.n	80053f4 <UART_SetConfig+0x2c8>
 80051e8:	2302      	movs	r3, #2
 80051ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ee:	e101      	b.n	80053f4 <UART_SetConfig+0x2c8>
 80051f0:	2304      	movs	r3, #4
 80051f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f6:	e0fd      	b.n	80053f4 <UART_SetConfig+0x2c8>
 80051f8:	2308      	movs	r3, #8
 80051fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051fe:	e0f9      	b.n	80053f4 <UART_SetConfig+0x2c8>
 8005200:	2310      	movs	r3, #16
 8005202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005206:	bf00      	nop
 8005208:	e0f4      	b.n	80053f4 <UART_SetConfig+0x2c8>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a91      	ldr	r2, [pc, #580]	; (8005454 <UART_SetConfig+0x328>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d138      	bne.n	8005286 <UART_SetConfig+0x15a>
 8005214:	4b8e      	ldr	r3, [pc, #568]	; (8005450 <UART_SetConfig+0x324>)
 8005216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521a:	f003 030c 	and.w	r3, r3, #12
 800521e:	2b0c      	cmp	r3, #12
 8005220:	d82c      	bhi.n	800527c <UART_SetConfig+0x150>
 8005222:	a201      	add	r2, pc, #4	; (adr r2, 8005228 <UART_SetConfig+0xfc>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	0800525d 	.word	0x0800525d
 800522c:	0800527d 	.word	0x0800527d
 8005230:	0800527d 	.word	0x0800527d
 8005234:	0800527d 	.word	0x0800527d
 8005238:	0800526d 	.word	0x0800526d
 800523c:	0800527d 	.word	0x0800527d
 8005240:	0800527d 	.word	0x0800527d
 8005244:	0800527d 	.word	0x0800527d
 8005248:	08005265 	.word	0x08005265
 800524c:	0800527d 	.word	0x0800527d
 8005250:	0800527d 	.word	0x0800527d
 8005254:	0800527d 	.word	0x0800527d
 8005258:	08005275 	.word	0x08005275
 800525c:	2300      	movs	r3, #0
 800525e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005262:	e0c7      	b.n	80053f4 <UART_SetConfig+0x2c8>
 8005264:	2302      	movs	r3, #2
 8005266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800526a:	e0c3      	b.n	80053f4 <UART_SetConfig+0x2c8>
 800526c:	2304      	movs	r3, #4
 800526e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005272:	e0bf      	b.n	80053f4 <UART_SetConfig+0x2c8>
 8005274:	2308      	movs	r3, #8
 8005276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527a:	e0bb      	b.n	80053f4 <UART_SetConfig+0x2c8>
 800527c:	2310      	movs	r3, #16
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005282:	bf00      	nop
 8005284:	e0b6      	b.n	80053f4 <UART_SetConfig+0x2c8>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a73      	ldr	r2, [pc, #460]	; (8005458 <UART_SetConfig+0x32c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d125      	bne.n	80052dc <UART_SetConfig+0x1b0>
 8005290:	4b6f      	ldr	r3, [pc, #444]	; (8005450 <UART_SetConfig+0x324>)
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005296:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800529a:	2b10      	cmp	r3, #16
 800529c:	d011      	beq.n	80052c2 <UART_SetConfig+0x196>
 800529e:	2b10      	cmp	r3, #16
 80052a0:	d802      	bhi.n	80052a8 <UART_SetConfig+0x17c>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d005      	beq.n	80052b2 <UART_SetConfig+0x186>
 80052a6:	e014      	b.n	80052d2 <UART_SetConfig+0x1a6>
 80052a8:	2b20      	cmp	r3, #32
 80052aa:	d006      	beq.n	80052ba <UART_SetConfig+0x18e>
 80052ac:	2b30      	cmp	r3, #48	; 0x30
 80052ae:	d00c      	beq.n	80052ca <UART_SetConfig+0x19e>
 80052b0:	e00f      	b.n	80052d2 <UART_SetConfig+0x1a6>
 80052b2:	2300      	movs	r3, #0
 80052b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052b8:	e09c      	b.n	80053f4 <UART_SetConfig+0x2c8>
 80052ba:	2302      	movs	r3, #2
 80052bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c0:	e098      	b.n	80053f4 <UART_SetConfig+0x2c8>
 80052c2:	2304      	movs	r3, #4
 80052c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c8:	e094      	b.n	80053f4 <UART_SetConfig+0x2c8>
 80052ca:	2308      	movs	r3, #8
 80052cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d0:	e090      	b.n	80053f4 <UART_SetConfig+0x2c8>
 80052d2:	2310      	movs	r3, #16
 80052d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d8:	bf00      	nop
 80052da:	e08b      	b.n	80053f4 <UART_SetConfig+0x2c8>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a5e      	ldr	r2, [pc, #376]	; (800545c <UART_SetConfig+0x330>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d125      	bne.n	8005332 <UART_SetConfig+0x206>
 80052e6:	4b5a      	ldr	r3, [pc, #360]	; (8005450 <UART_SetConfig+0x324>)
 80052e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052f0:	2b40      	cmp	r3, #64	; 0x40
 80052f2:	d011      	beq.n	8005318 <UART_SetConfig+0x1ec>
 80052f4:	2b40      	cmp	r3, #64	; 0x40
 80052f6:	d802      	bhi.n	80052fe <UART_SetConfig+0x1d2>
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d005      	beq.n	8005308 <UART_SetConfig+0x1dc>
 80052fc:	e014      	b.n	8005328 <UART_SetConfig+0x1fc>
 80052fe:	2b80      	cmp	r3, #128	; 0x80
 8005300:	d006      	beq.n	8005310 <UART_SetConfig+0x1e4>
 8005302:	2bc0      	cmp	r3, #192	; 0xc0
 8005304:	d00c      	beq.n	8005320 <UART_SetConfig+0x1f4>
 8005306:	e00f      	b.n	8005328 <UART_SetConfig+0x1fc>
 8005308:	2300      	movs	r3, #0
 800530a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800530e:	e071      	b.n	80053f4 <UART_SetConfig+0x2c8>
 8005310:	2302      	movs	r3, #2
 8005312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005316:	e06d      	b.n	80053f4 <UART_SetConfig+0x2c8>
 8005318:	2304      	movs	r3, #4
 800531a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800531e:	e069      	b.n	80053f4 <UART_SetConfig+0x2c8>
 8005320:	2308      	movs	r3, #8
 8005322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005326:	e065      	b.n	80053f4 <UART_SetConfig+0x2c8>
 8005328:	2310      	movs	r3, #16
 800532a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800532e:	bf00      	nop
 8005330:	e060      	b.n	80053f4 <UART_SetConfig+0x2c8>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a4a      	ldr	r2, [pc, #296]	; (8005460 <UART_SetConfig+0x334>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d129      	bne.n	8005390 <UART_SetConfig+0x264>
 800533c:	4b44      	ldr	r3, [pc, #272]	; (8005450 <UART_SetConfig+0x324>)
 800533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800534a:	d014      	beq.n	8005376 <UART_SetConfig+0x24a>
 800534c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005350:	d802      	bhi.n	8005358 <UART_SetConfig+0x22c>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d007      	beq.n	8005366 <UART_SetConfig+0x23a>
 8005356:	e016      	b.n	8005386 <UART_SetConfig+0x25a>
 8005358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800535c:	d007      	beq.n	800536e <UART_SetConfig+0x242>
 800535e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005362:	d00c      	beq.n	800537e <UART_SetConfig+0x252>
 8005364:	e00f      	b.n	8005386 <UART_SetConfig+0x25a>
 8005366:	2300      	movs	r3, #0
 8005368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800536c:	e042      	b.n	80053f4 <UART_SetConfig+0x2c8>
 800536e:	2302      	movs	r3, #2
 8005370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005374:	e03e      	b.n	80053f4 <UART_SetConfig+0x2c8>
 8005376:	2304      	movs	r3, #4
 8005378:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800537c:	e03a      	b.n	80053f4 <UART_SetConfig+0x2c8>
 800537e:	2308      	movs	r3, #8
 8005380:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005384:	e036      	b.n	80053f4 <UART_SetConfig+0x2c8>
 8005386:	2310      	movs	r3, #16
 8005388:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800538c:	bf00      	nop
 800538e:	e031      	b.n	80053f4 <UART_SetConfig+0x2c8>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a2c      	ldr	r2, [pc, #176]	; (8005448 <UART_SetConfig+0x31c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d129      	bne.n	80053ee <UART_SetConfig+0x2c2>
 800539a:	4b2d      	ldr	r3, [pc, #180]	; (8005450 <UART_SetConfig+0x324>)
 800539c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a8:	d014      	beq.n	80053d4 <UART_SetConfig+0x2a8>
 80053aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ae:	d802      	bhi.n	80053b6 <UART_SetConfig+0x28a>
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <UART_SetConfig+0x298>
 80053b4:	e016      	b.n	80053e4 <UART_SetConfig+0x2b8>
 80053b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ba:	d007      	beq.n	80053cc <UART_SetConfig+0x2a0>
 80053bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053c0:	d00c      	beq.n	80053dc <UART_SetConfig+0x2b0>
 80053c2:	e00f      	b.n	80053e4 <UART_SetConfig+0x2b8>
 80053c4:	2300      	movs	r3, #0
 80053c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ca:	e013      	b.n	80053f4 <UART_SetConfig+0x2c8>
 80053cc:	2302      	movs	r3, #2
 80053ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053d2:	e00f      	b.n	80053f4 <UART_SetConfig+0x2c8>
 80053d4:	2304      	movs	r3, #4
 80053d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053da:	e00b      	b.n	80053f4 <UART_SetConfig+0x2c8>
 80053dc:	2308      	movs	r3, #8
 80053de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053e2:	e007      	b.n	80053f4 <UART_SetConfig+0x2c8>
 80053e4:	2310      	movs	r3, #16
 80053e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ea:	bf00      	nop
 80053ec:	e002      	b.n	80053f4 <UART_SetConfig+0x2c8>
 80053ee:	2310      	movs	r3, #16
 80053f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a13      	ldr	r2, [pc, #76]	; (8005448 <UART_SetConfig+0x31c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	f040 80fe 	bne.w	80055fc <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005400:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005404:	2b08      	cmp	r3, #8
 8005406:	d837      	bhi.n	8005478 <UART_SetConfig+0x34c>
 8005408:	a201      	add	r2, pc, #4	; (adr r2, 8005410 <UART_SetConfig+0x2e4>)
 800540a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540e:	bf00      	nop
 8005410:	08005435 	.word	0x08005435
 8005414:	08005479 	.word	0x08005479
 8005418:	0800543d 	.word	0x0800543d
 800541c:	08005479 	.word	0x08005479
 8005420:	08005469 	.word	0x08005469
 8005424:	08005479 	.word	0x08005479
 8005428:	08005479 	.word	0x08005479
 800542c:	08005479 	.word	0x08005479
 8005430:	08005471 	.word	0x08005471
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005434:	f7fe fbfa 	bl	8003c2c <HAL_RCC_GetPCLK1Freq>
 8005438:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800543a:	e020      	b.n	800547e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800543c:	4b09      	ldr	r3, [pc, #36]	; (8005464 <UART_SetConfig+0x338>)
 800543e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005440:	e01d      	b.n	800547e <UART_SetConfig+0x352>
 8005442:	bf00      	nop
 8005444:	efff69f3 	.word	0xefff69f3
 8005448:	40008000 	.word	0x40008000
 800544c:	40013800 	.word	0x40013800
 8005450:	40021000 	.word	0x40021000
 8005454:	40004400 	.word	0x40004400
 8005458:	40004800 	.word	0x40004800
 800545c:	40004c00 	.word	0x40004c00
 8005460:	40005000 	.word	0x40005000
 8005464:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005468:	f7fe fb4a 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 800546c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800546e:	e006      	b.n	800547e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005470:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005474:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005476:	e002      	b.n	800547e <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	76fb      	strb	r3, [r7, #27]
        break;
 800547c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 81b9 	beq.w	80057f8 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	4613      	mov	r3, r2
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	4413      	add	r3, r2
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	429a      	cmp	r2, r3
 8005494:	d305      	bcc.n	80054a2 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d902      	bls.n	80054a8 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	76fb      	strb	r3, [r7, #27]
 80054a6:	e1a7      	b.n	80057f8 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 80054a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	f200 8092 	bhi.w	80055d6 <UART_SetConfig+0x4aa>
 80054b2:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <UART_SetConfig+0x38c>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	080054dd 	.word	0x080054dd
 80054bc:	080055d7 	.word	0x080055d7
 80054c0:	0800552b 	.word	0x0800552b
 80054c4:	080055d7 	.word	0x080055d7
 80054c8:	0800555f 	.word	0x0800555f
 80054cc:	080055d7 	.word	0x080055d7
 80054d0:	080055d7 	.word	0x080055d7
 80054d4:	080055d7 	.word	0x080055d7
 80054d8:	080055ad 	.word	0x080055ad
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80054dc:	f7fe fba6 	bl	8003c2c <HAL_RCC_GetPCLK1Freq>
 80054e0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	4619      	mov	r1, r3
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	f04f 0300 	mov.w	r3, #0
 80054ee:	f04f 0400 	mov.w	r4, #0
 80054f2:	0214      	lsls	r4, r2, #8
 80054f4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80054f8:	020b      	lsls	r3, r1, #8
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6852      	ldr	r2, [r2, #4]
 80054fe:	0852      	lsrs	r2, r2, #1
 8005500:	4611      	mov	r1, r2
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	eb13 0b01 	adds.w	fp, r3, r1
 800550a:	eb44 0c02 	adc.w	ip, r4, r2
 800550e:	4658      	mov	r0, fp
 8005510:	4661      	mov	r1, ip
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f04f 0400 	mov.w	r4, #0
 800551a:	461a      	mov	r2, r3
 800551c:	4623      	mov	r3, r4
 800551e:	f7fb fb3b 	bl	8000b98 <__aeabi_uldivmod>
 8005522:	4603      	mov	r3, r0
 8005524:	460c      	mov	r4, r1
 8005526:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005528:	e058      	b.n	80055dc <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	085b      	lsrs	r3, r3, #1
 8005530:	f04f 0400 	mov.w	r4, #0
 8005534:	49ae      	ldr	r1, [pc, #696]	; (80057f0 <UART_SetConfig+0x6c4>)
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	eb13 0b01 	adds.w	fp, r3, r1
 800553e:	eb44 0c02 	adc.w	ip, r4, r2
 8005542:	4658      	mov	r0, fp
 8005544:	4661      	mov	r1, ip
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f04f 0400 	mov.w	r4, #0
 800554e:	461a      	mov	r2, r3
 8005550:	4623      	mov	r3, r4
 8005552:	f7fb fb21 	bl	8000b98 <__aeabi_uldivmod>
 8005556:	4603      	mov	r3, r0
 8005558:	460c      	mov	r4, r1
 800555a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800555c:	e03e      	b.n	80055dc <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800555e:	f7fe facf 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8005562:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	4619      	mov	r1, r3
 8005568:	f04f 0200 	mov.w	r2, #0
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	f04f 0400 	mov.w	r4, #0
 8005574:	0214      	lsls	r4, r2, #8
 8005576:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800557a:	020b      	lsls	r3, r1, #8
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6852      	ldr	r2, [r2, #4]
 8005580:	0852      	lsrs	r2, r2, #1
 8005582:	4611      	mov	r1, r2
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	eb13 0b01 	adds.w	fp, r3, r1
 800558c:	eb44 0c02 	adc.w	ip, r4, r2
 8005590:	4658      	mov	r0, fp
 8005592:	4661      	mov	r1, ip
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f04f 0400 	mov.w	r4, #0
 800559c:	461a      	mov	r2, r3
 800559e:	4623      	mov	r3, r4
 80055a0:	f7fb fafa 	bl	8000b98 <__aeabi_uldivmod>
 80055a4:	4603      	mov	r3, r0
 80055a6:	460c      	mov	r4, r1
 80055a8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80055aa:	e017      	b.n	80055dc <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	085b      	lsrs	r3, r3, #1
 80055b2:	f04f 0400 	mov.w	r4, #0
 80055b6:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80055ba:	f144 0100 	adc.w	r1, r4, #0
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f04f 0400 	mov.w	r4, #0
 80055c6:	461a      	mov	r2, r3
 80055c8:	4623      	mov	r3, r4
 80055ca:	f7fb fae5 	bl	8000b98 <__aeabi_uldivmod>
 80055ce:	4603      	mov	r3, r0
 80055d0:	460c      	mov	r4, r1
 80055d2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80055d4:	e002      	b.n	80055dc <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	76fb      	strb	r3, [r7, #27]
            break;
 80055da:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055e2:	d308      	bcc.n	80055f6 <UART_SetConfig+0x4ca>
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ea:	d204      	bcs.n	80055f6 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69fa      	ldr	r2, [r7, #28]
 80055f2:	60da      	str	r2, [r3, #12]
 80055f4:	e100      	b.n	80057f8 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	76fb      	strb	r3, [r7, #27]
 80055fa:	e0fd      	b.n	80057f8 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005604:	f040 8084 	bne.w	8005710 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8005608:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800560c:	2b08      	cmp	r3, #8
 800560e:	d85f      	bhi.n	80056d0 <UART_SetConfig+0x5a4>
 8005610:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <UART_SetConfig+0x4ec>)
 8005612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005616:	bf00      	nop
 8005618:	0800563d 	.word	0x0800563d
 800561c:	0800565d 	.word	0x0800565d
 8005620:	0800567d 	.word	0x0800567d
 8005624:	080056d1 	.word	0x080056d1
 8005628:	08005699 	.word	0x08005699
 800562c:	080056d1 	.word	0x080056d1
 8005630:	080056d1 	.word	0x080056d1
 8005634:	080056d1 	.word	0x080056d1
 8005638:	080056b9 	.word	0x080056b9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800563c:	f7fe faf6 	bl	8003c2c <HAL_RCC_GetPCLK1Freq>
 8005640:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	005a      	lsls	r2, r3, #1
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	085b      	lsrs	r3, r3, #1
 800564c:	441a      	add	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	fbb2 f3f3 	udiv	r3, r2, r3
 8005656:	b29b      	uxth	r3, r3
 8005658:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800565a:	e03c      	b.n	80056d6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800565c:	f7fe fafc 	bl	8003c58 <HAL_RCC_GetPCLK2Freq>
 8005660:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	005a      	lsls	r2, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	085b      	lsrs	r3, r3, #1
 800566c:	441a      	add	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	fbb2 f3f3 	udiv	r3, r2, r3
 8005676:	b29b      	uxth	r3, r3
 8005678:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800567a:	e02c      	b.n	80056d6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	085b      	lsrs	r3, r3, #1
 8005682:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005686:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6852      	ldr	r2, [r2, #4]
 800568e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005692:	b29b      	uxth	r3, r3
 8005694:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005696:	e01e      	b.n	80056d6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005698:	f7fe fa32 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 800569c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	005a      	lsls	r2, r3, #1
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	085b      	lsrs	r3, r3, #1
 80056a8:	441a      	add	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80056b6:	e00e      	b.n	80056d6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	085b      	lsrs	r3, r3, #1
 80056be:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80056ce:	e002      	b.n	80056d6 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	76fb      	strb	r3, [r7, #27]
        break;
 80056d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	2b0f      	cmp	r3, #15
 80056da:	d916      	bls.n	800570a <UART_SetConfig+0x5de>
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e2:	d212      	bcs.n	800570a <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	f023 030f 	bic.w	r3, r3, #15
 80056ec:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	085b      	lsrs	r3, r3, #1
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	89fb      	ldrh	r3, [r7, #14]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	89fa      	ldrh	r2, [r7, #14]
 8005706:	60da      	str	r2, [r3, #12]
 8005708:	e076      	b.n	80057f8 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	76fb      	strb	r3, [r7, #27]
 800570e:	e073      	b.n	80057f8 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8005710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005714:	2b08      	cmp	r3, #8
 8005716:	d85c      	bhi.n	80057d2 <UART_SetConfig+0x6a6>
 8005718:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <UART_SetConfig+0x5f4>)
 800571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571e:	bf00      	nop
 8005720:	08005745 	.word	0x08005745
 8005724:	08005763 	.word	0x08005763
 8005728:	08005781 	.word	0x08005781
 800572c:	080057d3 	.word	0x080057d3
 8005730:	0800579d 	.word	0x0800579d
 8005734:	080057d3 	.word	0x080057d3
 8005738:	080057d3 	.word	0x080057d3
 800573c:	080057d3 	.word	0x080057d3
 8005740:	080057bb 	.word	0x080057bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005744:	f7fe fa72 	bl	8003c2c <HAL_RCC_GetPCLK1Freq>
 8005748:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	085a      	lsrs	r2, r3, #1
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	441a      	add	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	fbb2 f3f3 	udiv	r3, r2, r3
 800575c:	b29b      	uxth	r3, r3
 800575e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005760:	e03a      	b.n	80057d8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005762:	f7fe fa79 	bl	8003c58 <HAL_RCC_GetPCLK2Freq>
 8005766:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	085a      	lsrs	r2, r3, #1
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	441a      	add	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	fbb2 f3f3 	udiv	r3, r2, r3
 800577a:	b29b      	uxth	r3, r3
 800577c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800577e:	e02b      	b.n	80057d8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	085b      	lsrs	r3, r3, #1
 8005786:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800578a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6852      	ldr	r2, [r2, #4]
 8005792:	fbb3 f3f2 	udiv	r3, r3, r2
 8005796:	b29b      	uxth	r3, r3
 8005798:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800579a:	e01d      	b.n	80057d8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800579c:	f7fe f9b0 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 80057a0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	085a      	lsrs	r2, r3, #1
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	441a      	add	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80057b8:	e00e      	b.n	80057d8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	085b      	lsrs	r3, r3, #1
 80057c0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80057d0:	e002      	b.n	80057d8 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	76fb      	strb	r3, [r7, #27]
        break;
 80057d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	2b0f      	cmp	r3, #15
 80057dc:	d90a      	bls.n	80057f4 <UART_SetConfig+0x6c8>
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e4:	d206      	bcs.n	80057f4 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	60da      	str	r2, [r3, #12]
 80057ee:	e003      	b.n	80057f8 <UART_SetConfig+0x6cc>
 80057f0:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005804:	7efb      	ldrb	r3, [r7, #27]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3728      	adds	r7, #40	; 0x28
 800580a:	46bd      	mov	sp, r7
 800580c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005810 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	f003 0308 	and.w	r3, r3, #8
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	f003 0310 	and.w	r3, r3, #16
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d01a      	beq.n	8005926 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800590e:	d10a      	bne.n	8005926 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	605a      	str	r2, [r3, #4]
  }
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af02      	add	r7, sp, #8
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005962:	f7fc fed3 	bl	800270c <HAL_GetTick>
 8005966:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b08      	cmp	r3, #8
 8005974:	d10e      	bne.n	8005994 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005976:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f82a 	bl	80059de <UART_WaitOnFlagUntilTimeout>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e020      	b.n	80059d6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0304 	and.w	r3, r3, #4
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d10e      	bne.n	80059c0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f814 	bl	80059de <UART_WaitOnFlagUntilTimeout>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e00a      	b.n	80059d6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2220      	movs	r2, #32
 80059c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2220      	movs	r2, #32
 80059ca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	603b      	str	r3, [r7, #0]
 80059ea:	4613      	mov	r3, r2
 80059ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ee:	e05d      	b.n	8005aac <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f6:	d059      	beq.n	8005aac <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f8:	f7fc fe88 	bl	800270c <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d302      	bcc.n	8005a0e <UART_WaitOnFlagUntilTimeout+0x30>
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d11b      	bne.n	8005a46 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a1c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 0201 	bic.w	r2, r2, #1
 8005a2c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2220      	movs	r2, #32
 8005a32:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e042      	b.n	8005acc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d02b      	beq.n	8005aac <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a62:	d123      	bne.n	8005aac <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a6c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a7c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0201 	bic.w	r2, r2, #1
 8005a8c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2220      	movs	r2, #32
 8005a92:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2220      	movs	r2, #32
 8005a98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e00f      	b.n	8005acc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69da      	ldr	r2, [r3, #28]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	bf0c      	ite	eq
 8005abc:	2301      	moveq	r3, #1
 8005abe:	2300      	movne	r3, #0
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	79fb      	ldrb	r3, [r7, #7]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d092      	beq.n	80059f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005aea:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2220      	movs	r2, #32
 8005af0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b14:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 0201 	bic.w	r2, r2, #1
 8005b24:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b084      	sub	sp, #16
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0320 	and.w	r3, r3, #32
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d114      	bne.n	8005b84 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b70:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b80:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b82:	e002      	b.n	8005b8a <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f7fc fd5d 	bl	8002644 <HAL_UART_TxCpltCallback>
}
 8005b8a:	bf00      	nop
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b084      	sub	sp, #16
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f7ff faa5 	bl	80050f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ba6:	bf00      	nop
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bba:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0320 	and.w	r3, r3, #32
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d11e      	bne.n	8005c08 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005be0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0201 	bic.w	r2, r2, #1
 8005bf0:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c00:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2220      	movs	r2, #32
 8005c06:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f7fc fd11 	bl	8002630 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c0e:	bf00      	nop
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b084      	sub	sp, #16
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c22:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7ff fa6d 	bl	8005104 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b086      	sub	sp, #24
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c44:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c56:	2b80      	cmp	r3, #128	; 0x80
 8005c58:	d109      	bne.n	8005c6e <UART_DMAError+0x3c>
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	2b21      	cmp	r3, #33	; 0x21
 8005c5e:	d106      	bne.n	8005c6e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005c68:	6978      	ldr	r0, [r7, #20]
 8005c6a:	f7ff ff33 	bl	8005ad4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c78:	2b40      	cmp	r3, #64	; 0x40
 8005c7a:	d109      	bne.n	8005c90 <UART_DMAError+0x5e>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b22      	cmp	r3, #34	; 0x22
 8005c80:	d106      	bne.n	8005c90 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005c8a:	6978      	ldr	r0, [r7, #20]
 8005c8c:	f7ff ff37 	bl	8005afe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c94:	f043 0210 	orr.w	r2, r3, #16
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c9c:	6978      	ldr	r0, [r7, #20]
 8005c9e:	f7ff fa3b 	bl	8005118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ca2:	bf00      	nop
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f7ff fa25 	bl	8005118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cce:	bf00      	nop
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b082      	sub	sp, #8
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cec:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7fc fca2 	bl	8002644 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d00:	bf00      	nop
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	4603      	mov	r3, r0
 8005d24:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d2e:	2b84      	cmp	r3, #132	; 0x84
 8005d30:	d005      	beq.n	8005d3e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005d32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4413      	add	r3, r2
 8005d3a:	3303      	adds	r3, #3
 8005d3c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005d50:	f000 fd1a 	bl	8006788 <vTaskStartScheduler>
  
  return osOK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005d5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d5c:	b089      	sub	sp, #36	; 0x24
 8005d5e:	af04      	add	r7, sp, #16
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685c      	ldr	r4, [r3, #4]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681d      	ldr	r5, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691e      	ldr	r6, [r3, #16]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff ffd0 	bl	8005d1c <makeFreeRtosPriority>
 8005d7c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d86:	9202      	str	r2, [sp, #8]
 8005d88:	9301      	str	r3, [sp, #4]
 8005d8a:	9100      	str	r1, [sp, #0]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	4632      	mov	r2, r6
 8005d90:	4629      	mov	r1, r5
 8005d92:	4620      	mov	r0, r4
 8005d94:	f000 fb7d 	bl	8006492 <xTaskCreateStatic>
 8005d98:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005da4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <osDelay+0x16>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	e000      	b.n	8005dbc <osDelay+0x18>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 fcaf 	bl	8006720 <vTaskDelay>
  
  return osOK;
 8005dc2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005dcc:	b590      	push	{r4, r7, lr}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af02      	add	r7, sp, #8
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6859      	ldr	r1, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68dc      	ldr	r4, [r3, #12]
 8005de6:	2300      	movs	r3, #0
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	4623      	mov	r3, r4
 8005dec:	f000 f922 	bl	8006034 <xQueueGenericCreateStatic>
 8005df0:	4603      	mov	r3, r0
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd90      	pop	{r4, r7, pc}

08005dfa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f103 0208 	add.w	r2, r3, #8
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e12:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f103 0208 	add.w	r2, r3, #8
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f103 0208 	add.w	r2, r3, #8
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e2e:	bf00      	nop
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	689a      	ldr	r2, [r3, #8]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	601a      	str	r2, [r3, #0]
}
 8005e90:	bf00      	nop
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb2:	d103      	bne.n	8005ebc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	e00c      	b.n	8005ed6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	3308      	adds	r3, #8
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	e002      	b.n	8005eca <vListInsert+0x2e>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d2f6      	bcs.n	8005ec4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	601a      	str	r2, [r3, #0]
}
 8005f02:	bf00      	nop
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b085      	sub	sp, #20
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	6892      	ldr	r2, [r2, #8]
 8005f24:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6852      	ldr	r2, [r2, #4]
 8005f2e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d103      	bne.n	8005f42 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	1e5a      	subs	r2, r3, #1
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
	...

08005f64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d109      	bne.n	8005f8c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	e7fe      	b.n	8005f8a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005f8c:	f001 f936 	bl	80071fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f98:	68f9      	ldr	r1, [r7, #12]
 8005f9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f9c:	fb01 f303 	mul.w	r3, r1, r3
 8005fa0:	441a      	add	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	68f9      	ldr	r1, [r7, #12]
 8005fc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fc2:	fb01 f303 	mul.w	r3, r1, r3
 8005fc6:	441a      	add	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	22ff      	movs	r2, #255	; 0xff
 8005fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	22ff      	movs	r2, #255	; 0xff
 8005fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d114      	bne.n	800600c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d01a      	beq.n	8006020 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3310      	adds	r3, #16
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 fde4 	bl	8006bbc <xTaskRemoveFromEventList>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d012      	beq.n	8006020 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ffa:	4b0d      	ldr	r3, [pc, #52]	; (8006030 <xQueueGenericReset+0xcc>)
 8005ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	e009      	b.n	8006020 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3310      	adds	r3, #16
 8006010:	4618      	mov	r0, r3
 8006012:	f7ff fef2 	bl	8005dfa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	3324      	adds	r3, #36	; 0x24
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff feed 	bl	8005dfa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006020:	f001 f91a 	bl	8007258 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006024:	2301      	movs	r3, #1
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	e000ed04 	.word	0xe000ed04

08006034 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006034:	b580      	push	{r7, lr}
 8006036:	b08e      	sub	sp, #56	; 0x38
 8006038:	af02      	add	r7, sp, #8
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d109      	bne.n	800605c <xQueueGenericCreateStatic+0x28>
 8006048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	62bb      	str	r3, [r7, #40]	; 0x28
 800605a:	e7fe      	b.n	800605a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d109      	bne.n	8006076 <xQueueGenericCreateStatic+0x42>
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	627b      	str	r3, [r7, #36]	; 0x24
 8006074:	e7fe      	b.n	8006074 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <xQueueGenericCreateStatic+0x4e>
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <xQueueGenericCreateStatic+0x52>
 8006082:	2301      	movs	r3, #1
 8006084:	e000      	b.n	8006088 <xQueueGenericCreateStatic+0x54>
 8006086:	2300      	movs	r3, #0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d109      	bne.n	80060a0 <xQueueGenericCreateStatic+0x6c>
 800608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	623b      	str	r3, [r7, #32]
 800609e:	e7fe      	b.n	800609e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d102      	bne.n	80060ac <xQueueGenericCreateStatic+0x78>
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <xQueueGenericCreateStatic+0x7c>
 80060ac:	2301      	movs	r3, #1
 80060ae:	e000      	b.n	80060b2 <xQueueGenericCreateStatic+0x7e>
 80060b0:	2300      	movs	r3, #0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d109      	bne.n	80060ca <xQueueGenericCreateStatic+0x96>
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	61fb      	str	r3, [r7, #28]
 80060c8:	e7fe      	b.n	80060c8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060ca:	2348      	movs	r3, #72	; 0x48
 80060cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2b48      	cmp	r3, #72	; 0x48
 80060d2:	d009      	beq.n	80060e8 <xQueueGenericCreateStatic+0xb4>
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	61bb      	str	r3, [r7, #24]
 80060e6:	e7fe      	b.n	80060e6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80060e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80060ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d009      	beq.n	8006108 <xQueueGenericCreateStatic+0xd4>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060f4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80060f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	4613      	mov	r3, r2
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 f805 	bl	8006112 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800610a:	4618      	mov	r0, r3
 800610c:	3730      	adds	r7, #48	; 0x30
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	607a      	str	r2, [r7, #4]
 800611e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d103      	bne.n	800612e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	e002      	b.n	8006134 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006140:	2101      	movs	r1, #1
 8006142:	69b8      	ldr	r0, [r7, #24]
 8006144:	f7ff ff0e 	bl	8005f64 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006148:	bf00      	nop
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08e      	sub	sp, #56	; 0x38
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
 800615c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	2b00      	cmp	r3, #0
 8006166:	d109      	bne.n	800617c <xQueueGenericSendFromISR+0x2c>
 8006168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	627b      	str	r3, [r7, #36]	; 0x24
 800617a:	e7fe      	b.n	800617a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d103      	bne.n	800618a <xQueueGenericSendFromISR+0x3a>
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <xQueueGenericSendFromISR+0x3e>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <xQueueGenericSendFromISR+0x40>
 800618e:	2300      	movs	r3, #0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d109      	bne.n	80061a8 <xQueueGenericSendFromISR+0x58>
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	623b      	str	r3, [r7, #32]
 80061a6:	e7fe      	b.n	80061a6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d103      	bne.n	80061b6 <xQueueGenericSendFromISR+0x66>
 80061ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <xQueueGenericSendFromISR+0x6a>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <xQueueGenericSendFromISR+0x6c>
 80061ba:	2300      	movs	r3, #0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d109      	bne.n	80061d4 <xQueueGenericSendFromISR+0x84>
 80061c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	61fb      	str	r3, [r7, #28]
 80061d2:	e7fe      	b.n	80061d2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061d4:	f001 f8ee 	bl	80073b4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80061d8:	f3ef 8211 	mrs	r2, BASEPRI
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	61ba      	str	r2, [r7, #24]
 80061ee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80061f0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d302      	bcc.n	8006206 <xQueueGenericSendFromISR+0xb6>
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	2b02      	cmp	r3, #2
 8006204:	d12c      	bne.n	8006260 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800620c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006216:	f000 f8ac 	bl	8006372 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800621a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800621e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006222:	d112      	bne.n	800624a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	2b00      	cmp	r3, #0
 800622a:	d016      	beq.n	800625a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800622c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622e:	3324      	adds	r3, #36	; 0x24
 8006230:	4618      	mov	r0, r3
 8006232:	f000 fcc3 	bl	8006bbc <xTaskRemoveFromEventList>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00e      	beq.n	800625a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00b      	beq.n	800625a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	e007      	b.n	800625a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800624a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800624e:	3301      	adds	r3, #1
 8006250:	b2db      	uxtb	r3, r3
 8006252:	b25a      	sxtb	r2, r3
 8006254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800625a:	2301      	movs	r3, #1
 800625c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800625e:	e001      	b.n	8006264 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006260:	2300      	movs	r3, #0
 8006262:	637b      	str	r3, [r7, #52]	; 0x34
 8006264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006266:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800626e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006270:	4618      	mov	r0, r3
 8006272:	3738      	adds	r7, #56	; 0x38
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08e      	sub	sp, #56	; 0x38
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628a:	2b00      	cmp	r3, #0
 800628c:	d109      	bne.n	80062a2 <xQueueReceiveFromISR+0x2a>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	623b      	str	r3, [r7, #32]
 80062a0:	e7fe      	b.n	80062a0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d103      	bne.n	80062b0 <xQueueReceiveFromISR+0x38>
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <xQueueReceiveFromISR+0x3c>
 80062b0:	2301      	movs	r3, #1
 80062b2:	e000      	b.n	80062b6 <xQueueReceiveFromISR+0x3e>
 80062b4:	2300      	movs	r3, #0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d109      	bne.n	80062ce <xQueueReceiveFromISR+0x56>
 80062ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	61fb      	str	r3, [r7, #28]
 80062cc:	e7fe      	b.n	80062cc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062ce:	f001 f871 	bl	80073b4 <vPortValidateInterruptPriority>
	__asm volatile
 80062d2:	f3ef 8211 	mrs	r2, BASEPRI
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	61ba      	str	r2, [r7, #24]
 80062e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80062ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d02f      	beq.n	800635a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80062fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006308:	f000 f89d 	bl	8006446 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	1e5a      	subs	r2, r3, #1
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006314:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631c:	d112      	bne.n	8006344 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d016      	beq.n	8006354 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	3310      	adds	r3, #16
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fc46 	bl	8006bbc <xTaskRemoveFromEventList>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00e      	beq.n	8006354 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00b      	beq.n	8006354 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	e007      	b.n	8006354 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006348:	3301      	adds	r3, #1
 800634a:	b2db      	uxtb	r3, r3
 800634c:	b25a      	sxtb	r2, r3
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006354:	2301      	movs	r3, #1
 8006356:	637b      	str	r3, [r7, #52]	; 0x34
 8006358:	e001      	b.n	800635e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800635a:	2300      	movs	r3, #0
 800635c:	637b      	str	r3, [r7, #52]	; 0x34
 800635e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006360:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800636a:	4618      	mov	r0, r3
 800636c:	3738      	adds	r7, #56	; 0x38
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b086      	sub	sp, #24
 8006376:	af00      	add	r7, sp, #0
 8006378:	60f8      	str	r0, [r7, #12]
 800637a:	60b9      	str	r1, [r7, #8]
 800637c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800637e:	2300      	movs	r3, #0
 8006380:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006386:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10d      	bne.n	80063ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d14d      	bne.n	8006434 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	4618      	mov	r0, r3
 800639e:	f000 fd1d 	bl	8006ddc <xTaskPriorityDisinherit>
 80063a2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	609a      	str	r2, [r3, #8]
 80063aa:	e043      	b.n	8006434 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d119      	bne.n	80063e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6858      	ldr	r0, [r3, #4]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	461a      	mov	r2, r3
 80063bc:	68b9      	ldr	r1, [r7, #8]
 80063be:	f001 f861 	bl	8007484 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	441a      	add	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d32b      	bcc.n	8006434 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	605a      	str	r2, [r3, #4]
 80063e4:	e026      	b.n	8006434 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	68d8      	ldr	r0, [r3, #12]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	461a      	mov	r2, r3
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	f001 f847 	bl	8007484 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	68da      	ldr	r2, [r3, #12]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	425b      	negs	r3, r3
 8006400:	441a      	add	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	68da      	ldr	r2, [r3, #12]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d207      	bcs.n	8006422 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	425b      	negs	r3, r3
 800641c:	441a      	add	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b02      	cmp	r3, #2
 8006426:	d105      	bne.n	8006434 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	3b01      	subs	r3, #1
 8006432:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	1c5a      	adds	r2, r3, #1
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800643c:	697b      	ldr	r3, [r7, #20]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b082      	sub	sp, #8
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006454:	2b00      	cmp	r3, #0
 8006456:	d018      	beq.n	800648a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006460:	441a      	add	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	429a      	cmp	r2, r3
 8006470:	d303      	bcc.n	800647a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68d9      	ldr	r1, [r3, #12]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006482:	461a      	mov	r2, r3
 8006484:	6838      	ldr	r0, [r7, #0]
 8006486:	f000 fffd 	bl	8007484 <memcpy>
	}
}
 800648a:	bf00      	nop
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006492:	b580      	push	{r7, lr}
 8006494:	b08e      	sub	sp, #56	; 0x38
 8006496:	af04      	add	r7, sp, #16
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	607a      	str	r2, [r7, #4]
 800649e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80064a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d109      	bne.n	80064ba <xTaskCreateStatic+0x28>
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	623b      	str	r3, [r7, #32]
 80064b8:	e7fe      	b.n	80064b8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80064ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d109      	bne.n	80064d4 <xTaskCreateStatic+0x42>
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	61fb      	str	r3, [r7, #28]
 80064d2:	e7fe      	b.n	80064d2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80064d4:	2354      	movs	r3, #84	; 0x54
 80064d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	2b54      	cmp	r3, #84	; 0x54
 80064dc:	d009      	beq.n	80064f2 <xTaskCreateStatic+0x60>
 80064de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	61bb      	str	r3, [r7, #24]
 80064f0:	e7fe      	b.n	80064f0 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80064f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d01a      	beq.n	8006530 <xTaskCreateStatic+0x9e>
 80064fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d017      	beq.n	8006530 <xTaskCreateStatic+0x9e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006502:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006508:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800650a:	2300      	movs	r3, #0
 800650c:	9303      	str	r3, [sp, #12]
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	9302      	str	r3, [sp, #8]
 8006512:	f107 0314 	add.w	r3, r7, #20
 8006516:	9301      	str	r3, [sp, #4]
 8006518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	68b9      	ldr	r1, [r7, #8]
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 f80b 	bl	800653e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006528:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800652a:	f000 f88f 	bl	800664c <prvAddNewTaskToReadyList>
 800652e:	e001      	b.n	8006534 <xTaskCreateStatic+0xa2>
		}
		else
		{
			xReturn = NULL;
 8006530:	2300      	movs	r3, #0
 8006532:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006534:	697b      	ldr	r3, [r7, #20]
	}
 8006536:	4618      	mov	r0, r3
 8006538:	3728      	adds	r7, #40	; 0x28
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b088      	sub	sp, #32
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	607a      	str	r2, [r7, #4]
 800654a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800654c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006556:	3b01      	subs	r3, #1
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	f023 0307 	bic.w	r3, r3, #7
 8006564:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	2b00      	cmp	r3, #0
 800656e:	d009      	beq.n	8006584 <prvInitialiseNewTask+0x46>
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	617b      	str	r3, [r7, #20]
 8006582:	e7fe      	b.n	8006582 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d01f      	beq.n	80065ca <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800658a:	2300      	movs	r3, #0
 800658c:	61fb      	str	r3, [r7, #28]
 800658e:	e012      	b.n	80065b6 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	4413      	add	r3, r2
 8006596:	7819      	ldrb	r1, [r3, #0]
 8006598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	4413      	add	r3, r2
 800659e:	3334      	adds	r3, #52	; 0x34
 80065a0:	460a      	mov	r2, r1
 80065a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	4413      	add	r3, r2
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d006      	beq.n	80065be <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	3301      	adds	r3, #1
 80065b4:	61fb      	str	r3, [r7, #28]
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	2b0f      	cmp	r3, #15
 80065ba:	d9e9      	bls.n	8006590 <prvInitialiseNewTask+0x52>
 80065bc:	e000      	b.n	80065c0 <prvInitialiseNewTask+0x82>
			{
				break;
 80065be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065c8:	e003      	b.n	80065d2 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80065ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	2b06      	cmp	r3, #6
 80065d6:	d901      	bls.n	80065dc <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80065d8:	2306      	movs	r3, #6
 80065da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80065dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065e6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80065e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ea:	2200      	movs	r2, #0
 80065ec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	3304      	adds	r3, #4
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7ff fc21 	bl	8005e3a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	3318      	adds	r3, #24
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7ff fc1c 	bl	8005e3a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006606:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	f1c3 0207 	rsb	r2, r3, #7
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006616:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	2200      	movs	r2, #0
 800661c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	68f9      	ldr	r1, [r7, #12]
 800662a:	69b8      	ldr	r0, [r7, #24]
 800662c:	f000 fcc0 	bl	8006fb0 <pxPortInitialiseStack>
 8006630:	4602      	mov	r2, r0
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006640:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006642:	bf00      	nop
 8006644:	3720      	adds	r7, #32
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006654:	f000 fdd2 	bl	80071fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006658:	4b2a      	ldr	r3, [pc, #168]	; (8006704 <prvAddNewTaskToReadyList+0xb8>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3301      	adds	r3, #1
 800665e:	4a29      	ldr	r2, [pc, #164]	; (8006704 <prvAddNewTaskToReadyList+0xb8>)
 8006660:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006662:	4b29      	ldr	r3, [pc, #164]	; (8006708 <prvAddNewTaskToReadyList+0xbc>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d109      	bne.n	800667e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800666a:	4a27      	ldr	r2, [pc, #156]	; (8006708 <prvAddNewTaskToReadyList+0xbc>)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006670:	4b24      	ldr	r3, [pc, #144]	; (8006704 <prvAddNewTaskToReadyList+0xb8>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d110      	bne.n	800669a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006678:	f000 fb1a 	bl	8006cb0 <prvInitialiseTaskLists>
 800667c:	e00d      	b.n	800669a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800667e:	4b23      	ldr	r3, [pc, #140]	; (800670c <prvAddNewTaskToReadyList+0xc0>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d109      	bne.n	800669a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006686:	4b20      	ldr	r3, [pc, #128]	; (8006708 <prvAddNewTaskToReadyList+0xbc>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	429a      	cmp	r2, r3
 8006692:	d802      	bhi.n	800669a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006694:	4a1c      	ldr	r2, [pc, #112]	; (8006708 <prvAddNewTaskToReadyList+0xbc>)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800669a:	4b1d      	ldr	r3, [pc, #116]	; (8006710 <prvAddNewTaskToReadyList+0xc4>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3301      	adds	r3, #1
 80066a0:	4a1b      	ldr	r2, [pc, #108]	; (8006710 <prvAddNewTaskToReadyList+0xc4>)
 80066a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a8:	2201      	movs	r2, #1
 80066aa:	409a      	lsls	r2, r3
 80066ac:	4b19      	ldr	r3, [pc, #100]	; (8006714 <prvAddNewTaskToReadyList+0xc8>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	4a18      	ldr	r2, [pc, #96]	; (8006714 <prvAddNewTaskToReadyList+0xc8>)
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4a15      	ldr	r2, [pc, #84]	; (8006718 <prvAddNewTaskToReadyList+0xcc>)
 80066c4:	441a      	add	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3304      	adds	r3, #4
 80066ca:	4619      	mov	r1, r3
 80066cc:	4610      	mov	r0, r2
 80066ce:	f7ff fbc1 	bl	8005e54 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80066d2:	f000 fdc1 	bl	8007258 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80066d6:	4b0d      	ldr	r3, [pc, #52]	; (800670c <prvAddNewTaskToReadyList+0xc0>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00e      	beq.n	80066fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80066de:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <prvAddNewTaskToReadyList+0xbc>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d207      	bcs.n	80066fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80066ec:	4b0b      	ldr	r3, [pc, #44]	; (800671c <prvAddNewTaskToReadyList+0xd0>)
 80066ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066fc:	bf00      	nop
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	20000484 	.word	0x20000484
 8006708:	20000384 	.word	0x20000384
 800670c:	20000490 	.word	0x20000490
 8006710:	200004a0 	.word	0x200004a0
 8006714:	2000048c 	.word	0x2000048c
 8006718:	20000388 	.word	0x20000388
 800671c:	e000ed04 	.word	0xe000ed04

08006720 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006728:	2300      	movs	r3, #0
 800672a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d016      	beq.n	8006760 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006732:	4b13      	ldr	r3, [pc, #76]	; (8006780 <vTaskDelay+0x60>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d009      	beq.n	800674e <vTaskDelay+0x2e>
 800673a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	60bb      	str	r3, [r7, #8]
 800674c:	e7fe      	b.n	800674c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800674e:	f000 f879 	bl	8006844 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006752:	2100      	movs	r1, #0
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fbc5 	bl	8006ee4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800675a:	f000 f881 	bl	8006860 <xTaskResumeAll>
 800675e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d107      	bne.n	8006776 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006766:	4b07      	ldr	r3, [pc, #28]	; (8006784 <vTaskDelay+0x64>)
 8006768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006776:	bf00      	nop
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	200004ac 	.word	0x200004ac
 8006784:	e000ed04 	.word	0xe000ed04

08006788 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b08a      	sub	sp, #40	; 0x28
 800678c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800678e:	2300      	movs	r3, #0
 8006790:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006792:	2300      	movs	r3, #0
 8006794:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006796:	463a      	mov	r2, r7
 8006798:	1d39      	adds	r1, r7, #4
 800679a:	f107 0308 	add.w	r3, r7, #8
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fa fba0 	bl	8000ee4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	9202      	str	r2, [sp, #8]
 80067ac:	9301      	str	r3, [sp, #4]
 80067ae:	2300      	movs	r3, #0
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	2300      	movs	r3, #0
 80067b4:	460a      	mov	r2, r1
 80067b6:	491d      	ldr	r1, [pc, #116]	; (800682c <vTaskStartScheduler+0xa4>)
 80067b8:	481d      	ldr	r0, [pc, #116]	; (8006830 <vTaskStartScheduler+0xa8>)
 80067ba:	f7ff fe6a 	bl	8006492 <xTaskCreateStatic>
 80067be:	4602      	mov	r2, r0
 80067c0:	4b1c      	ldr	r3, [pc, #112]	; (8006834 <vTaskStartScheduler+0xac>)
 80067c2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80067c4:	4b1b      	ldr	r3, [pc, #108]	; (8006834 <vTaskStartScheduler+0xac>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80067cc:	2301      	movs	r3, #1
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	e001      	b.n	80067d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80067d2:	2300      	movs	r3, #0
 80067d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d115      	bne.n	8006808 <vTaskStartScheduler+0x80>
 80067dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e0:	f383 8811 	msr	BASEPRI, r3
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80067ee:	4b12      	ldr	r3, [pc, #72]	; (8006838 <vTaskStartScheduler+0xb0>)
 80067f0:	f04f 32ff 	mov.w	r2, #4294967295
 80067f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067f6:	4b11      	ldr	r3, [pc, #68]	; (800683c <vTaskStartScheduler+0xb4>)
 80067f8:	2201      	movs	r2, #1
 80067fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80067fc:	4b10      	ldr	r3, [pc, #64]	; (8006840 <vTaskStartScheduler+0xb8>)
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006802:	f000 fc5d 	bl	80070c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006806:	e00d      	b.n	8006824 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680e:	d109      	bne.n	8006824 <vTaskStartScheduler+0x9c>
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	e7fe      	b.n	8006822 <vTaskStartScheduler+0x9a>
}
 8006824:	bf00      	nop
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	08009b1c 	.word	0x08009b1c
 8006830:	08006c81 	.word	0x08006c81
 8006834:	200004a8 	.word	0x200004a8
 8006838:	200004a4 	.word	0x200004a4
 800683c:	20000490 	.word	0x20000490
 8006840:	20000488 	.word	0x20000488

08006844 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006848:	4b04      	ldr	r3, [pc, #16]	; (800685c <vTaskSuspendAll+0x18>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3301      	adds	r3, #1
 800684e:	4a03      	ldr	r2, [pc, #12]	; (800685c <vTaskSuspendAll+0x18>)
 8006850:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006852:	bf00      	nop
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	200004ac 	.word	0x200004ac

08006860 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006866:	2300      	movs	r3, #0
 8006868:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800686a:	2300      	movs	r3, #0
 800686c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800686e:	4b41      	ldr	r3, [pc, #260]	; (8006974 <xTaskResumeAll+0x114>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d109      	bne.n	800688a <xTaskResumeAll+0x2a>
 8006876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	603b      	str	r3, [r7, #0]
 8006888:	e7fe      	b.n	8006888 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800688a:	f000 fcb7 	bl	80071fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800688e:	4b39      	ldr	r3, [pc, #228]	; (8006974 <xTaskResumeAll+0x114>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3b01      	subs	r3, #1
 8006894:	4a37      	ldr	r2, [pc, #220]	; (8006974 <xTaskResumeAll+0x114>)
 8006896:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006898:	4b36      	ldr	r3, [pc, #216]	; (8006974 <xTaskResumeAll+0x114>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d161      	bne.n	8006964 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068a0:	4b35      	ldr	r3, [pc, #212]	; (8006978 <xTaskResumeAll+0x118>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d05d      	beq.n	8006964 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068a8:	e02e      	b.n	8006908 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068aa:	4b34      	ldr	r3, [pc, #208]	; (800697c <xTaskResumeAll+0x11c>)
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3318      	adds	r3, #24
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7ff fb29 	bl	8005f0e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3304      	adds	r3, #4
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7ff fb24 	bl	8005f0e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ca:	2201      	movs	r2, #1
 80068cc:	409a      	lsls	r2, r3
 80068ce:	4b2c      	ldr	r3, [pc, #176]	; (8006980 <xTaskResumeAll+0x120>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	4a2a      	ldr	r2, [pc, #168]	; (8006980 <xTaskResumeAll+0x120>)
 80068d6:	6013      	str	r3, [r2, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068dc:	4613      	mov	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4a27      	ldr	r2, [pc, #156]	; (8006984 <xTaskResumeAll+0x124>)
 80068e6:	441a      	add	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3304      	adds	r3, #4
 80068ec:	4619      	mov	r1, r3
 80068ee:	4610      	mov	r0, r2
 80068f0:	f7ff fab0 	bl	8005e54 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f8:	4b23      	ldr	r3, [pc, #140]	; (8006988 <xTaskResumeAll+0x128>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fe:	429a      	cmp	r2, r3
 8006900:	d302      	bcc.n	8006908 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006902:	4b22      	ldr	r3, [pc, #136]	; (800698c <xTaskResumeAll+0x12c>)
 8006904:	2201      	movs	r2, #1
 8006906:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006908:	4b1c      	ldr	r3, [pc, #112]	; (800697c <xTaskResumeAll+0x11c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1cc      	bne.n	80068aa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006916:	f000 fa41 	bl	8006d9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800691a:	4b1d      	ldr	r3, [pc, #116]	; (8006990 <xTaskResumeAll+0x130>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d010      	beq.n	8006948 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006926:	f000 f837 	bl	8006998 <xTaskIncrementTick>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006930:	4b16      	ldr	r3, [pc, #88]	; (800698c <xTaskResumeAll+0x12c>)
 8006932:	2201      	movs	r2, #1
 8006934:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	3b01      	subs	r3, #1
 800693a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1f1      	bne.n	8006926 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006942:	4b13      	ldr	r3, [pc, #76]	; (8006990 <xTaskResumeAll+0x130>)
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006948:	4b10      	ldr	r3, [pc, #64]	; (800698c <xTaskResumeAll+0x12c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d009      	beq.n	8006964 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006950:	2301      	movs	r3, #1
 8006952:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006954:	4b0f      	ldr	r3, [pc, #60]	; (8006994 <xTaskResumeAll+0x134>)
 8006956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006964:	f000 fc78 	bl	8007258 <vPortExitCritical>

	return xAlreadyYielded;
 8006968:	68bb      	ldr	r3, [r7, #8]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	200004ac 	.word	0x200004ac
 8006978:	20000484 	.word	0x20000484
 800697c:	20000444 	.word	0x20000444
 8006980:	2000048c 	.word	0x2000048c
 8006984:	20000388 	.word	0x20000388
 8006988:	20000384 	.word	0x20000384
 800698c:	20000498 	.word	0x20000498
 8006990:	20000494 	.word	0x20000494
 8006994:	e000ed04 	.word	0xe000ed04

08006998 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800699e:	2300      	movs	r3, #0
 80069a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069a2:	4b4e      	ldr	r3, [pc, #312]	; (8006adc <xTaskIncrementTick+0x144>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f040 8087 	bne.w	8006aba <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80069ac:	4b4c      	ldr	r3, [pc, #304]	; (8006ae0 <xTaskIncrementTick+0x148>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3301      	adds	r3, #1
 80069b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80069b4:	4a4a      	ldr	r2, [pc, #296]	; (8006ae0 <xTaskIncrementTick+0x148>)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d11f      	bne.n	8006a00 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80069c0:	4b48      	ldr	r3, [pc, #288]	; (8006ae4 <xTaskIncrementTick+0x14c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d009      	beq.n	80069de <xTaskIncrementTick+0x46>
 80069ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	603b      	str	r3, [r7, #0]
 80069dc:	e7fe      	b.n	80069dc <xTaskIncrementTick+0x44>
 80069de:	4b41      	ldr	r3, [pc, #260]	; (8006ae4 <xTaskIncrementTick+0x14c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	4b40      	ldr	r3, [pc, #256]	; (8006ae8 <xTaskIncrementTick+0x150>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a3e      	ldr	r2, [pc, #248]	; (8006ae4 <xTaskIncrementTick+0x14c>)
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	4a3e      	ldr	r2, [pc, #248]	; (8006ae8 <xTaskIncrementTick+0x150>)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6013      	str	r3, [r2, #0]
 80069f2:	4b3e      	ldr	r3, [pc, #248]	; (8006aec <xTaskIncrementTick+0x154>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3301      	adds	r3, #1
 80069f8:	4a3c      	ldr	r2, [pc, #240]	; (8006aec <xTaskIncrementTick+0x154>)
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	f000 f9ce 	bl	8006d9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a00:	4b3b      	ldr	r3, [pc, #236]	; (8006af0 <xTaskIncrementTick+0x158>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d348      	bcc.n	8006a9c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a0a:	4b36      	ldr	r3, [pc, #216]	; (8006ae4 <xTaskIncrementTick+0x14c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d104      	bne.n	8006a1e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a14:	4b36      	ldr	r3, [pc, #216]	; (8006af0 <xTaskIncrementTick+0x158>)
 8006a16:	f04f 32ff 	mov.w	r2, #4294967295
 8006a1a:	601a      	str	r2, [r3, #0]
					break;
 8006a1c:	e03e      	b.n	8006a9c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a1e:	4b31      	ldr	r3, [pc, #196]	; (8006ae4 <xTaskIncrementTick+0x14c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d203      	bcs.n	8006a3e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a36:	4a2e      	ldr	r2, [pc, #184]	; (8006af0 <xTaskIncrementTick+0x158>)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a3c:	e02e      	b.n	8006a9c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	3304      	adds	r3, #4
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7ff fa63 	bl	8005f0e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d004      	beq.n	8006a5a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	3318      	adds	r3, #24
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7ff fa5a 	bl	8005f0e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5e:	2201      	movs	r2, #1
 8006a60:	409a      	lsls	r2, r3
 8006a62:	4b24      	ldr	r3, [pc, #144]	; (8006af4 <xTaskIncrementTick+0x15c>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	4a22      	ldr	r2, [pc, #136]	; (8006af4 <xTaskIncrementTick+0x15c>)
 8006a6a:	6013      	str	r3, [r2, #0]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a70:	4613      	mov	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4a1f      	ldr	r2, [pc, #124]	; (8006af8 <xTaskIncrementTick+0x160>)
 8006a7a:	441a      	add	r2, r3
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	3304      	adds	r3, #4
 8006a80:	4619      	mov	r1, r3
 8006a82:	4610      	mov	r0, r2
 8006a84:	f7ff f9e6 	bl	8005e54 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8c:	4b1b      	ldr	r3, [pc, #108]	; (8006afc <xTaskIncrementTick+0x164>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d3b9      	bcc.n	8006a0a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006a96:	2301      	movs	r3, #1
 8006a98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a9a:	e7b6      	b.n	8006a0a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a9c:	4b17      	ldr	r3, [pc, #92]	; (8006afc <xTaskIncrementTick+0x164>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa2:	4915      	ldr	r1, [pc, #84]	; (8006af8 <xTaskIncrementTick+0x160>)
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	440b      	add	r3, r1
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d907      	bls.n	8006ac4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	e004      	b.n	8006ac4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006aba:	4b11      	ldr	r3, [pc, #68]	; (8006b00 <xTaskIncrementTick+0x168>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	4a0f      	ldr	r2, [pc, #60]	; (8006b00 <xTaskIncrementTick+0x168>)
 8006ac2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006ac4:	4b0f      	ldr	r3, [pc, #60]	; (8006b04 <xTaskIncrementTick+0x16c>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d001      	beq.n	8006ad0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8006acc:	2301      	movs	r3, #1
 8006ace:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006ad0:	697b      	ldr	r3, [r7, #20]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3718      	adds	r7, #24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	200004ac 	.word	0x200004ac
 8006ae0:	20000488 	.word	0x20000488
 8006ae4:	2000043c 	.word	0x2000043c
 8006ae8:	20000440 	.word	0x20000440
 8006aec:	2000049c 	.word	0x2000049c
 8006af0:	200004a4 	.word	0x200004a4
 8006af4:	2000048c 	.word	0x2000048c
 8006af8:	20000388 	.word	0x20000388
 8006afc:	20000384 	.word	0x20000384
 8006b00:	20000494 	.word	0x20000494
 8006b04:	20000498 	.word	0x20000498

08006b08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b0e:	4b26      	ldr	r3, [pc, #152]	; (8006ba8 <vTaskSwitchContext+0xa0>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b16:	4b25      	ldr	r3, [pc, #148]	; (8006bac <vTaskSwitchContext+0xa4>)
 8006b18:	2201      	movs	r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b1c:	e03e      	b.n	8006b9c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006b1e:	4b23      	ldr	r3, [pc, #140]	; (8006bac <vTaskSwitchContext+0xa4>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b24:	4b22      	ldr	r3, [pc, #136]	; (8006bb0 <vTaskSwitchContext+0xa8>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	fab3 f383 	clz	r3, r3
 8006b30:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006b32:	7afb      	ldrb	r3, [r7, #11]
 8006b34:	f1c3 031f 	rsb	r3, r3, #31
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	491e      	ldr	r1, [pc, #120]	; (8006bb4 <vTaskSwitchContext+0xac>)
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	440b      	add	r3, r1
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d109      	bne.n	8006b62 <vTaskSwitchContext+0x5a>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	607b      	str	r3, [r7, #4]
 8006b60:	e7fe      	b.n	8006b60 <vTaskSwitchContext+0x58>
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	4613      	mov	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4a11      	ldr	r2, [pc, #68]	; (8006bb4 <vTaskSwitchContext+0xac>)
 8006b6e:	4413      	add	r3, r2
 8006b70:	613b      	str	r3, [r7, #16]
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	605a      	str	r2, [r3, #4]
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	3308      	adds	r3, #8
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d104      	bne.n	8006b92 <vTaskSwitchContext+0x8a>
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	605a      	str	r2, [r3, #4]
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	4a07      	ldr	r2, [pc, #28]	; (8006bb8 <vTaskSwitchContext+0xb0>)
 8006b9a:	6013      	str	r3, [r2, #0]
}
 8006b9c:	bf00      	nop
 8006b9e:	371c      	adds	r7, #28
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	200004ac 	.word	0x200004ac
 8006bac:	20000498 	.word	0x20000498
 8006bb0:	2000048c 	.word	0x2000048c
 8006bb4:	20000388 	.word	0x20000388
 8006bb8:	20000384 	.word	0x20000384

08006bbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d109      	bne.n	8006be6 <xTaskRemoveFromEventList+0x2a>
 8006bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	e7fe      	b.n	8006be4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	3318      	adds	r3, #24
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7ff f98f 	bl	8005f0e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bf0:	4b1d      	ldr	r3, [pc, #116]	; (8006c68 <xTaskRemoveFromEventList+0xac>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d11c      	bne.n	8006c32 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7ff f986 	bl	8005f0e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c06:	2201      	movs	r2, #1
 8006c08:	409a      	lsls	r2, r3
 8006c0a:	4b18      	ldr	r3, [pc, #96]	; (8006c6c <xTaskRemoveFromEventList+0xb0>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	4a16      	ldr	r2, [pc, #88]	; (8006c6c <xTaskRemoveFromEventList+0xb0>)
 8006c12:	6013      	str	r3, [r2, #0]
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c18:	4613      	mov	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4a13      	ldr	r2, [pc, #76]	; (8006c70 <xTaskRemoveFromEventList+0xb4>)
 8006c22:	441a      	add	r2, r3
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	3304      	adds	r3, #4
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	f7ff f912 	bl	8005e54 <vListInsertEnd>
 8006c30:	e005      	b.n	8006c3e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	3318      	adds	r3, #24
 8006c36:	4619      	mov	r1, r3
 8006c38:	480e      	ldr	r0, [pc, #56]	; (8006c74 <xTaskRemoveFromEventList+0xb8>)
 8006c3a:	f7ff f90b 	bl	8005e54 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c42:	4b0d      	ldr	r3, [pc, #52]	; (8006c78 <xTaskRemoveFromEventList+0xbc>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d905      	bls.n	8006c58 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c50:	4b0a      	ldr	r3, [pc, #40]	; (8006c7c <xTaskRemoveFromEventList+0xc0>)
 8006c52:	2201      	movs	r2, #1
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	e001      	b.n	8006c5c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006c5c:	697b      	ldr	r3, [r7, #20]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	200004ac 	.word	0x200004ac
 8006c6c:	2000048c 	.word	0x2000048c
 8006c70:	20000388 	.word	0x20000388
 8006c74:	20000444 	.word	0x20000444
 8006c78:	20000384 	.word	0x20000384
 8006c7c:	20000498 	.word	0x20000498

08006c80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c88:	f000 f852 	bl	8006d30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c8c:	4b06      	ldr	r3, [pc, #24]	; (8006ca8 <prvIdleTask+0x28>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d9f9      	bls.n	8006c88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c94:	4b05      	ldr	r3, [pc, #20]	; (8006cac <prvIdleTask+0x2c>)
 8006c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ca4:	e7f0      	b.n	8006c88 <prvIdleTask+0x8>
 8006ca6:	bf00      	nop
 8006ca8:	20000388 	.word	0x20000388
 8006cac:	e000ed04 	.word	0xe000ed04

08006cb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	607b      	str	r3, [r7, #4]
 8006cba:	e00c      	b.n	8006cd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4a12      	ldr	r2, [pc, #72]	; (8006d10 <prvInitialiseTaskLists+0x60>)
 8006cc8:	4413      	add	r3, r2
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7ff f895 	bl	8005dfa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	607b      	str	r3, [r7, #4]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b06      	cmp	r3, #6
 8006cda:	d9ef      	bls.n	8006cbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cdc:	480d      	ldr	r0, [pc, #52]	; (8006d14 <prvInitialiseTaskLists+0x64>)
 8006cde:	f7ff f88c 	bl	8005dfa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ce2:	480d      	ldr	r0, [pc, #52]	; (8006d18 <prvInitialiseTaskLists+0x68>)
 8006ce4:	f7ff f889 	bl	8005dfa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ce8:	480c      	ldr	r0, [pc, #48]	; (8006d1c <prvInitialiseTaskLists+0x6c>)
 8006cea:	f7ff f886 	bl	8005dfa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cee:	480c      	ldr	r0, [pc, #48]	; (8006d20 <prvInitialiseTaskLists+0x70>)
 8006cf0:	f7ff f883 	bl	8005dfa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006cf4:	480b      	ldr	r0, [pc, #44]	; (8006d24 <prvInitialiseTaskLists+0x74>)
 8006cf6:	f7ff f880 	bl	8005dfa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cfa:	4b0b      	ldr	r3, [pc, #44]	; (8006d28 <prvInitialiseTaskLists+0x78>)
 8006cfc:	4a05      	ldr	r2, [pc, #20]	; (8006d14 <prvInitialiseTaskLists+0x64>)
 8006cfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d00:	4b0a      	ldr	r3, [pc, #40]	; (8006d2c <prvInitialiseTaskLists+0x7c>)
 8006d02:	4a05      	ldr	r2, [pc, #20]	; (8006d18 <prvInitialiseTaskLists+0x68>)
 8006d04:	601a      	str	r2, [r3, #0]
}
 8006d06:	bf00      	nop
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20000388 	.word	0x20000388
 8006d14:	20000414 	.word	0x20000414
 8006d18:	20000428 	.word	0x20000428
 8006d1c:	20000444 	.word	0x20000444
 8006d20:	20000458 	.word	0x20000458
 8006d24:	20000470 	.word	0x20000470
 8006d28:	2000043c 	.word	0x2000043c
 8006d2c:	20000440 	.word	0x20000440

08006d30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d36:	e019      	b.n	8006d6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d38:	f000 fa60 	bl	80071fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d3c:	4b0f      	ldr	r3, [pc, #60]	; (8006d7c <prvCheckTasksWaitingTermination+0x4c>)
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3304      	adds	r3, #4
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff f8e0 	bl	8005f0e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d4e:	4b0c      	ldr	r3, [pc, #48]	; (8006d80 <prvCheckTasksWaitingTermination+0x50>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	4a0a      	ldr	r2, [pc, #40]	; (8006d80 <prvCheckTasksWaitingTermination+0x50>)
 8006d56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d58:	4b0a      	ldr	r3, [pc, #40]	; (8006d84 <prvCheckTasksWaitingTermination+0x54>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	4a09      	ldr	r2, [pc, #36]	; (8006d84 <prvCheckTasksWaitingTermination+0x54>)
 8006d60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d62:	f000 fa79 	bl	8007258 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f80e 	bl	8006d88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d6c:	4b05      	ldr	r3, [pc, #20]	; (8006d84 <prvCheckTasksWaitingTermination+0x54>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e1      	bne.n	8006d38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d74:	bf00      	nop
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	20000458 	.word	0x20000458
 8006d80:	20000484 	.word	0x20000484
 8006d84:	2000046c 	.word	0x2000046c

08006d88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006da2:	4b0c      	ldr	r3, [pc, #48]	; (8006dd4 <prvResetNextTaskUnblockTime+0x38>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d104      	bne.n	8006db6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006dac:	4b0a      	ldr	r3, [pc, #40]	; (8006dd8 <prvResetNextTaskUnblockTime+0x3c>)
 8006dae:	f04f 32ff 	mov.w	r2, #4294967295
 8006db2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006db4:	e008      	b.n	8006dc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006db6:	4b07      	ldr	r3, [pc, #28]	; (8006dd4 <prvResetNextTaskUnblockTime+0x38>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	4a04      	ldr	r2, [pc, #16]	; (8006dd8 <prvResetNextTaskUnblockTime+0x3c>)
 8006dc6:	6013      	str	r3, [r2, #0]
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	2000043c 	.word	0x2000043c
 8006dd8:	200004a4 	.word	0x200004a4

08006ddc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006de8:	2300      	movs	r3, #0
 8006dea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d06c      	beq.n	8006ecc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006df2:	4b39      	ldr	r3, [pc, #228]	; (8006ed8 <xTaskPriorityDisinherit+0xfc>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d009      	beq.n	8006e10 <xTaskPriorityDisinherit+0x34>
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	60fb      	str	r3, [r7, #12]
 8006e0e:	e7fe      	b.n	8006e0e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d109      	bne.n	8006e2c <xTaskPriorityDisinherit+0x50>
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	60bb      	str	r3, [r7, #8]
 8006e2a:	e7fe      	b.n	8006e2a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e30:	1e5a      	subs	r2, r3, #1
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d044      	beq.n	8006ecc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d140      	bne.n	8006ecc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7ff f85d 	bl	8005f0e <uxListRemove>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d115      	bne.n	8006e86 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e5e:	491f      	ldr	r1, [pc, #124]	; (8006edc <xTaskPriorityDisinherit+0x100>)
 8006e60:	4613      	mov	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	440b      	add	r3, r1
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10a      	bne.n	8006e86 <xTaskPriorityDisinherit+0xaa>
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e74:	2201      	movs	r2, #1
 8006e76:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7a:	43da      	mvns	r2, r3
 8006e7c:	4b18      	ldr	r3, [pc, #96]	; (8006ee0 <xTaskPriorityDisinherit+0x104>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4013      	ands	r3, r2
 8006e82:	4a17      	ldr	r2, [pc, #92]	; (8006ee0 <xTaskPriorityDisinherit+0x104>)
 8006e84:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e92:	f1c3 0207 	rsb	r2, r3, #7
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	409a      	lsls	r2, r3
 8006ea2:	4b0f      	ldr	r3, [pc, #60]	; (8006ee0 <xTaskPriorityDisinherit+0x104>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	4a0d      	ldr	r2, [pc, #52]	; (8006ee0 <xTaskPriorityDisinherit+0x104>)
 8006eaa:	6013      	str	r3, [r2, #0]
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4a08      	ldr	r2, [pc, #32]	; (8006edc <xTaskPriorityDisinherit+0x100>)
 8006eba:	441a      	add	r2, r3
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	3304      	adds	r3, #4
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	f7fe ffc6 	bl	8005e54 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ecc:	697b      	ldr	r3, [r7, #20]
	}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20000384 	.word	0x20000384
 8006edc:	20000388 	.word	0x20000388
 8006ee0:	2000048c 	.word	0x2000048c

08006ee4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006eee:	4b29      	ldr	r3, [pc, #164]	; (8006f94 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ef4:	4b28      	ldr	r3, [pc, #160]	; (8006f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3304      	adds	r3, #4
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff f807 	bl	8005f0e <uxListRemove>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10b      	bne.n	8006f1e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006f06:	4b24      	ldr	r3, [pc, #144]	; (8006f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f12:	43da      	mvns	r2, r3
 8006f14:	4b21      	ldr	r3, [pc, #132]	; (8006f9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4013      	ands	r3, r2
 8006f1a:	4a20      	ldr	r2, [pc, #128]	; (8006f9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f1c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f24:	d10a      	bne.n	8006f3c <prvAddCurrentTaskToDelayedList+0x58>
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d007      	beq.n	8006f3c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f2c:	4b1a      	ldr	r3, [pc, #104]	; (8006f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3304      	adds	r3, #4
 8006f32:	4619      	mov	r1, r3
 8006f34:	481a      	ldr	r0, [pc, #104]	; (8006fa0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006f36:	f7fe ff8d 	bl	8005e54 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f3a:	e026      	b.n	8006f8a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4413      	add	r3, r2
 8006f42:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f44:	4b14      	ldr	r3, [pc, #80]	; (8006f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d209      	bcs.n	8006f68 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f54:	4b13      	ldr	r3, [pc, #76]	; (8006fa4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	4b0f      	ldr	r3, [pc, #60]	; (8006f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4610      	mov	r0, r2
 8006f62:	f7fe ff9b 	bl	8005e9c <vListInsert>
}
 8006f66:	e010      	b.n	8006f8a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f68:	4b0f      	ldr	r3, [pc, #60]	; (8006fa8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	4b0a      	ldr	r3, [pc, #40]	; (8006f98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3304      	adds	r3, #4
 8006f72:	4619      	mov	r1, r3
 8006f74:	4610      	mov	r0, r2
 8006f76:	f7fe ff91 	bl	8005e9c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f7a:	4b0c      	ldr	r3, [pc, #48]	; (8006fac <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d202      	bcs.n	8006f8a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006f84:	4a09      	ldr	r2, [pc, #36]	; (8006fac <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	6013      	str	r3, [r2, #0]
}
 8006f8a:	bf00      	nop
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	20000488 	.word	0x20000488
 8006f98:	20000384 	.word	0x20000384
 8006f9c:	2000048c 	.word	0x2000048c
 8006fa0:	20000470 	.word	0x20000470
 8006fa4:	20000440 	.word	0x20000440
 8006fa8:	2000043c 	.word	0x2000043c
 8006fac:	200004a4 	.word	0x200004a4

08006fb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3b04      	subs	r3, #4
 8006fc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3b04      	subs	r3, #4
 8006fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	f023 0201 	bic.w	r2, r3, #1
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3b04      	subs	r3, #4
 8006fde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fe0:	4a0c      	ldr	r2, [pc, #48]	; (8007014 <pxPortInitialiseStack+0x64>)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3b14      	subs	r3, #20
 8006fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3b04      	subs	r3, #4
 8006ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f06f 0202 	mvn.w	r2, #2
 8006ffe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	3b20      	subs	r3, #32
 8007004:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007006:	68fb      	ldr	r3, [r7, #12]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	08007019 	.word	0x08007019

08007018 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800701e:	2300      	movs	r3, #0
 8007020:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007022:	4b11      	ldr	r3, [pc, #68]	; (8007068 <prvTaskExitError+0x50>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702a:	d009      	beq.n	8007040 <prvTaskExitError+0x28>
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	60fb      	str	r3, [r7, #12]
 800703e:	e7fe      	b.n	800703e <prvTaskExitError+0x26>
 8007040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007052:	bf00      	nop
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0fc      	beq.n	8007054 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800705a:	bf00      	nop
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	2000000c 	.word	0x2000000c
 800706c:	00000000 	.word	0x00000000

08007070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007070:	4b07      	ldr	r3, [pc, #28]	; (8007090 <pxCurrentTCBConst2>)
 8007072:	6819      	ldr	r1, [r3, #0]
 8007074:	6808      	ldr	r0, [r1, #0]
 8007076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707a:	f380 8809 	msr	PSP, r0
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f04f 0000 	mov.w	r0, #0
 8007086:	f380 8811 	msr	BASEPRI, r0
 800708a:	4770      	bx	lr
 800708c:	f3af 8000 	nop.w

08007090 <pxCurrentTCBConst2>:
 8007090:	20000384 	.word	0x20000384
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007094:	bf00      	nop
 8007096:	bf00      	nop

08007098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007098:	4808      	ldr	r0, [pc, #32]	; (80070bc <prvPortStartFirstTask+0x24>)
 800709a:	6800      	ldr	r0, [r0, #0]
 800709c:	6800      	ldr	r0, [r0, #0]
 800709e:	f380 8808 	msr	MSP, r0
 80070a2:	f04f 0000 	mov.w	r0, #0
 80070a6:	f380 8814 	msr	CONTROL, r0
 80070aa:	b662      	cpsie	i
 80070ac:	b661      	cpsie	f
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	df00      	svc	0
 80070b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070ba:	bf00      	nop
 80070bc:	e000ed08 	.word	0xe000ed08

080070c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070c6:	4b44      	ldr	r3, [pc, #272]	; (80071d8 <xPortStartScheduler+0x118>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a44      	ldr	r2, [pc, #272]	; (80071dc <xPortStartScheduler+0x11c>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d109      	bne.n	80070e4 <xPortStartScheduler+0x24>
 80070d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	613b      	str	r3, [r7, #16]
 80070e2:	e7fe      	b.n	80070e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070e4:	4b3c      	ldr	r3, [pc, #240]	; (80071d8 <xPortStartScheduler+0x118>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a3d      	ldr	r2, [pc, #244]	; (80071e0 <xPortStartScheduler+0x120>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d109      	bne.n	8007102 <xPortStartScheduler+0x42>
 80070ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	e7fe      	b.n	8007100 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007102:	4b38      	ldr	r3, [pc, #224]	; (80071e4 <xPortStartScheduler+0x124>)
 8007104:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	b2db      	uxtb	r3, r3
 800710c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	22ff      	movs	r2, #255	; 0xff
 8007112:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	b2db      	uxtb	r3, r3
 800711a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800711c:	78fb      	ldrb	r3, [r7, #3]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007124:	b2da      	uxtb	r2, r3
 8007126:	4b30      	ldr	r3, [pc, #192]	; (80071e8 <xPortStartScheduler+0x128>)
 8007128:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800712a:	4b30      	ldr	r3, [pc, #192]	; (80071ec <xPortStartScheduler+0x12c>)
 800712c:	2207      	movs	r2, #7
 800712e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007130:	e009      	b.n	8007146 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007132:	4b2e      	ldr	r3, [pc, #184]	; (80071ec <xPortStartScheduler+0x12c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3b01      	subs	r3, #1
 8007138:	4a2c      	ldr	r2, [pc, #176]	; (80071ec <xPortStartScheduler+0x12c>)
 800713a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800713c:	78fb      	ldrb	r3, [r7, #3]
 800713e:	b2db      	uxtb	r3, r3
 8007140:	005b      	lsls	r3, r3, #1
 8007142:	b2db      	uxtb	r3, r3
 8007144:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007146:	78fb      	ldrb	r3, [r7, #3]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800714e:	2b80      	cmp	r3, #128	; 0x80
 8007150:	d0ef      	beq.n	8007132 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007152:	4b26      	ldr	r3, [pc, #152]	; (80071ec <xPortStartScheduler+0x12c>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f1c3 0307 	rsb	r3, r3, #7
 800715a:	2b04      	cmp	r3, #4
 800715c:	d009      	beq.n	8007172 <xPortStartScheduler+0xb2>
 800715e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	60bb      	str	r3, [r7, #8]
 8007170:	e7fe      	b.n	8007170 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007172:	4b1e      	ldr	r3, [pc, #120]	; (80071ec <xPortStartScheduler+0x12c>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	021b      	lsls	r3, r3, #8
 8007178:	4a1c      	ldr	r2, [pc, #112]	; (80071ec <xPortStartScheduler+0x12c>)
 800717a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800717c:	4b1b      	ldr	r3, [pc, #108]	; (80071ec <xPortStartScheduler+0x12c>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007184:	4a19      	ldr	r2, [pc, #100]	; (80071ec <xPortStartScheduler+0x12c>)
 8007186:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	b2da      	uxtb	r2, r3
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007190:	4b17      	ldr	r3, [pc, #92]	; (80071f0 <xPortStartScheduler+0x130>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a16      	ldr	r2, [pc, #88]	; (80071f0 <xPortStartScheduler+0x130>)
 8007196:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800719a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800719c:	4b14      	ldr	r3, [pc, #80]	; (80071f0 <xPortStartScheduler+0x130>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a13      	ldr	r2, [pc, #76]	; (80071f0 <xPortStartScheduler+0x130>)
 80071a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80071a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071a8:	f000 f8d6 	bl	8007358 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071ac:	4b11      	ldr	r3, [pc, #68]	; (80071f4 <xPortStartScheduler+0x134>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071b2:	f000 f8f5 	bl	80073a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071b6:	4b10      	ldr	r3, [pc, #64]	; (80071f8 <xPortStartScheduler+0x138>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a0f      	ldr	r2, [pc, #60]	; (80071f8 <xPortStartScheduler+0x138>)
 80071bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071c2:	f7ff ff69 	bl	8007098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071c6:	f7ff fc9f 	bl	8006b08 <vTaskSwitchContext>
	prvTaskExitError();
 80071ca:	f7ff ff25 	bl	8007018 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3718      	adds	r7, #24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	e000ed00 	.word	0xe000ed00
 80071dc:	410fc271 	.word	0x410fc271
 80071e0:	410fc270 	.word	0x410fc270
 80071e4:	e000e400 	.word	0xe000e400
 80071e8:	200004b0 	.word	0x200004b0
 80071ec:	200004b4 	.word	0x200004b4
 80071f0:	e000ed20 	.word	0xe000ed20
 80071f4:	2000000c 	.word	0x2000000c
 80071f8:	e000ef34 	.word	0xe000ef34

080071fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007214:	4b0e      	ldr	r3, [pc, #56]	; (8007250 <vPortEnterCritical+0x54>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3301      	adds	r3, #1
 800721a:	4a0d      	ldr	r2, [pc, #52]	; (8007250 <vPortEnterCritical+0x54>)
 800721c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800721e:	4b0c      	ldr	r3, [pc, #48]	; (8007250 <vPortEnterCritical+0x54>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d10e      	bne.n	8007244 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007226:	4b0b      	ldr	r3, [pc, #44]	; (8007254 <vPortEnterCritical+0x58>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b00      	cmp	r3, #0
 800722e:	d009      	beq.n	8007244 <vPortEnterCritical+0x48>
 8007230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	603b      	str	r3, [r7, #0]
 8007242:	e7fe      	b.n	8007242 <vPortEnterCritical+0x46>
	}
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	2000000c 	.word	0x2000000c
 8007254:	e000ed04 	.word	0xe000ed04

08007258 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800725e:	4b11      	ldr	r3, [pc, #68]	; (80072a4 <vPortExitCritical+0x4c>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d109      	bne.n	800727a <vPortExitCritical+0x22>
 8007266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	607b      	str	r3, [r7, #4]
 8007278:	e7fe      	b.n	8007278 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800727a:	4b0a      	ldr	r3, [pc, #40]	; (80072a4 <vPortExitCritical+0x4c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	3b01      	subs	r3, #1
 8007280:	4a08      	ldr	r2, [pc, #32]	; (80072a4 <vPortExitCritical+0x4c>)
 8007282:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007284:	4b07      	ldr	r3, [pc, #28]	; (80072a4 <vPortExitCritical+0x4c>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d104      	bne.n	8007296 <vPortExitCritical+0x3e>
 800728c:	2300      	movs	r3, #0
 800728e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	2000000c 	.word	0x2000000c
	...

080072b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072b0:	f3ef 8009 	mrs	r0, PSP
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	4b15      	ldr	r3, [pc, #84]	; (8007310 <pxCurrentTCBConst>)
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	f01e 0f10 	tst.w	lr, #16
 80072c0:	bf08      	it	eq
 80072c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ca:	6010      	str	r0, [r2, #0]
 80072cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072d4:	f380 8811 	msr	BASEPRI, r0
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f7ff fc12 	bl	8006b08 <vTaskSwitchContext>
 80072e4:	f04f 0000 	mov.w	r0, #0
 80072e8:	f380 8811 	msr	BASEPRI, r0
 80072ec:	bc09      	pop	{r0, r3}
 80072ee:	6819      	ldr	r1, [r3, #0]
 80072f0:	6808      	ldr	r0, [r1, #0]
 80072f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f6:	f01e 0f10 	tst.w	lr, #16
 80072fa:	bf08      	it	eq
 80072fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007300:	f380 8809 	msr	PSP, r0
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	f3af 8000 	nop.w

08007310 <pxCurrentTCBConst>:
 8007310:	20000384 	.word	0x20000384
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007314:	bf00      	nop
 8007316:	bf00      	nop

08007318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007330:	f7ff fb32 	bl	8006998 <xTaskIncrementTick>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800733a:	4b06      	ldr	r3, [pc, #24]	; (8007354 <SysTick_Handler+0x3c>)
 800733c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007340:	601a      	str	r2, [r3, #0]
 8007342:	2300      	movs	r3, #0
 8007344:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800734c:	bf00      	nop
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	e000ed04 	.word	0xe000ed04

08007358 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007358:	b480      	push	{r7}
 800735a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800735c:	4b0b      	ldr	r3, [pc, #44]	; (800738c <vPortSetupTimerInterrupt+0x34>)
 800735e:	2200      	movs	r2, #0
 8007360:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007362:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <vPortSetupTimerInterrupt+0x38>)
 8007364:	2200      	movs	r2, #0
 8007366:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007368:	4b0a      	ldr	r3, [pc, #40]	; (8007394 <vPortSetupTimerInterrupt+0x3c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a0a      	ldr	r2, [pc, #40]	; (8007398 <vPortSetupTimerInterrupt+0x40>)
 800736e:	fba2 2303 	umull	r2, r3, r2, r3
 8007372:	099b      	lsrs	r3, r3, #6
 8007374:	4a09      	ldr	r2, [pc, #36]	; (800739c <vPortSetupTimerInterrupt+0x44>)
 8007376:	3b01      	subs	r3, #1
 8007378:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800737a:	4b04      	ldr	r3, [pc, #16]	; (800738c <vPortSetupTimerInterrupt+0x34>)
 800737c:	2207      	movs	r2, #7
 800737e:	601a      	str	r2, [r3, #0]
}
 8007380:	bf00      	nop
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	e000e010 	.word	0xe000e010
 8007390:	e000e018 	.word	0xe000e018
 8007394:	20000000 	.word	0x20000000
 8007398:	10624dd3 	.word	0x10624dd3
 800739c:	e000e014 	.word	0xe000e014

080073a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80073b0 <vPortEnableVFP+0x10>
 80073a4:	6801      	ldr	r1, [r0, #0]
 80073a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80073aa:	6001      	str	r1, [r0, #0]
 80073ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073ae:	bf00      	nop
 80073b0:	e000ed88 	.word	0xe000ed88

080073b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80073ba:	f3ef 8305 	mrs	r3, IPSR
 80073be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2b0f      	cmp	r3, #15
 80073c4:	d913      	bls.n	80073ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073c6:	4a16      	ldr	r2, [pc, #88]	; (8007420 <vPortValidateInterruptPriority+0x6c>)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	4413      	add	r3, r2
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073d0:	4b14      	ldr	r3, [pc, #80]	; (8007424 <vPortValidateInterruptPriority+0x70>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	7afa      	ldrb	r2, [r7, #11]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d209      	bcs.n	80073ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	607b      	str	r3, [r7, #4]
 80073ec:	e7fe      	b.n	80073ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073ee:	4b0e      	ldr	r3, [pc, #56]	; (8007428 <vPortValidateInterruptPriority+0x74>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80073f6:	4b0d      	ldr	r3, [pc, #52]	; (800742c <vPortValidateInterruptPriority+0x78>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d909      	bls.n	8007412 <vPortValidateInterruptPriority+0x5e>
 80073fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	603b      	str	r3, [r7, #0]
 8007410:	e7fe      	b.n	8007410 <vPortValidateInterruptPriority+0x5c>
	}
 8007412:	bf00      	nop
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	e000e3f0 	.word	0xe000e3f0
 8007424:	200004b0 	.word	0x200004b0
 8007428:	e000ed0c 	.word	0xe000ed0c
 800742c:	200004b4 	.word	0x200004b4

08007430 <__errno>:
 8007430:	4b01      	ldr	r3, [pc, #4]	; (8007438 <__errno+0x8>)
 8007432:	6818      	ldr	r0, [r3, #0]
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	20000010 	.word	0x20000010

0800743c <__libc_init_array>:
 800743c:	b570      	push	{r4, r5, r6, lr}
 800743e:	4e0d      	ldr	r6, [pc, #52]	; (8007474 <__libc_init_array+0x38>)
 8007440:	4c0d      	ldr	r4, [pc, #52]	; (8007478 <__libc_init_array+0x3c>)
 8007442:	1ba4      	subs	r4, r4, r6
 8007444:	10a4      	asrs	r4, r4, #2
 8007446:	2500      	movs	r5, #0
 8007448:	42a5      	cmp	r5, r4
 800744a:	d109      	bne.n	8007460 <__libc_init_array+0x24>
 800744c:	4e0b      	ldr	r6, [pc, #44]	; (800747c <__libc_init_array+0x40>)
 800744e:	4c0c      	ldr	r4, [pc, #48]	; (8007480 <__libc_init_array+0x44>)
 8007450:	f002 fb00 	bl	8009a54 <_init>
 8007454:	1ba4      	subs	r4, r4, r6
 8007456:	10a4      	asrs	r4, r4, #2
 8007458:	2500      	movs	r5, #0
 800745a:	42a5      	cmp	r5, r4
 800745c:	d105      	bne.n	800746a <__libc_init_array+0x2e>
 800745e:	bd70      	pop	{r4, r5, r6, pc}
 8007460:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007464:	4798      	blx	r3
 8007466:	3501      	adds	r5, #1
 8007468:	e7ee      	b.n	8007448 <__libc_init_array+0xc>
 800746a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800746e:	4798      	blx	r3
 8007470:	3501      	adds	r5, #1
 8007472:	e7f2      	b.n	800745a <__libc_init_array+0x1e>
 8007474:	08009d98 	.word	0x08009d98
 8007478:	08009d98 	.word	0x08009d98
 800747c:	08009d98 	.word	0x08009d98
 8007480:	08009d9c 	.word	0x08009d9c

08007484 <memcpy>:
 8007484:	b510      	push	{r4, lr}
 8007486:	1e43      	subs	r3, r0, #1
 8007488:	440a      	add	r2, r1
 800748a:	4291      	cmp	r1, r2
 800748c:	d100      	bne.n	8007490 <memcpy+0xc>
 800748e:	bd10      	pop	{r4, pc}
 8007490:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007494:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007498:	e7f7      	b.n	800748a <memcpy+0x6>

0800749a <memset>:
 800749a:	4402      	add	r2, r0
 800749c:	4603      	mov	r3, r0
 800749e:	4293      	cmp	r3, r2
 80074a0:	d100      	bne.n	80074a4 <memset+0xa>
 80074a2:	4770      	bx	lr
 80074a4:	f803 1b01 	strb.w	r1, [r3], #1
 80074a8:	e7f9      	b.n	800749e <memset+0x4>
 80074aa:	0000      	movs	r0, r0
 80074ac:	0000      	movs	r0, r0
	...

080074b0 <cos>:
 80074b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074b2:	ec51 0b10 	vmov	r0, r1, d0
 80074b6:	4a1e      	ldr	r2, [pc, #120]	; (8007530 <cos+0x80>)
 80074b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80074bc:	4293      	cmp	r3, r2
 80074be:	dc06      	bgt.n	80074ce <cos+0x1e>
 80074c0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8007528 <cos+0x78>
 80074c4:	f001 fc58 	bl	8008d78 <__kernel_cos>
 80074c8:	ec51 0b10 	vmov	r0, r1, d0
 80074cc:	e007      	b.n	80074de <cos+0x2e>
 80074ce:	4a19      	ldr	r2, [pc, #100]	; (8007534 <cos+0x84>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	dd09      	ble.n	80074e8 <cos+0x38>
 80074d4:	ee10 2a10 	vmov	r2, s0
 80074d8:	460b      	mov	r3, r1
 80074da:	f7f8 fe7d 	bl	80001d8 <__aeabi_dsub>
 80074de:	ec41 0b10 	vmov	d0, r0, r1
 80074e2:	b005      	add	sp, #20
 80074e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80074e8:	4668      	mov	r0, sp
 80074ea:	f001 f9a1 	bl	8008830 <__ieee754_rem_pio2>
 80074ee:	f000 0003 	and.w	r0, r0, #3
 80074f2:	2801      	cmp	r0, #1
 80074f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80074f8:	ed9d 0b00 	vldr	d0, [sp]
 80074fc:	d007      	beq.n	800750e <cos+0x5e>
 80074fe:	2802      	cmp	r0, #2
 8007500:	d00e      	beq.n	8007520 <cos+0x70>
 8007502:	2800      	cmp	r0, #0
 8007504:	d0de      	beq.n	80074c4 <cos+0x14>
 8007506:	2001      	movs	r0, #1
 8007508:	f002 f83e 	bl	8009588 <__kernel_sin>
 800750c:	e7dc      	b.n	80074c8 <cos+0x18>
 800750e:	f002 f83b 	bl	8009588 <__kernel_sin>
 8007512:	ec53 2b10 	vmov	r2, r3, d0
 8007516:	ee10 0a10 	vmov	r0, s0
 800751a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800751e:	e7de      	b.n	80074de <cos+0x2e>
 8007520:	f001 fc2a 	bl	8008d78 <__kernel_cos>
 8007524:	e7f5      	b.n	8007512 <cos+0x62>
 8007526:	bf00      	nop
	...
 8007530:	3fe921fb 	.word	0x3fe921fb
 8007534:	7fefffff 	.word	0x7fefffff

08007538 <sin>:
 8007538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800753a:	ec51 0b10 	vmov	r0, r1, d0
 800753e:	4a20      	ldr	r2, [pc, #128]	; (80075c0 <sin+0x88>)
 8007540:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007544:	4293      	cmp	r3, r2
 8007546:	dc07      	bgt.n	8007558 <sin+0x20>
 8007548:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80075b8 <sin+0x80>
 800754c:	2000      	movs	r0, #0
 800754e:	f002 f81b 	bl	8009588 <__kernel_sin>
 8007552:	ec51 0b10 	vmov	r0, r1, d0
 8007556:	e007      	b.n	8007568 <sin+0x30>
 8007558:	4a1a      	ldr	r2, [pc, #104]	; (80075c4 <sin+0x8c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	dd09      	ble.n	8007572 <sin+0x3a>
 800755e:	ee10 2a10 	vmov	r2, s0
 8007562:	460b      	mov	r3, r1
 8007564:	f7f8 fe38 	bl	80001d8 <__aeabi_dsub>
 8007568:	ec41 0b10 	vmov	d0, r0, r1
 800756c:	b005      	add	sp, #20
 800756e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007572:	4668      	mov	r0, sp
 8007574:	f001 f95c 	bl	8008830 <__ieee754_rem_pio2>
 8007578:	f000 0003 	and.w	r0, r0, #3
 800757c:	2801      	cmp	r0, #1
 800757e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007582:	ed9d 0b00 	vldr	d0, [sp]
 8007586:	d004      	beq.n	8007592 <sin+0x5a>
 8007588:	2802      	cmp	r0, #2
 800758a:	d005      	beq.n	8007598 <sin+0x60>
 800758c:	b970      	cbnz	r0, 80075ac <sin+0x74>
 800758e:	2001      	movs	r0, #1
 8007590:	e7dd      	b.n	800754e <sin+0x16>
 8007592:	f001 fbf1 	bl	8008d78 <__kernel_cos>
 8007596:	e7dc      	b.n	8007552 <sin+0x1a>
 8007598:	2001      	movs	r0, #1
 800759a:	f001 fff5 	bl	8009588 <__kernel_sin>
 800759e:	ec53 2b10 	vmov	r2, r3, d0
 80075a2:	ee10 0a10 	vmov	r0, s0
 80075a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80075aa:	e7dd      	b.n	8007568 <sin+0x30>
 80075ac:	f001 fbe4 	bl	8008d78 <__kernel_cos>
 80075b0:	e7f5      	b.n	800759e <sin+0x66>
 80075b2:	bf00      	nop
 80075b4:	f3af 8000 	nop.w
	...
 80075c0:	3fe921fb 	.word	0x3fe921fb
 80075c4:	7fefffff 	.word	0x7fefffff

080075c8 <acos>:
 80075c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ca:	ed2d 8b02 	vpush	{d8}
 80075ce:	4e26      	ldr	r6, [pc, #152]	; (8007668 <acos+0xa0>)
 80075d0:	b08b      	sub	sp, #44	; 0x2c
 80075d2:	ec55 4b10 	vmov	r4, r5, d0
 80075d6:	f000 f9bf 	bl	8007958 <__ieee754_acos>
 80075da:	f996 3000 	ldrsb.w	r3, [r6]
 80075de:	eeb0 8a40 	vmov.f32	s16, s0
 80075e2:	eef0 8a60 	vmov.f32	s17, s1
 80075e6:	3301      	adds	r3, #1
 80075e8:	d036      	beq.n	8007658 <acos+0x90>
 80075ea:	4622      	mov	r2, r4
 80075ec:	462b      	mov	r3, r5
 80075ee:	4620      	mov	r0, r4
 80075f0:	4629      	mov	r1, r5
 80075f2:	f7f9 fa43 	bl	8000a7c <__aeabi_dcmpun>
 80075f6:	4607      	mov	r7, r0
 80075f8:	bb70      	cbnz	r0, 8007658 <acos+0x90>
 80075fa:	ec45 4b10 	vmov	d0, r4, r5
 80075fe:	f002 f87d 	bl	80096fc <fabs>
 8007602:	2200      	movs	r2, #0
 8007604:	4b19      	ldr	r3, [pc, #100]	; (800766c <acos+0xa4>)
 8007606:	ec51 0b10 	vmov	r0, r1, d0
 800760a:	f7f9 fa2d 	bl	8000a68 <__aeabi_dcmpgt>
 800760e:	b318      	cbz	r0, 8007658 <acos+0x90>
 8007610:	2301      	movs	r3, #1
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	4816      	ldr	r0, [pc, #88]	; (8007670 <acos+0xa8>)
 8007616:	4b17      	ldr	r3, [pc, #92]	; (8007674 <acos+0xac>)
 8007618:	9301      	str	r3, [sp, #4]
 800761a:	9708      	str	r7, [sp, #32]
 800761c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007620:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007624:	f002 f904 	bl	8009830 <nan>
 8007628:	f996 3000 	ldrsb.w	r3, [r6]
 800762c:	2b02      	cmp	r3, #2
 800762e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8007632:	d104      	bne.n	800763e <acos+0x76>
 8007634:	f7ff fefc 	bl	8007430 <__errno>
 8007638:	2321      	movs	r3, #33	; 0x21
 800763a:	6003      	str	r3, [r0, #0]
 800763c:	e004      	b.n	8007648 <acos+0x80>
 800763e:	4668      	mov	r0, sp
 8007640:	f002 f8f2 	bl	8009828 <matherr>
 8007644:	2800      	cmp	r0, #0
 8007646:	d0f5      	beq.n	8007634 <acos+0x6c>
 8007648:	9b08      	ldr	r3, [sp, #32]
 800764a:	b11b      	cbz	r3, 8007654 <acos+0x8c>
 800764c:	f7ff fef0 	bl	8007430 <__errno>
 8007650:	9b08      	ldr	r3, [sp, #32]
 8007652:	6003      	str	r3, [r0, #0]
 8007654:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007658:	eeb0 0a48 	vmov.f32	s0, s16
 800765c:	eef0 0a68 	vmov.f32	s1, s17
 8007660:	b00b      	add	sp, #44	; 0x2c
 8007662:	ecbd 8b02 	vpop	{d8}
 8007666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007668:	20000074 	.word	0x20000074
 800766c:	3ff00000 	.word	0x3ff00000
 8007670:	08009b70 	.word	0x08009b70
 8007674:	08009b6c 	.word	0x08009b6c

08007678 <pow>:
 8007678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767c:	ed2d 8b04 	vpush	{d8-d9}
 8007680:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8007954 <pow+0x2dc>
 8007684:	b08d      	sub	sp, #52	; 0x34
 8007686:	ec57 6b10 	vmov	r6, r7, d0
 800768a:	ec55 4b11 	vmov	r4, r5, d1
 800768e:	f000 fbbf 	bl	8007e10 <__ieee754_pow>
 8007692:	f999 3000 	ldrsb.w	r3, [r9]
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	3301      	adds	r3, #1
 800769a:	eeb0 8a40 	vmov.f32	s16, s0
 800769e:	eef0 8a60 	vmov.f32	s17, s1
 80076a2:	46c8      	mov	r8, r9
 80076a4:	d05f      	beq.n	8007766 <pow+0xee>
 80076a6:	4622      	mov	r2, r4
 80076a8:	462b      	mov	r3, r5
 80076aa:	4620      	mov	r0, r4
 80076ac:	4629      	mov	r1, r5
 80076ae:	f7f9 f9e5 	bl	8000a7c <__aeabi_dcmpun>
 80076b2:	4683      	mov	fp, r0
 80076b4:	2800      	cmp	r0, #0
 80076b6:	d156      	bne.n	8007766 <pow+0xee>
 80076b8:	4632      	mov	r2, r6
 80076ba:	463b      	mov	r3, r7
 80076bc:	4630      	mov	r0, r6
 80076be:	4639      	mov	r1, r7
 80076c0:	f7f9 f9dc 	bl	8000a7c <__aeabi_dcmpun>
 80076c4:	9001      	str	r0, [sp, #4]
 80076c6:	b1e8      	cbz	r0, 8007704 <pow+0x8c>
 80076c8:	2200      	movs	r2, #0
 80076ca:	2300      	movs	r3, #0
 80076cc:	4620      	mov	r0, r4
 80076ce:	4629      	mov	r1, r5
 80076d0:	f7f9 f9a2 	bl	8000a18 <__aeabi_dcmpeq>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d046      	beq.n	8007766 <pow+0xee>
 80076d8:	2301      	movs	r3, #1
 80076da:	9302      	str	r3, [sp, #8]
 80076dc:	4b96      	ldr	r3, [pc, #600]	; (8007938 <pow+0x2c0>)
 80076de:	9303      	str	r3, [sp, #12]
 80076e0:	4b96      	ldr	r3, [pc, #600]	; (800793c <pow+0x2c4>)
 80076e2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80076e6:	2200      	movs	r2, #0
 80076e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80076ec:	9b00      	ldr	r3, [sp, #0]
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80076f4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80076f8:	d033      	beq.n	8007762 <pow+0xea>
 80076fa:	a802      	add	r0, sp, #8
 80076fc:	f002 f894 	bl	8009828 <matherr>
 8007700:	bb48      	cbnz	r0, 8007756 <pow+0xde>
 8007702:	e05d      	b.n	80077c0 <pow+0x148>
 8007704:	f04f 0a00 	mov.w	sl, #0
 8007708:	f04f 0b00 	mov.w	fp, #0
 800770c:	4652      	mov	r2, sl
 800770e:	465b      	mov	r3, fp
 8007710:	4630      	mov	r0, r6
 8007712:	4639      	mov	r1, r7
 8007714:	f7f9 f980 	bl	8000a18 <__aeabi_dcmpeq>
 8007718:	ec4b ab19 	vmov	d9, sl, fp
 800771c:	2800      	cmp	r0, #0
 800771e:	d054      	beq.n	80077ca <pow+0x152>
 8007720:	4652      	mov	r2, sl
 8007722:	465b      	mov	r3, fp
 8007724:	4620      	mov	r0, r4
 8007726:	4629      	mov	r1, r5
 8007728:	f7f9 f976 	bl	8000a18 <__aeabi_dcmpeq>
 800772c:	4680      	mov	r8, r0
 800772e:	b318      	cbz	r0, 8007778 <pow+0x100>
 8007730:	2301      	movs	r3, #1
 8007732:	9302      	str	r3, [sp, #8]
 8007734:	4b80      	ldr	r3, [pc, #512]	; (8007938 <pow+0x2c0>)
 8007736:	9303      	str	r3, [sp, #12]
 8007738:	9b01      	ldr	r3, [sp, #4]
 800773a:	930a      	str	r3, [sp, #40]	; 0x28
 800773c:	9b00      	ldr	r3, [sp, #0]
 800773e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007742:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007746:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0d5      	beq.n	80076fa <pow+0x82>
 800774e:	4b7b      	ldr	r3, [pc, #492]	; (800793c <pow+0x2c4>)
 8007750:	2200      	movs	r2, #0
 8007752:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007758:	b11b      	cbz	r3, 8007762 <pow+0xea>
 800775a:	f7ff fe69 	bl	8007430 <__errno>
 800775e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007760:	6003      	str	r3, [r0, #0]
 8007762:	ed9d 8b08 	vldr	d8, [sp, #32]
 8007766:	eeb0 0a48 	vmov.f32	s0, s16
 800776a:	eef0 0a68 	vmov.f32	s1, s17
 800776e:	b00d      	add	sp, #52	; 0x34
 8007770:	ecbd 8b04 	vpop	{d8-d9}
 8007774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007778:	ec45 4b10 	vmov	d0, r4, r5
 800777c:	f001 ffc7 	bl	800970e <finite>
 8007780:	2800      	cmp	r0, #0
 8007782:	d0f0      	beq.n	8007766 <pow+0xee>
 8007784:	4652      	mov	r2, sl
 8007786:	465b      	mov	r3, fp
 8007788:	4620      	mov	r0, r4
 800778a:	4629      	mov	r1, r5
 800778c:	f7f9 f94e 	bl	8000a2c <__aeabi_dcmplt>
 8007790:	2800      	cmp	r0, #0
 8007792:	d0e8      	beq.n	8007766 <pow+0xee>
 8007794:	2301      	movs	r3, #1
 8007796:	9302      	str	r3, [sp, #8]
 8007798:	4b67      	ldr	r3, [pc, #412]	; (8007938 <pow+0x2c0>)
 800779a:	9303      	str	r3, [sp, #12]
 800779c:	f999 3000 	ldrsb.w	r3, [r9]
 80077a0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80077a4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80077a8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80077ac:	b913      	cbnz	r3, 80077b4 <pow+0x13c>
 80077ae:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80077b2:	e7a2      	b.n	80076fa <pow+0x82>
 80077b4:	4962      	ldr	r1, [pc, #392]	; (8007940 <pow+0x2c8>)
 80077b6:	2000      	movs	r0, #0
 80077b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d19c      	bne.n	80076fa <pow+0x82>
 80077c0:	f7ff fe36 	bl	8007430 <__errno>
 80077c4:	2321      	movs	r3, #33	; 0x21
 80077c6:	6003      	str	r3, [r0, #0]
 80077c8:	e7c5      	b.n	8007756 <pow+0xde>
 80077ca:	eeb0 0a48 	vmov.f32	s0, s16
 80077ce:	eef0 0a68 	vmov.f32	s1, s17
 80077d2:	f001 ff9c 	bl	800970e <finite>
 80077d6:	9000      	str	r0, [sp, #0]
 80077d8:	2800      	cmp	r0, #0
 80077da:	f040 8081 	bne.w	80078e0 <pow+0x268>
 80077de:	ec47 6b10 	vmov	d0, r6, r7
 80077e2:	f001 ff94 	bl	800970e <finite>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d07a      	beq.n	80078e0 <pow+0x268>
 80077ea:	ec45 4b10 	vmov	d0, r4, r5
 80077ee:	f001 ff8e 	bl	800970e <finite>
 80077f2:	2800      	cmp	r0, #0
 80077f4:	d074      	beq.n	80078e0 <pow+0x268>
 80077f6:	ec53 2b18 	vmov	r2, r3, d8
 80077fa:	ee18 0a10 	vmov	r0, s16
 80077fe:	4619      	mov	r1, r3
 8007800:	f7f9 f93c 	bl	8000a7c <__aeabi_dcmpun>
 8007804:	f999 9000 	ldrsb.w	r9, [r9]
 8007808:	4b4b      	ldr	r3, [pc, #300]	; (8007938 <pow+0x2c0>)
 800780a:	b1b0      	cbz	r0, 800783a <pow+0x1c2>
 800780c:	2201      	movs	r2, #1
 800780e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007812:	9b00      	ldr	r3, [sp, #0]
 8007814:	930a      	str	r3, [sp, #40]	; 0x28
 8007816:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800781a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800781e:	f1b9 0f00 	cmp.w	r9, #0
 8007822:	d0c4      	beq.n	80077ae <pow+0x136>
 8007824:	4652      	mov	r2, sl
 8007826:	465b      	mov	r3, fp
 8007828:	4650      	mov	r0, sl
 800782a:	4659      	mov	r1, fp
 800782c:	f7f8 ffb6 	bl	800079c <__aeabi_ddiv>
 8007830:	f1b9 0f02 	cmp.w	r9, #2
 8007834:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007838:	e7c1      	b.n	80077be <pow+0x146>
 800783a:	2203      	movs	r2, #3
 800783c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007840:	900a      	str	r0, [sp, #40]	; 0x28
 8007842:	4629      	mov	r1, r5
 8007844:	4620      	mov	r0, r4
 8007846:	2200      	movs	r2, #0
 8007848:	4b3e      	ldr	r3, [pc, #248]	; (8007944 <pow+0x2cc>)
 800784a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800784e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007852:	f7f8 fe79 	bl	8000548 <__aeabi_dmul>
 8007856:	4604      	mov	r4, r0
 8007858:	460d      	mov	r5, r1
 800785a:	f1b9 0f00 	cmp.w	r9, #0
 800785e:	d124      	bne.n	80078aa <pow+0x232>
 8007860:	4b39      	ldr	r3, [pc, #228]	; (8007948 <pow+0x2d0>)
 8007862:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007866:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800786a:	4630      	mov	r0, r6
 800786c:	4652      	mov	r2, sl
 800786e:	465b      	mov	r3, fp
 8007870:	4639      	mov	r1, r7
 8007872:	f7f9 f8db 	bl	8000a2c <__aeabi_dcmplt>
 8007876:	2800      	cmp	r0, #0
 8007878:	d056      	beq.n	8007928 <pow+0x2b0>
 800787a:	ec45 4b10 	vmov	d0, r4, r5
 800787e:	f001 ffdf 	bl	8009840 <rint>
 8007882:	4622      	mov	r2, r4
 8007884:	462b      	mov	r3, r5
 8007886:	ec51 0b10 	vmov	r0, r1, d0
 800788a:	f7f9 f8c5 	bl	8000a18 <__aeabi_dcmpeq>
 800788e:	b920      	cbnz	r0, 800789a <pow+0x222>
 8007890:	4b2e      	ldr	r3, [pc, #184]	; (800794c <pow+0x2d4>)
 8007892:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007896:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800789a:	f998 3000 	ldrsb.w	r3, [r8]
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d142      	bne.n	8007928 <pow+0x2b0>
 80078a2:	f7ff fdc5 	bl	8007430 <__errno>
 80078a6:	2322      	movs	r3, #34	; 0x22
 80078a8:	e78d      	b.n	80077c6 <pow+0x14e>
 80078aa:	4b29      	ldr	r3, [pc, #164]	; (8007950 <pow+0x2d8>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80078b2:	4630      	mov	r0, r6
 80078b4:	4652      	mov	r2, sl
 80078b6:	465b      	mov	r3, fp
 80078b8:	4639      	mov	r1, r7
 80078ba:	f7f9 f8b7 	bl	8000a2c <__aeabi_dcmplt>
 80078be:	2800      	cmp	r0, #0
 80078c0:	d0eb      	beq.n	800789a <pow+0x222>
 80078c2:	ec45 4b10 	vmov	d0, r4, r5
 80078c6:	f001 ffbb 	bl	8009840 <rint>
 80078ca:	4622      	mov	r2, r4
 80078cc:	462b      	mov	r3, r5
 80078ce:	ec51 0b10 	vmov	r0, r1, d0
 80078d2:	f7f9 f8a1 	bl	8000a18 <__aeabi_dcmpeq>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	d1df      	bne.n	800789a <pow+0x222>
 80078da:	2200      	movs	r2, #0
 80078dc:	4b18      	ldr	r3, [pc, #96]	; (8007940 <pow+0x2c8>)
 80078de:	e7da      	b.n	8007896 <pow+0x21e>
 80078e0:	2200      	movs	r2, #0
 80078e2:	2300      	movs	r3, #0
 80078e4:	ec51 0b18 	vmov	r0, r1, d8
 80078e8:	f7f9 f896 	bl	8000a18 <__aeabi_dcmpeq>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	f43f af3a 	beq.w	8007766 <pow+0xee>
 80078f2:	ec47 6b10 	vmov	d0, r6, r7
 80078f6:	f001 ff0a 	bl	800970e <finite>
 80078fa:	2800      	cmp	r0, #0
 80078fc:	f43f af33 	beq.w	8007766 <pow+0xee>
 8007900:	ec45 4b10 	vmov	d0, r4, r5
 8007904:	f001 ff03 	bl	800970e <finite>
 8007908:	2800      	cmp	r0, #0
 800790a:	f43f af2c 	beq.w	8007766 <pow+0xee>
 800790e:	2304      	movs	r3, #4
 8007910:	9302      	str	r3, [sp, #8]
 8007912:	4b09      	ldr	r3, [pc, #36]	; (8007938 <pow+0x2c0>)
 8007914:	9303      	str	r3, [sp, #12]
 8007916:	2300      	movs	r3, #0
 8007918:	930a      	str	r3, [sp, #40]	; 0x28
 800791a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800791e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007922:	ed8d 9b08 	vstr	d9, [sp, #32]
 8007926:	e7b8      	b.n	800789a <pow+0x222>
 8007928:	a802      	add	r0, sp, #8
 800792a:	f001 ff7d 	bl	8009828 <matherr>
 800792e:	2800      	cmp	r0, #0
 8007930:	f47f af11 	bne.w	8007756 <pow+0xde>
 8007934:	e7b5      	b.n	80078a2 <pow+0x22a>
 8007936:	bf00      	nop
 8007938:	08009b71 	.word	0x08009b71
 800793c:	3ff00000 	.word	0x3ff00000
 8007940:	fff00000 	.word	0xfff00000
 8007944:	3fe00000 	.word	0x3fe00000
 8007948:	47efffff 	.word	0x47efffff
 800794c:	c7efffff 	.word	0xc7efffff
 8007950:	7ff00000 	.word	0x7ff00000
 8007954:	20000074 	.word	0x20000074

08007958 <__ieee754_acos>:
 8007958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795c:	ec55 4b10 	vmov	r4, r5, d0
 8007960:	49b7      	ldr	r1, [pc, #732]	; (8007c40 <__ieee754_acos+0x2e8>)
 8007962:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007966:	428b      	cmp	r3, r1
 8007968:	dd1b      	ble.n	80079a2 <__ieee754_acos+0x4a>
 800796a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800796e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007972:	4323      	orrs	r3, r4
 8007974:	d109      	bne.n	800798a <__ieee754_acos+0x32>
 8007976:	2d00      	cmp	r5, #0
 8007978:	f300 8211 	bgt.w	8007d9e <__ieee754_acos+0x446>
 800797c:	a196      	add	r1, pc, #600	; (adr r1, 8007bd8 <__ieee754_acos+0x280>)
 800797e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007982:	ec41 0b10 	vmov	d0, r0, r1
 8007986:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800798a:	ee10 2a10 	vmov	r2, s0
 800798e:	462b      	mov	r3, r5
 8007990:	4620      	mov	r0, r4
 8007992:	4629      	mov	r1, r5
 8007994:	f7f8 fc20 	bl	80001d8 <__aeabi_dsub>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	f7f8 fefe 	bl	800079c <__aeabi_ddiv>
 80079a0:	e7ef      	b.n	8007982 <__ieee754_acos+0x2a>
 80079a2:	49a8      	ldr	r1, [pc, #672]	; (8007c44 <__ieee754_acos+0x2ec>)
 80079a4:	428b      	cmp	r3, r1
 80079a6:	f300 8087 	bgt.w	8007ab8 <__ieee754_acos+0x160>
 80079aa:	4aa7      	ldr	r2, [pc, #668]	; (8007c48 <__ieee754_acos+0x2f0>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	f340 81f9 	ble.w	8007da4 <__ieee754_acos+0x44c>
 80079b2:	ee10 2a10 	vmov	r2, s0
 80079b6:	ee10 0a10 	vmov	r0, s0
 80079ba:	462b      	mov	r3, r5
 80079bc:	4629      	mov	r1, r5
 80079be:	f7f8 fdc3 	bl	8000548 <__aeabi_dmul>
 80079c2:	a387      	add	r3, pc, #540	; (adr r3, 8007be0 <__ieee754_acos+0x288>)
 80079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c8:	4606      	mov	r6, r0
 80079ca:	460f      	mov	r7, r1
 80079cc:	f7f8 fdbc 	bl	8000548 <__aeabi_dmul>
 80079d0:	a385      	add	r3, pc, #532	; (adr r3, 8007be8 <__ieee754_acos+0x290>)
 80079d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d6:	f7f8 fc01 	bl	80001dc <__adddf3>
 80079da:	4632      	mov	r2, r6
 80079dc:	463b      	mov	r3, r7
 80079de:	f7f8 fdb3 	bl	8000548 <__aeabi_dmul>
 80079e2:	a383      	add	r3, pc, #524	; (adr r3, 8007bf0 <__ieee754_acos+0x298>)
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	f7f8 fbf6 	bl	80001d8 <__aeabi_dsub>
 80079ec:	4632      	mov	r2, r6
 80079ee:	463b      	mov	r3, r7
 80079f0:	f7f8 fdaa 	bl	8000548 <__aeabi_dmul>
 80079f4:	a380      	add	r3, pc, #512	; (adr r3, 8007bf8 <__ieee754_acos+0x2a0>)
 80079f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fa:	f7f8 fbef 	bl	80001dc <__adddf3>
 80079fe:	4632      	mov	r2, r6
 8007a00:	463b      	mov	r3, r7
 8007a02:	f7f8 fda1 	bl	8000548 <__aeabi_dmul>
 8007a06:	a37e      	add	r3, pc, #504	; (adr r3, 8007c00 <__ieee754_acos+0x2a8>)
 8007a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0c:	f7f8 fbe4 	bl	80001d8 <__aeabi_dsub>
 8007a10:	4632      	mov	r2, r6
 8007a12:	463b      	mov	r3, r7
 8007a14:	f7f8 fd98 	bl	8000548 <__aeabi_dmul>
 8007a18:	a37b      	add	r3, pc, #492	; (adr r3, 8007c08 <__ieee754_acos+0x2b0>)
 8007a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1e:	f7f8 fbdd 	bl	80001dc <__adddf3>
 8007a22:	4632      	mov	r2, r6
 8007a24:	463b      	mov	r3, r7
 8007a26:	f7f8 fd8f 	bl	8000548 <__aeabi_dmul>
 8007a2a:	a379      	add	r3, pc, #484	; (adr r3, 8007c10 <__ieee754_acos+0x2b8>)
 8007a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a30:	4680      	mov	r8, r0
 8007a32:	4689      	mov	r9, r1
 8007a34:	4630      	mov	r0, r6
 8007a36:	4639      	mov	r1, r7
 8007a38:	f7f8 fd86 	bl	8000548 <__aeabi_dmul>
 8007a3c:	a376      	add	r3, pc, #472	; (adr r3, 8007c18 <__ieee754_acos+0x2c0>)
 8007a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a42:	f7f8 fbc9 	bl	80001d8 <__aeabi_dsub>
 8007a46:	4632      	mov	r2, r6
 8007a48:	463b      	mov	r3, r7
 8007a4a:	f7f8 fd7d 	bl	8000548 <__aeabi_dmul>
 8007a4e:	a374      	add	r3, pc, #464	; (adr r3, 8007c20 <__ieee754_acos+0x2c8>)
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	f7f8 fbc2 	bl	80001dc <__adddf3>
 8007a58:	4632      	mov	r2, r6
 8007a5a:	463b      	mov	r3, r7
 8007a5c:	f7f8 fd74 	bl	8000548 <__aeabi_dmul>
 8007a60:	a371      	add	r3, pc, #452	; (adr r3, 8007c28 <__ieee754_acos+0x2d0>)
 8007a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a66:	f7f8 fbb7 	bl	80001d8 <__aeabi_dsub>
 8007a6a:	4632      	mov	r2, r6
 8007a6c:	463b      	mov	r3, r7
 8007a6e:	f7f8 fd6b 	bl	8000548 <__aeabi_dmul>
 8007a72:	2200      	movs	r2, #0
 8007a74:	4b75      	ldr	r3, [pc, #468]	; (8007c4c <__ieee754_acos+0x2f4>)
 8007a76:	f7f8 fbb1 	bl	80001dc <__adddf3>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4640      	mov	r0, r8
 8007a80:	4649      	mov	r1, r9
 8007a82:	f7f8 fe8b 	bl	800079c <__aeabi_ddiv>
 8007a86:	4622      	mov	r2, r4
 8007a88:	462b      	mov	r3, r5
 8007a8a:	f7f8 fd5d 	bl	8000548 <__aeabi_dmul>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	460b      	mov	r3, r1
 8007a92:	a167      	add	r1, pc, #412	; (adr r1, 8007c30 <__ieee754_acos+0x2d8>)
 8007a94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a98:	f7f8 fb9e 	bl	80001d8 <__aeabi_dsub>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	f7f8 fb98 	bl	80001d8 <__aeabi_dsub>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	460b      	mov	r3, r1
 8007aac:	a162      	add	r1, pc, #392	; (adr r1, 8007c38 <__ieee754_acos+0x2e0>)
 8007aae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ab2:	f7f8 fb91 	bl	80001d8 <__aeabi_dsub>
 8007ab6:	e764      	b.n	8007982 <__ieee754_acos+0x2a>
 8007ab8:	2d00      	cmp	r5, #0
 8007aba:	f280 80cb 	bge.w	8007c54 <__ieee754_acos+0x2fc>
 8007abe:	ee10 0a10 	vmov	r0, s0
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	4b61      	ldr	r3, [pc, #388]	; (8007c4c <__ieee754_acos+0x2f4>)
 8007ac6:	4629      	mov	r1, r5
 8007ac8:	f7f8 fb88 	bl	80001dc <__adddf3>
 8007acc:	2200      	movs	r2, #0
 8007ace:	4b60      	ldr	r3, [pc, #384]	; (8007c50 <__ieee754_acos+0x2f8>)
 8007ad0:	f7f8 fd3a 	bl	8000548 <__aeabi_dmul>
 8007ad4:	a342      	add	r3, pc, #264	; (adr r3, 8007be0 <__ieee754_acos+0x288>)
 8007ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ada:	4604      	mov	r4, r0
 8007adc:	460d      	mov	r5, r1
 8007ade:	f7f8 fd33 	bl	8000548 <__aeabi_dmul>
 8007ae2:	a341      	add	r3, pc, #260	; (adr r3, 8007be8 <__ieee754_acos+0x290>)
 8007ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae8:	f7f8 fb78 	bl	80001dc <__adddf3>
 8007aec:	4622      	mov	r2, r4
 8007aee:	462b      	mov	r3, r5
 8007af0:	f7f8 fd2a 	bl	8000548 <__aeabi_dmul>
 8007af4:	a33e      	add	r3, pc, #248	; (adr r3, 8007bf0 <__ieee754_acos+0x298>)
 8007af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afa:	f7f8 fb6d 	bl	80001d8 <__aeabi_dsub>
 8007afe:	4622      	mov	r2, r4
 8007b00:	462b      	mov	r3, r5
 8007b02:	f7f8 fd21 	bl	8000548 <__aeabi_dmul>
 8007b06:	a33c      	add	r3, pc, #240	; (adr r3, 8007bf8 <__ieee754_acos+0x2a0>)
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	f7f8 fb66 	bl	80001dc <__adddf3>
 8007b10:	4622      	mov	r2, r4
 8007b12:	462b      	mov	r3, r5
 8007b14:	f7f8 fd18 	bl	8000548 <__aeabi_dmul>
 8007b18:	a339      	add	r3, pc, #228	; (adr r3, 8007c00 <__ieee754_acos+0x2a8>)
 8007b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1e:	f7f8 fb5b 	bl	80001d8 <__aeabi_dsub>
 8007b22:	4622      	mov	r2, r4
 8007b24:	462b      	mov	r3, r5
 8007b26:	f7f8 fd0f 	bl	8000548 <__aeabi_dmul>
 8007b2a:	a337      	add	r3, pc, #220	; (adr r3, 8007c08 <__ieee754_acos+0x2b0>)
 8007b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b30:	f7f8 fb54 	bl	80001dc <__adddf3>
 8007b34:	4622      	mov	r2, r4
 8007b36:	462b      	mov	r3, r5
 8007b38:	f7f8 fd06 	bl	8000548 <__aeabi_dmul>
 8007b3c:	ec45 4b10 	vmov	d0, r4, r5
 8007b40:	4680      	mov	r8, r0
 8007b42:	4689      	mov	r9, r1
 8007b44:	f001 f866 	bl	8008c14 <__ieee754_sqrt>
 8007b48:	a331      	add	r3, pc, #196	; (adr r3, 8007c10 <__ieee754_acos+0x2b8>)
 8007b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4e:	4620      	mov	r0, r4
 8007b50:	4629      	mov	r1, r5
 8007b52:	ec57 6b10 	vmov	r6, r7, d0
 8007b56:	f7f8 fcf7 	bl	8000548 <__aeabi_dmul>
 8007b5a:	a32f      	add	r3, pc, #188	; (adr r3, 8007c18 <__ieee754_acos+0x2c0>)
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	f7f8 fb3a 	bl	80001d8 <__aeabi_dsub>
 8007b64:	4622      	mov	r2, r4
 8007b66:	462b      	mov	r3, r5
 8007b68:	f7f8 fcee 	bl	8000548 <__aeabi_dmul>
 8007b6c:	a32c      	add	r3, pc, #176	; (adr r3, 8007c20 <__ieee754_acos+0x2c8>)
 8007b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b72:	f7f8 fb33 	bl	80001dc <__adddf3>
 8007b76:	4622      	mov	r2, r4
 8007b78:	462b      	mov	r3, r5
 8007b7a:	f7f8 fce5 	bl	8000548 <__aeabi_dmul>
 8007b7e:	a32a      	add	r3, pc, #168	; (adr r3, 8007c28 <__ieee754_acos+0x2d0>)
 8007b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b84:	f7f8 fb28 	bl	80001d8 <__aeabi_dsub>
 8007b88:	4622      	mov	r2, r4
 8007b8a:	462b      	mov	r3, r5
 8007b8c:	f7f8 fcdc 	bl	8000548 <__aeabi_dmul>
 8007b90:	2200      	movs	r2, #0
 8007b92:	4b2e      	ldr	r3, [pc, #184]	; (8007c4c <__ieee754_acos+0x2f4>)
 8007b94:	f7f8 fb22 	bl	80001dc <__adddf3>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4640      	mov	r0, r8
 8007b9e:	4649      	mov	r1, r9
 8007ba0:	f7f8 fdfc 	bl	800079c <__aeabi_ddiv>
 8007ba4:	4632      	mov	r2, r6
 8007ba6:	463b      	mov	r3, r7
 8007ba8:	f7f8 fcce 	bl	8000548 <__aeabi_dmul>
 8007bac:	a320      	add	r3, pc, #128	; (adr r3, 8007c30 <__ieee754_acos+0x2d8>)
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	f7f8 fb11 	bl	80001d8 <__aeabi_dsub>
 8007bb6:	4632      	mov	r2, r6
 8007bb8:	463b      	mov	r3, r7
 8007bba:	f7f8 fb0f 	bl	80001dc <__adddf3>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	f7f8 fb0b 	bl	80001dc <__adddf3>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	a103      	add	r1, pc, #12	; (adr r1, 8007bd8 <__ieee754_acos+0x280>)
 8007bcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bd0:	e76f      	b.n	8007ab2 <__ieee754_acos+0x15a>
 8007bd2:	bf00      	nop
 8007bd4:	f3af 8000 	nop.w
 8007bd8:	54442d18 	.word	0x54442d18
 8007bdc:	400921fb 	.word	0x400921fb
 8007be0:	0dfdf709 	.word	0x0dfdf709
 8007be4:	3f023de1 	.word	0x3f023de1
 8007be8:	7501b288 	.word	0x7501b288
 8007bec:	3f49efe0 	.word	0x3f49efe0
 8007bf0:	b5688f3b 	.word	0xb5688f3b
 8007bf4:	3fa48228 	.word	0x3fa48228
 8007bf8:	0e884455 	.word	0x0e884455
 8007bfc:	3fc9c155 	.word	0x3fc9c155
 8007c00:	03eb6f7d 	.word	0x03eb6f7d
 8007c04:	3fd4d612 	.word	0x3fd4d612
 8007c08:	55555555 	.word	0x55555555
 8007c0c:	3fc55555 	.word	0x3fc55555
 8007c10:	b12e9282 	.word	0xb12e9282
 8007c14:	3fb3b8c5 	.word	0x3fb3b8c5
 8007c18:	1b8d0159 	.word	0x1b8d0159
 8007c1c:	3fe6066c 	.word	0x3fe6066c
 8007c20:	9c598ac8 	.word	0x9c598ac8
 8007c24:	40002ae5 	.word	0x40002ae5
 8007c28:	1c8a2d4b 	.word	0x1c8a2d4b
 8007c2c:	40033a27 	.word	0x40033a27
 8007c30:	33145c07 	.word	0x33145c07
 8007c34:	3c91a626 	.word	0x3c91a626
 8007c38:	54442d18 	.word	0x54442d18
 8007c3c:	3ff921fb 	.word	0x3ff921fb
 8007c40:	3fefffff 	.word	0x3fefffff
 8007c44:	3fdfffff 	.word	0x3fdfffff
 8007c48:	3c600000 	.word	0x3c600000
 8007c4c:	3ff00000 	.word	0x3ff00000
 8007c50:	3fe00000 	.word	0x3fe00000
 8007c54:	ee10 2a10 	vmov	r2, s0
 8007c58:	462b      	mov	r3, r5
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	496a      	ldr	r1, [pc, #424]	; (8007e08 <__ieee754_acos+0x4b0>)
 8007c5e:	f7f8 fabb 	bl	80001d8 <__aeabi_dsub>
 8007c62:	2200      	movs	r2, #0
 8007c64:	4b69      	ldr	r3, [pc, #420]	; (8007e0c <__ieee754_acos+0x4b4>)
 8007c66:	f7f8 fc6f 	bl	8000548 <__aeabi_dmul>
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	460d      	mov	r5, r1
 8007c6e:	ec45 4b10 	vmov	d0, r4, r5
 8007c72:	f000 ffcf 	bl	8008c14 <__ieee754_sqrt>
 8007c76:	a34e      	add	r3, pc, #312	; (adr r3, 8007db0 <__ieee754_acos+0x458>)
 8007c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	4629      	mov	r1, r5
 8007c80:	ec59 8b10 	vmov	r8, r9, d0
 8007c84:	f7f8 fc60 	bl	8000548 <__aeabi_dmul>
 8007c88:	a34b      	add	r3, pc, #300	; (adr r3, 8007db8 <__ieee754_acos+0x460>)
 8007c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8e:	f7f8 faa5 	bl	80001dc <__adddf3>
 8007c92:	4622      	mov	r2, r4
 8007c94:	462b      	mov	r3, r5
 8007c96:	f7f8 fc57 	bl	8000548 <__aeabi_dmul>
 8007c9a:	a349      	add	r3, pc, #292	; (adr r3, 8007dc0 <__ieee754_acos+0x468>)
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	f7f8 fa9a 	bl	80001d8 <__aeabi_dsub>
 8007ca4:	4622      	mov	r2, r4
 8007ca6:	462b      	mov	r3, r5
 8007ca8:	f7f8 fc4e 	bl	8000548 <__aeabi_dmul>
 8007cac:	a346      	add	r3, pc, #280	; (adr r3, 8007dc8 <__ieee754_acos+0x470>)
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	f7f8 fa93 	bl	80001dc <__adddf3>
 8007cb6:	4622      	mov	r2, r4
 8007cb8:	462b      	mov	r3, r5
 8007cba:	f7f8 fc45 	bl	8000548 <__aeabi_dmul>
 8007cbe:	a344      	add	r3, pc, #272	; (adr r3, 8007dd0 <__ieee754_acos+0x478>)
 8007cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc4:	f7f8 fa88 	bl	80001d8 <__aeabi_dsub>
 8007cc8:	4622      	mov	r2, r4
 8007cca:	462b      	mov	r3, r5
 8007ccc:	f7f8 fc3c 	bl	8000548 <__aeabi_dmul>
 8007cd0:	a341      	add	r3, pc, #260	; (adr r3, 8007dd8 <__ieee754_acos+0x480>)
 8007cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd6:	f7f8 fa81 	bl	80001dc <__adddf3>
 8007cda:	4622      	mov	r2, r4
 8007cdc:	462b      	mov	r3, r5
 8007cde:	f7f8 fc33 	bl	8000548 <__aeabi_dmul>
 8007ce2:	a33f      	add	r3, pc, #252	; (adr r3, 8007de0 <__ieee754_acos+0x488>)
 8007ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce8:	4682      	mov	sl, r0
 8007cea:	468b      	mov	fp, r1
 8007cec:	4620      	mov	r0, r4
 8007cee:	4629      	mov	r1, r5
 8007cf0:	f7f8 fc2a 	bl	8000548 <__aeabi_dmul>
 8007cf4:	a33c      	add	r3, pc, #240	; (adr r3, 8007de8 <__ieee754_acos+0x490>)
 8007cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfa:	f7f8 fa6d 	bl	80001d8 <__aeabi_dsub>
 8007cfe:	4622      	mov	r2, r4
 8007d00:	462b      	mov	r3, r5
 8007d02:	f7f8 fc21 	bl	8000548 <__aeabi_dmul>
 8007d06:	a33a      	add	r3, pc, #232	; (adr r3, 8007df0 <__ieee754_acos+0x498>)
 8007d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0c:	f7f8 fa66 	bl	80001dc <__adddf3>
 8007d10:	4622      	mov	r2, r4
 8007d12:	462b      	mov	r3, r5
 8007d14:	f7f8 fc18 	bl	8000548 <__aeabi_dmul>
 8007d18:	a337      	add	r3, pc, #220	; (adr r3, 8007df8 <__ieee754_acos+0x4a0>)
 8007d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1e:	f7f8 fa5b 	bl	80001d8 <__aeabi_dsub>
 8007d22:	4622      	mov	r2, r4
 8007d24:	462b      	mov	r3, r5
 8007d26:	f7f8 fc0f 	bl	8000548 <__aeabi_dmul>
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	4b36      	ldr	r3, [pc, #216]	; (8007e08 <__ieee754_acos+0x4b0>)
 8007d2e:	f7f8 fa55 	bl	80001dc <__adddf3>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4650      	mov	r0, sl
 8007d38:	4659      	mov	r1, fp
 8007d3a:	f7f8 fd2f 	bl	800079c <__aeabi_ddiv>
 8007d3e:	4642      	mov	r2, r8
 8007d40:	464b      	mov	r3, r9
 8007d42:	f7f8 fc01 	bl	8000548 <__aeabi_dmul>
 8007d46:	2600      	movs	r6, #0
 8007d48:	4682      	mov	sl, r0
 8007d4a:	468b      	mov	fp, r1
 8007d4c:	4632      	mov	r2, r6
 8007d4e:	464b      	mov	r3, r9
 8007d50:	4630      	mov	r0, r6
 8007d52:	4649      	mov	r1, r9
 8007d54:	f7f8 fbf8 	bl	8000548 <__aeabi_dmul>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	4629      	mov	r1, r5
 8007d60:	f7f8 fa3a 	bl	80001d8 <__aeabi_dsub>
 8007d64:	4632      	mov	r2, r6
 8007d66:	4604      	mov	r4, r0
 8007d68:	460d      	mov	r5, r1
 8007d6a:	464b      	mov	r3, r9
 8007d6c:	4640      	mov	r0, r8
 8007d6e:	4649      	mov	r1, r9
 8007d70:	f7f8 fa34 	bl	80001dc <__adddf3>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4620      	mov	r0, r4
 8007d7a:	4629      	mov	r1, r5
 8007d7c:	f7f8 fd0e 	bl	800079c <__aeabi_ddiv>
 8007d80:	4602      	mov	r2, r0
 8007d82:	460b      	mov	r3, r1
 8007d84:	4650      	mov	r0, sl
 8007d86:	4659      	mov	r1, fp
 8007d88:	f7f8 fa28 	bl	80001dc <__adddf3>
 8007d8c:	4632      	mov	r2, r6
 8007d8e:	464b      	mov	r3, r9
 8007d90:	f7f8 fa24 	bl	80001dc <__adddf3>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	f7f8 fa20 	bl	80001dc <__adddf3>
 8007d9c:	e5f1      	b.n	8007982 <__ieee754_acos+0x2a>
 8007d9e:	2000      	movs	r0, #0
 8007da0:	2100      	movs	r1, #0
 8007da2:	e5ee      	b.n	8007982 <__ieee754_acos+0x2a>
 8007da4:	a116      	add	r1, pc, #88	; (adr r1, 8007e00 <__ieee754_acos+0x4a8>)
 8007da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007daa:	e5ea      	b.n	8007982 <__ieee754_acos+0x2a>
 8007dac:	f3af 8000 	nop.w
 8007db0:	0dfdf709 	.word	0x0dfdf709
 8007db4:	3f023de1 	.word	0x3f023de1
 8007db8:	7501b288 	.word	0x7501b288
 8007dbc:	3f49efe0 	.word	0x3f49efe0
 8007dc0:	b5688f3b 	.word	0xb5688f3b
 8007dc4:	3fa48228 	.word	0x3fa48228
 8007dc8:	0e884455 	.word	0x0e884455
 8007dcc:	3fc9c155 	.word	0x3fc9c155
 8007dd0:	03eb6f7d 	.word	0x03eb6f7d
 8007dd4:	3fd4d612 	.word	0x3fd4d612
 8007dd8:	55555555 	.word	0x55555555
 8007ddc:	3fc55555 	.word	0x3fc55555
 8007de0:	b12e9282 	.word	0xb12e9282
 8007de4:	3fb3b8c5 	.word	0x3fb3b8c5
 8007de8:	1b8d0159 	.word	0x1b8d0159
 8007dec:	3fe6066c 	.word	0x3fe6066c
 8007df0:	9c598ac8 	.word	0x9c598ac8
 8007df4:	40002ae5 	.word	0x40002ae5
 8007df8:	1c8a2d4b 	.word	0x1c8a2d4b
 8007dfc:	40033a27 	.word	0x40033a27
 8007e00:	54442d18 	.word	0x54442d18
 8007e04:	3ff921fb 	.word	0x3ff921fb
 8007e08:	3ff00000 	.word	0x3ff00000
 8007e0c:	3fe00000 	.word	0x3fe00000

08007e10 <__ieee754_pow>:
 8007e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e14:	b091      	sub	sp, #68	; 0x44
 8007e16:	ed8d 1b00 	vstr	d1, [sp]
 8007e1a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007e1e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007e22:	ea58 0302 	orrs.w	r3, r8, r2
 8007e26:	ec57 6b10 	vmov	r6, r7, d0
 8007e2a:	f000 84be 	beq.w	80087aa <__ieee754_pow+0x99a>
 8007e2e:	4b7a      	ldr	r3, [pc, #488]	; (8008018 <__ieee754_pow+0x208>)
 8007e30:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007e34:	429c      	cmp	r4, r3
 8007e36:	463d      	mov	r5, r7
 8007e38:	ee10 aa10 	vmov	sl, s0
 8007e3c:	dc09      	bgt.n	8007e52 <__ieee754_pow+0x42>
 8007e3e:	d103      	bne.n	8007e48 <__ieee754_pow+0x38>
 8007e40:	b93e      	cbnz	r6, 8007e52 <__ieee754_pow+0x42>
 8007e42:	45a0      	cmp	r8, r4
 8007e44:	dc0d      	bgt.n	8007e62 <__ieee754_pow+0x52>
 8007e46:	e001      	b.n	8007e4c <__ieee754_pow+0x3c>
 8007e48:	4598      	cmp	r8, r3
 8007e4a:	dc02      	bgt.n	8007e52 <__ieee754_pow+0x42>
 8007e4c:	4598      	cmp	r8, r3
 8007e4e:	d10e      	bne.n	8007e6e <__ieee754_pow+0x5e>
 8007e50:	b16a      	cbz	r2, 8007e6e <__ieee754_pow+0x5e>
 8007e52:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007e56:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007e5a:	ea54 030a 	orrs.w	r3, r4, sl
 8007e5e:	f000 84a4 	beq.w	80087aa <__ieee754_pow+0x99a>
 8007e62:	486e      	ldr	r0, [pc, #440]	; (800801c <__ieee754_pow+0x20c>)
 8007e64:	b011      	add	sp, #68	; 0x44
 8007e66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6a:	f001 bce1 	b.w	8009830 <nan>
 8007e6e:	2d00      	cmp	r5, #0
 8007e70:	da53      	bge.n	8007f1a <__ieee754_pow+0x10a>
 8007e72:	4b6b      	ldr	r3, [pc, #428]	; (8008020 <__ieee754_pow+0x210>)
 8007e74:	4598      	cmp	r8, r3
 8007e76:	dc4d      	bgt.n	8007f14 <__ieee754_pow+0x104>
 8007e78:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007e7c:	4598      	cmp	r8, r3
 8007e7e:	dd4c      	ble.n	8007f1a <__ieee754_pow+0x10a>
 8007e80:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007e84:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007e88:	2b14      	cmp	r3, #20
 8007e8a:	dd26      	ble.n	8007eda <__ieee754_pow+0xca>
 8007e8c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007e90:	fa22 f103 	lsr.w	r1, r2, r3
 8007e94:	fa01 f303 	lsl.w	r3, r1, r3
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d13e      	bne.n	8007f1a <__ieee754_pow+0x10a>
 8007e9c:	f001 0101 	and.w	r1, r1, #1
 8007ea0:	f1c1 0b02 	rsb	fp, r1, #2
 8007ea4:	2a00      	cmp	r2, #0
 8007ea6:	d15b      	bne.n	8007f60 <__ieee754_pow+0x150>
 8007ea8:	4b5b      	ldr	r3, [pc, #364]	; (8008018 <__ieee754_pow+0x208>)
 8007eaa:	4598      	cmp	r8, r3
 8007eac:	d124      	bne.n	8007ef8 <__ieee754_pow+0xe8>
 8007eae:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007eb2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007eb6:	ea53 030a 	orrs.w	r3, r3, sl
 8007eba:	f000 8476 	beq.w	80087aa <__ieee754_pow+0x99a>
 8007ebe:	4b59      	ldr	r3, [pc, #356]	; (8008024 <__ieee754_pow+0x214>)
 8007ec0:	429c      	cmp	r4, r3
 8007ec2:	dd2d      	ble.n	8007f20 <__ieee754_pow+0x110>
 8007ec4:	f1b9 0f00 	cmp.w	r9, #0
 8007ec8:	f280 8473 	bge.w	80087b2 <__ieee754_pow+0x9a2>
 8007ecc:	2000      	movs	r0, #0
 8007ece:	2100      	movs	r1, #0
 8007ed0:	ec41 0b10 	vmov	d0, r0, r1
 8007ed4:	b011      	add	sp, #68	; 0x44
 8007ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eda:	2a00      	cmp	r2, #0
 8007edc:	d13e      	bne.n	8007f5c <__ieee754_pow+0x14c>
 8007ede:	f1c3 0314 	rsb	r3, r3, #20
 8007ee2:	fa48 f103 	asr.w	r1, r8, r3
 8007ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8007eea:	4543      	cmp	r3, r8
 8007eec:	f040 8469 	bne.w	80087c2 <__ieee754_pow+0x9b2>
 8007ef0:	f001 0101 	and.w	r1, r1, #1
 8007ef4:	f1c1 0b02 	rsb	fp, r1, #2
 8007ef8:	4b4b      	ldr	r3, [pc, #300]	; (8008028 <__ieee754_pow+0x218>)
 8007efa:	4598      	cmp	r8, r3
 8007efc:	d118      	bne.n	8007f30 <__ieee754_pow+0x120>
 8007efe:	f1b9 0f00 	cmp.w	r9, #0
 8007f02:	f280 845a 	bge.w	80087ba <__ieee754_pow+0x9aa>
 8007f06:	4948      	ldr	r1, [pc, #288]	; (8008028 <__ieee754_pow+0x218>)
 8007f08:	4632      	mov	r2, r6
 8007f0a:	463b      	mov	r3, r7
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	f7f8 fc45 	bl	800079c <__aeabi_ddiv>
 8007f12:	e7dd      	b.n	8007ed0 <__ieee754_pow+0xc0>
 8007f14:	f04f 0b02 	mov.w	fp, #2
 8007f18:	e7c4      	b.n	8007ea4 <__ieee754_pow+0x94>
 8007f1a:	f04f 0b00 	mov.w	fp, #0
 8007f1e:	e7c1      	b.n	8007ea4 <__ieee754_pow+0x94>
 8007f20:	f1b9 0f00 	cmp.w	r9, #0
 8007f24:	dad2      	bge.n	8007ecc <__ieee754_pow+0xbc>
 8007f26:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007f2a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007f2e:	e7cf      	b.n	8007ed0 <__ieee754_pow+0xc0>
 8007f30:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007f34:	d106      	bne.n	8007f44 <__ieee754_pow+0x134>
 8007f36:	4632      	mov	r2, r6
 8007f38:	463b      	mov	r3, r7
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	f7f8 fb03 	bl	8000548 <__aeabi_dmul>
 8007f42:	e7c5      	b.n	8007ed0 <__ieee754_pow+0xc0>
 8007f44:	4b39      	ldr	r3, [pc, #228]	; (800802c <__ieee754_pow+0x21c>)
 8007f46:	4599      	cmp	r9, r3
 8007f48:	d10a      	bne.n	8007f60 <__ieee754_pow+0x150>
 8007f4a:	2d00      	cmp	r5, #0
 8007f4c:	db08      	blt.n	8007f60 <__ieee754_pow+0x150>
 8007f4e:	ec47 6b10 	vmov	d0, r6, r7
 8007f52:	b011      	add	sp, #68	; 0x44
 8007f54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f58:	f000 be5c 	b.w	8008c14 <__ieee754_sqrt>
 8007f5c:	f04f 0b00 	mov.w	fp, #0
 8007f60:	ec47 6b10 	vmov	d0, r6, r7
 8007f64:	f001 fbca 	bl	80096fc <fabs>
 8007f68:	ec51 0b10 	vmov	r0, r1, d0
 8007f6c:	f1ba 0f00 	cmp.w	sl, #0
 8007f70:	d127      	bne.n	8007fc2 <__ieee754_pow+0x1b2>
 8007f72:	b124      	cbz	r4, 8007f7e <__ieee754_pow+0x16e>
 8007f74:	4b2c      	ldr	r3, [pc, #176]	; (8008028 <__ieee754_pow+0x218>)
 8007f76:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d121      	bne.n	8007fc2 <__ieee754_pow+0x1b2>
 8007f7e:	f1b9 0f00 	cmp.w	r9, #0
 8007f82:	da05      	bge.n	8007f90 <__ieee754_pow+0x180>
 8007f84:	4602      	mov	r2, r0
 8007f86:	460b      	mov	r3, r1
 8007f88:	2000      	movs	r0, #0
 8007f8a:	4927      	ldr	r1, [pc, #156]	; (8008028 <__ieee754_pow+0x218>)
 8007f8c:	f7f8 fc06 	bl	800079c <__aeabi_ddiv>
 8007f90:	2d00      	cmp	r5, #0
 8007f92:	da9d      	bge.n	8007ed0 <__ieee754_pow+0xc0>
 8007f94:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007f98:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007f9c:	ea54 030b 	orrs.w	r3, r4, fp
 8007fa0:	d108      	bne.n	8007fb4 <__ieee754_pow+0x1a4>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	4619      	mov	r1, r3
 8007faa:	f7f8 f915 	bl	80001d8 <__aeabi_dsub>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	e7ac      	b.n	8007f0e <__ieee754_pow+0xfe>
 8007fb4:	f1bb 0f01 	cmp.w	fp, #1
 8007fb8:	d18a      	bne.n	8007ed0 <__ieee754_pow+0xc0>
 8007fba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	e786      	b.n	8007ed0 <__ieee754_pow+0xc0>
 8007fc2:	0fed      	lsrs	r5, r5, #31
 8007fc4:	1e6b      	subs	r3, r5, #1
 8007fc6:	930d      	str	r3, [sp, #52]	; 0x34
 8007fc8:	ea5b 0303 	orrs.w	r3, fp, r3
 8007fcc:	d102      	bne.n	8007fd4 <__ieee754_pow+0x1c4>
 8007fce:	4632      	mov	r2, r6
 8007fd0:	463b      	mov	r3, r7
 8007fd2:	e7e8      	b.n	8007fa6 <__ieee754_pow+0x196>
 8007fd4:	4b16      	ldr	r3, [pc, #88]	; (8008030 <__ieee754_pow+0x220>)
 8007fd6:	4598      	cmp	r8, r3
 8007fd8:	f340 80fe 	ble.w	80081d8 <__ieee754_pow+0x3c8>
 8007fdc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007fe0:	4598      	cmp	r8, r3
 8007fe2:	dd0a      	ble.n	8007ffa <__ieee754_pow+0x1ea>
 8007fe4:	4b0f      	ldr	r3, [pc, #60]	; (8008024 <__ieee754_pow+0x214>)
 8007fe6:	429c      	cmp	r4, r3
 8007fe8:	dc0d      	bgt.n	8008006 <__ieee754_pow+0x1f6>
 8007fea:	f1b9 0f00 	cmp.w	r9, #0
 8007fee:	f6bf af6d 	bge.w	8007ecc <__ieee754_pow+0xbc>
 8007ff2:	a307      	add	r3, pc, #28	; (adr r3, 8008010 <__ieee754_pow+0x200>)
 8007ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff8:	e79f      	b.n	8007f3a <__ieee754_pow+0x12a>
 8007ffa:	4b0e      	ldr	r3, [pc, #56]	; (8008034 <__ieee754_pow+0x224>)
 8007ffc:	429c      	cmp	r4, r3
 8007ffe:	ddf4      	ble.n	8007fea <__ieee754_pow+0x1da>
 8008000:	4b09      	ldr	r3, [pc, #36]	; (8008028 <__ieee754_pow+0x218>)
 8008002:	429c      	cmp	r4, r3
 8008004:	dd18      	ble.n	8008038 <__ieee754_pow+0x228>
 8008006:	f1b9 0f00 	cmp.w	r9, #0
 800800a:	dcf2      	bgt.n	8007ff2 <__ieee754_pow+0x1e2>
 800800c:	e75e      	b.n	8007ecc <__ieee754_pow+0xbc>
 800800e:	bf00      	nop
 8008010:	8800759c 	.word	0x8800759c
 8008014:	7e37e43c 	.word	0x7e37e43c
 8008018:	7ff00000 	.word	0x7ff00000
 800801c:	08009b70 	.word	0x08009b70
 8008020:	433fffff 	.word	0x433fffff
 8008024:	3fefffff 	.word	0x3fefffff
 8008028:	3ff00000 	.word	0x3ff00000
 800802c:	3fe00000 	.word	0x3fe00000
 8008030:	41e00000 	.word	0x41e00000
 8008034:	3feffffe 	.word	0x3feffffe
 8008038:	2200      	movs	r2, #0
 800803a:	4b63      	ldr	r3, [pc, #396]	; (80081c8 <__ieee754_pow+0x3b8>)
 800803c:	f7f8 f8cc 	bl	80001d8 <__aeabi_dsub>
 8008040:	a355      	add	r3, pc, #340	; (adr r3, 8008198 <__ieee754_pow+0x388>)
 8008042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008046:	4604      	mov	r4, r0
 8008048:	460d      	mov	r5, r1
 800804a:	f7f8 fa7d 	bl	8000548 <__aeabi_dmul>
 800804e:	a354      	add	r3, pc, #336	; (adr r3, 80081a0 <__ieee754_pow+0x390>)
 8008050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008054:	4606      	mov	r6, r0
 8008056:	460f      	mov	r7, r1
 8008058:	4620      	mov	r0, r4
 800805a:	4629      	mov	r1, r5
 800805c:	f7f8 fa74 	bl	8000548 <__aeabi_dmul>
 8008060:	2200      	movs	r2, #0
 8008062:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008066:	4b59      	ldr	r3, [pc, #356]	; (80081cc <__ieee754_pow+0x3bc>)
 8008068:	4620      	mov	r0, r4
 800806a:	4629      	mov	r1, r5
 800806c:	f7f8 fa6c 	bl	8000548 <__aeabi_dmul>
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	a14c      	add	r1, pc, #304	; (adr r1, 80081a8 <__ieee754_pow+0x398>)
 8008076:	e9d1 0100 	ldrd	r0, r1, [r1]
 800807a:	f7f8 f8ad 	bl	80001d8 <__aeabi_dsub>
 800807e:	4622      	mov	r2, r4
 8008080:	462b      	mov	r3, r5
 8008082:	f7f8 fa61 	bl	8000548 <__aeabi_dmul>
 8008086:	4602      	mov	r2, r0
 8008088:	460b      	mov	r3, r1
 800808a:	2000      	movs	r0, #0
 800808c:	4950      	ldr	r1, [pc, #320]	; (80081d0 <__ieee754_pow+0x3c0>)
 800808e:	f7f8 f8a3 	bl	80001d8 <__aeabi_dsub>
 8008092:	4622      	mov	r2, r4
 8008094:	462b      	mov	r3, r5
 8008096:	4680      	mov	r8, r0
 8008098:	4689      	mov	r9, r1
 800809a:	4620      	mov	r0, r4
 800809c:	4629      	mov	r1, r5
 800809e:	f7f8 fa53 	bl	8000548 <__aeabi_dmul>
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	4640      	mov	r0, r8
 80080a8:	4649      	mov	r1, r9
 80080aa:	f7f8 fa4d 	bl	8000548 <__aeabi_dmul>
 80080ae:	a340      	add	r3, pc, #256	; (adr r3, 80081b0 <__ieee754_pow+0x3a0>)
 80080b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b4:	f7f8 fa48 	bl	8000548 <__aeabi_dmul>
 80080b8:	4602      	mov	r2, r0
 80080ba:	460b      	mov	r3, r1
 80080bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080c0:	f7f8 f88a 	bl	80001d8 <__aeabi_dsub>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	4604      	mov	r4, r0
 80080ca:	460d      	mov	r5, r1
 80080cc:	4630      	mov	r0, r6
 80080ce:	4639      	mov	r1, r7
 80080d0:	f7f8 f884 	bl	80001dc <__adddf3>
 80080d4:	2000      	movs	r0, #0
 80080d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080da:	4632      	mov	r2, r6
 80080dc:	463b      	mov	r3, r7
 80080de:	f7f8 f87b 	bl	80001d8 <__aeabi_dsub>
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	4620      	mov	r0, r4
 80080e8:	4629      	mov	r1, r5
 80080ea:	f7f8 f875 	bl	80001d8 <__aeabi_dsub>
 80080ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080f0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80080f4:	4313      	orrs	r3, r2
 80080f6:	4606      	mov	r6, r0
 80080f8:	460f      	mov	r7, r1
 80080fa:	f040 81eb 	bne.w	80084d4 <__ieee754_pow+0x6c4>
 80080fe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80081b8 <__ieee754_pow+0x3a8>
 8008102:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008106:	2400      	movs	r4, #0
 8008108:	4622      	mov	r2, r4
 800810a:	462b      	mov	r3, r5
 800810c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008110:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008114:	f7f8 f860 	bl	80001d8 <__aeabi_dsub>
 8008118:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800811c:	f7f8 fa14 	bl	8000548 <__aeabi_dmul>
 8008120:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008124:	4680      	mov	r8, r0
 8008126:	4689      	mov	r9, r1
 8008128:	4630      	mov	r0, r6
 800812a:	4639      	mov	r1, r7
 800812c:	f7f8 fa0c 	bl	8000548 <__aeabi_dmul>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	4640      	mov	r0, r8
 8008136:	4649      	mov	r1, r9
 8008138:	f7f8 f850 	bl	80001dc <__adddf3>
 800813c:	4622      	mov	r2, r4
 800813e:	462b      	mov	r3, r5
 8008140:	4680      	mov	r8, r0
 8008142:	4689      	mov	r9, r1
 8008144:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008148:	f7f8 f9fe 	bl	8000548 <__aeabi_dmul>
 800814c:	460b      	mov	r3, r1
 800814e:	4604      	mov	r4, r0
 8008150:	460d      	mov	r5, r1
 8008152:	4602      	mov	r2, r0
 8008154:	4649      	mov	r1, r9
 8008156:	4640      	mov	r0, r8
 8008158:	e9cd 4500 	strd	r4, r5, [sp]
 800815c:	f7f8 f83e 	bl	80001dc <__adddf3>
 8008160:	4b1c      	ldr	r3, [pc, #112]	; (80081d4 <__ieee754_pow+0x3c4>)
 8008162:	4299      	cmp	r1, r3
 8008164:	4606      	mov	r6, r0
 8008166:	460f      	mov	r7, r1
 8008168:	468b      	mov	fp, r1
 800816a:	f340 82f7 	ble.w	800875c <__ieee754_pow+0x94c>
 800816e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008172:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008176:	4303      	orrs	r3, r0
 8008178:	f000 81ea 	beq.w	8008550 <__ieee754_pow+0x740>
 800817c:	a310      	add	r3, pc, #64	; (adr r3, 80081c0 <__ieee754_pow+0x3b0>)
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008186:	f7f8 f9df 	bl	8000548 <__aeabi_dmul>
 800818a:	a30d      	add	r3, pc, #52	; (adr r3, 80081c0 <__ieee754_pow+0x3b0>)
 800818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008190:	e6d5      	b.n	8007f3e <__ieee754_pow+0x12e>
 8008192:	bf00      	nop
 8008194:	f3af 8000 	nop.w
 8008198:	60000000 	.word	0x60000000
 800819c:	3ff71547 	.word	0x3ff71547
 80081a0:	f85ddf44 	.word	0xf85ddf44
 80081a4:	3e54ae0b 	.word	0x3e54ae0b
 80081a8:	55555555 	.word	0x55555555
 80081ac:	3fd55555 	.word	0x3fd55555
 80081b0:	652b82fe 	.word	0x652b82fe
 80081b4:	3ff71547 	.word	0x3ff71547
 80081b8:	00000000 	.word	0x00000000
 80081bc:	bff00000 	.word	0xbff00000
 80081c0:	8800759c 	.word	0x8800759c
 80081c4:	7e37e43c 	.word	0x7e37e43c
 80081c8:	3ff00000 	.word	0x3ff00000
 80081cc:	3fd00000 	.word	0x3fd00000
 80081d0:	3fe00000 	.word	0x3fe00000
 80081d4:	408fffff 	.word	0x408fffff
 80081d8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80081dc:	f04f 0200 	mov.w	r2, #0
 80081e0:	da05      	bge.n	80081ee <__ieee754_pow+0x3de>
 80081e2:	4bd3      	ldr	r3, [pc, #844]	; (8008530 <__ieee754_pow+0x720>)
 80081e4:	f7f8 f9b0 	bl	8000548 <__aeabi_dmul>
 80081e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80081ec:	460c      	mov	r4, r1
 80081ee:	1523      	asrs	r3, r4, #20
 80081f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80081f4:	4413      	add	r3, r2
 80081f6:	9309      	str	r3, [sp, #36]	; 0x24
 80081f8:	4bce      	ldr	r3, [pc, #824]	; (8008534 <__ieee754_pow+0x724>)
 80081fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80081fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008202:	429c      	cmp	r4, r3
 8008204:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008208:	dd08      	ble.n	800821c <__ieee754_pow+0x40c>
 800820a:	4bcb      	ldr	r3, [pc, #812]	; (8008538 <__ieee754_pow+0x728>)
 800820c:	429c      	cmp	r4, r3
 800820e:	f340 815e 	ble.w	80084ce <__ieee754_pow+0x6be>
 8008212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008214:	3301      	adds	r3, #1
 8008216:	9309      	str	r3, [sp, #36]	; 0x24
 8008218:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800821c:	f04f 0a00 	mov.w	sl, #0
 8008220:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008224:	930c      	str	r3, [sp, #48]	; 0x30
 8008226:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008228:	4bc4      	ldr	r3, [pc, #784]	; (800853c <__ieee754_pow+0x72c>)
 800822a:	4413      	add	r3, r2
 800822c:	ed93 7b00 	vldr	d7, [r3]
 8008230:	4629      	mov	r1, r5
 8008232:	ec53 2b17 	vmov	r2, r3, d7
 8008236:	ed8d 7b06 	vstr	d7, [sp, #24]
 800823a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800823e:	f7f7 ffcb 	bl	80001d8 <__aeabi_dsub>
 8008242:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008246:	4606      	mov	r6, r0
 8008248:	460f      	mov	r7, r1
 800824a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800824e:	f7f7 ffc5 	bl	80001dc <__adddf3>
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	2000      	movs	r0, #0
 8008258:	49b9      	ldr	r1, [pc, #740]	; (8008540 <__ieee754_pow+0x730>)
 800825a:	f7f8 fa9f 	bl	800079c <__aeabi_ddiv>
 800825e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008262:	4602      	mov	r2, r0
 8008264:	460b      	mov	r3, r1
 8008266:	4630      	mov	r0, r6
 8008268:	4639      	mov	r1, r7
 800826a:	f7f8 f96d 	bl	8000548 <__aeabi_dmul>
 800826e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008272:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008276:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800827a:	2300      	movs	r3, #0
 800827c:	9302      	str	r3, [sp, #8]
 800827e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008282:	106d      	asrs	r5, r5, #1
 8008284:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008288:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800828c:	2200      	movs	r2, #0
 800828e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008292:	4640      	mov	r0, r8
 8008294:	4649      	mov	r1, r9
 8008296:	4614      	mov	r4, r2
 8008298:	461d      	mov	r5, r3
 800829a:	f7f8 f955 	bl	8000548 <__aeabi_dmul>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	4630      	mov	r0, r6
 80082a4:	4639      	mov	r1, r7
 80082a6:	f7f7 ff97 	bl	80001d8 <__aeabi_dsub>
 80082aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082ae:	4606      	mov	r6, r0
 80082b0:	460f      	mov	r7, r1
 80082b2:	4620      	mov	r0, r4
 80082b4:	4629      	mov	r1, r5
 80082b6:	f7f7 ff8f 	bl	80001d8 <__aeabi_dsub>
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80082c2:	f7f7 ff89 	bl	80001d8 <__aeabi_dsub>
 80082c6:	4642      	mov	r2, r8
 80082c8:	464b      	mov	r3, r9
 80082ca:	f7f8 f93d 	bl	8000548 <__aeabi_dmul>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	4630      	mov	r0, r6
 80082d4:	4639      	mov	r1, r7
 80082d6:	f7f7 ff7f 	bl	80001d8 <__aeabi_dsub>
 80082da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80082de:	f7f8 f933 	bl	8000548 <__aeabi_dmul>
 80082e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80082ea:	4610      	mov	r0, r2
 80082ec:	4619      	mov	r1, r3
 80082ee:	f7f8 f92b 	bl	8000548 <__aeabi_dmul>
 80082f2:	a37b      	add	r3, pc, #492	; (adr r3, 80084e0 <__ieee754_pow+0x6d0>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	4604      	mov	r4, r0
 80082fa:	460d      	mov	r5, r1
 80082fc:	f7f8 f924 	bl	8000548 <__aeabi_dmul>
 8008300:	a379      	add	r3, pc, #484	; (adr r3, 80084e8 <__ieee754_pow+0x6d8>)
 8008302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008306:	f7f7 ff69 	bl	80001dc <__adddf3>
 800830a:	4622      	mov	r2, r4
 800830c:	462b      	mov	r3, r5
 800830e:	f7f8 f91b 	bl	8000548 <__aeabi_dmul>
 8008312:	a377      	add	r3, pc, #476	; (adr r3, 80084f0 <__ieee754_pow+0x6e0>)
 8008314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008318:	f7f7 ff60 	bl	80001dc <__adddf3>
 800831c:	4622      	mov	r2, r4
 800831e:	462b      	mov	r3, r5
 8008320:	f7f8 f912 	bl	8000548 <__aeabi_dmul>
 8008324:	a374      	add	r3, pc, #464	; (adr r3, 80084f8 <__ieee754_pow+0x6e8>)
 8008326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832a:	f7f7 ff57 	bl	80001dc <__adddf3>
 800832e:	4622      	mov	r2, r4
 8008330:	462b      	mov	r3, r5
 8008332:	f7f8 f909 	bl	8000548 <__aeabi_dmul>
 8008336:	a372      	add	r3, pc, #456	; (adr r3, 8008500 <__ieee754_pow+0x6f0>)
 8008338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833c:	f7f7 ff4e 	bl	80001dc <__adddf3>
 8008340:	4622      	mov	r2, r4
 8008342:	462b      	mov	r3, r5
 8008344:	f7f8 f900 	bl	8000548 <__aeabi_dmul>
 8008348:	a36f      	add	r3, pc, #444	; (adr r3, 8008508 <__ieee754_pow+0x6f8>)
 800834a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834e:	f7f7 ff45 	bl	80001dc <__adddf3>
 8008352:	4622      	mov	r2, r4
 8008354:	4606      	mov	r6, r0
 8008356:	460f      	mov	r7, r1
 8008358:	462b      	mov	r3, r5
 800835a:	4620      	mov	r0, r4
 800835c:	4629      	mov	r1, r5
 800835e:	f7f8 f8f3 	bl	8000548 <__aeabi_dmul>
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4630      	mov	r0, r6
 8008368:	4639      	mov	r1, r7
 800836a:	f7f8 f8ed 	bl	8000548 <__aeabi_dmul>
 800836e:	4642      	mov	r2, r8
 8008370:	4604      	mov	r4, r0
 8008372:	460d      	mov	r5, r1
 8008374:	464b      	mov	r3, r9
 8008376:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800837a:	f7f7 ff2f 	bl	80001dc <__adddf3>
 800837e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008382:	f7f8 f8e1 	bl	8000548 <__aeabi_dmul>
 8008386:	4622      	mov	r2, r4
 8008388:	462b      	mov	r3, r5
 800838a:	f7f7 ff27 	bl	80001dc <__adddf3>
 800838e:	4642      	mov	r2, r8
 8008390:	4606      	mov	r6, r0
 8008392:	460f      	mov	r7, r1
 8008394:	464b      	mov	r3, r9
 8008396:	4640      	mov	r0, r8
 8008398:	4649      	mov	r1, r9
 800839a:	f7f8 f8d5 	bl	8000548 <__aeabi_dmul>
 800839e:	2200      	movs	r2, #0
 80083a0:	4b68      	ldr	r3, [pc, #416]	; (8008544 <__ieee754_pow+0x734>)
 80083a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80083a6:	f7f7 ff19 	bl	80001dc <__adddf3>
 80083aa:	4632      	mov	r2, r6
 80083ac:	463b      	mov	r3, r7
 80083ae:	f7f7 ff15 	bl	80001dc <__adddf3>
 80083b2:	9802      	ldr	r0, [sp, #8]
 80083b4:	460d      	mov	r5, r1
 80083b6:	4604      	mov	r4, r0
 80083b8:	4602      	mov	r2, r0
 80083ba:	460b      	mov	r3, r1
 80083bc:	4640      	mov	r0, r8
 80083be:	4649      	mov	r1, r9
 80083c0:	f7f8 f8c2 	bl	8000548 <__aeabi_dmul>
 80083c4:	2200      	movs	r2, #0
 80083c6:	4680      	mov	r8, r0
 80083c8:	4689      	mov	r9, r1
 80083ca:	4b5e      	ldr	r3, [pc, #376]	; (8008544 <__ieee754_pow+0x734>)
 80083cc:	4620      	mov	r0, r4
 80083ce:	4629      	mov	r1, r5
 80083d0:	f7f7 ff02 	bl	80001d8 <__aeabi_dsub>
 80083d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80083d8:	f7f7 fefe 	bl	80001d8 <__aeabi_dsub>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	4630      	mov	r0, r6
 80083e2:	4639      	mov	r1, r7
 80083e4:	f7f7 fef8 	bl	80001d8 <__aeabi_dsub>
 80083e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083ec:	f7f8 f8ac 	bl	8000548 <__aeabi_dmul>
 80083f0:	4622      	mov	r2, r4
 80083f2:	4606      	mov	r6, r0
 80083f4:	460f      	mov	r7, r1
 80083f6:	462b      	mov	r3, r5
 80083f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083fc:	f7f8 f8a4 	bl	8000548 <__aeabi_dmul>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	4630      	mov	r0, r6
 8008406:	4639      	mov	r1, r7
 8008408:	f7f7 fee8 	bl	80001dc <__adddf3>
 800840c:	4606      	mov	r6, r0
 800840e:	460f      	mov	r7, r1
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	4640      	mov	r0, r8
 8008416:	4649      	mov	r1, r9
 8008418:	f7f7 fee0 	bl	80001dc <__adddf3>
 800841c:	9802      	ldr	r0, [sp, #8]
 800841e:	a33c      	add	r3, pc, #240	; (adr r3, 8008510 <__ieee754_pow+0x700>)
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	4604      	mov	r4, r0
 8008426:	460d      	mov	r5, r1
 8008428:	f7f8 f88e 	bl	8000548 <__aeabi_dmul>
 800842c:	4642      	mov	r2, r8
 800842e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008432:	464b      	mov	r3, r9
 8008434:	4620      	mov	r0, r4
 8008436:	4629      	mov	r1, r5
 8008438:	f7f7 fece 	bl	80001d8 <__aeabi_dsub>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	4630      	mov	r0, r6
 8008442:	4639      	mov	r1, r7
 8008444:	f7f7 fec8 	bl	80001d8 <__aeabi_dsub>
 8008448:	a333      	add	r3, pc, #204	; (adr r3, 8008518 <__ieee754_pow+0x708>)
 800844a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844e:	f7f8 f87b 	bl	8000548 <__aeabi_dmul>
 8008452:	a333      	add	r3, pc, #204	; (adr r3, 8008520 <__ieee754_pow+0x710>)
 8008454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008458:	4606      	mov	r6, r0
 800845a:	460f      	mov	r7, r1
 800845c:	4620      	mov	r0, r4
 800845e:	4629      	mov	r1, r5
 8008460:	f7f8 f872 	bl	8000548 <__aeabi_dmul>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	4630      	mov	r0, r6
 800846a:	4639      	mov	r1, r7
 800846c:	f7f7 feb6 	bl	80001dc <__adddf3>
 8008470:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008472:	4b35      	ldr	r3, [pc, #212]	; (8008548 <__ieee754_pow+0x738>)
 8008474:	4413      	add	r3, r2
 8008476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847a:	f7f7 feaf 	bl	80001dc <__adddf3>
 800847e:	4604      	mov	r4, r0
 8008480:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008482:	460d      	mov	r5, r1
 8008484:	f7f7 fff6 	bl	8000474 <__aeabi_i2d>
 8008488:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800848a:	4b30      	ldr	r3, [pc, #192]	; (800854c <__ieee754_pow+0x73c>)
 800848c:	4413      	add	r3, r2
 800848e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008492:	4606      	mov	r6, r0
 8008494:	460f      	mov	r7, r1
 8008496:	4622      	mov	r2, r4
 8008498:	462b      	mov	r3, r5
 800849a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800849e:	f7f7 fe9d 	bl	80001dc <__adddf3>
 80084a2:	4642      	mov	r2, r8
 80084a4:	464b      	mov	r3, r9
 80084a6:	f7f7 fe99 	bl	80001dc <__adddf3>
 80084aa:	4632      	mov	r2, r6
 80084ac:	463b      	mov	r3, r7
 80084ae:	f7f7 fe95 	bl	80001dc <__adddf3>
 80084b2:	9802      	ldr	r0, [sp, #8]
 80084b4:	4632      	mov	r2, r6
 80084b6:	463b      	mov	r3, r7
 80084b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084bc:	f7f7 fe8c 	bl	80001d8 <__aeabi_dsub>
 80084c0:	4642      	mov	r2, r8
 80084c2:	464b      	mov	r3, r9
 80084c4:	f7f7 fe88 	bl	80001d8 <__aeabi_dsub>
 80084c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084cc:	e607      	b.n	80080de <__ieee754_pow+0x2ce>
 80084ce:	f04f 0a01 	mov.w	sl, #1
 80084d2:	e6a5      	b.n	8008220 <__ieee754_pow+0x410>
 80084d4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008528 <__ieee754_pow+0x718>
 80084d8:	e613      	b.n	8008102 <__ieee754_pow+0x2f2>
 80084da:	bf00      	nop
 80084dc:	f3af 8000 	nop.w
 80084e0:	4a454eef 	.word	0x4a454eef
 80084e4:	3fca7e28 	.word	0x3fca7e28
 80084e8:	93c9db65 	.word	0x93c9db65
 80084ec:	3fcd864a 	.word	0x3fcd864a
 80084f0:	a91d4101 	.word	0xa91d4101
 80084f4:	3fd17460 	.word	0x3fd17460
 80084f8:	518f264d 	.word	0x518f264d
 80084fc:	3fd55555 	.word	0x3fd55555
 8008500:	db6fabff 	.word	0xdb6fabff
 8008504:	3fdb6db6 	.word	0x3fdb6db6
 8008508:	33333303 	.word	0x33333303
 800850c:	3fe33333 	.word	0x3fe33333
 8008510:	e0000000 	.word	0xe0000000
 8008514:	3feec709 	.word	0x3feec709
 8008518:	dc3a03fd 	.word	0xdc3a03fd
 800851c:	3feec709 	.word	0x3feec709
 8008520:	145b01f5 	.word	0x145b01f5
 8008524:	be3e2fe0 	.word	0xbe3e2fe0
 8008528:	00000000 	.word	0x00000000
 800852c:	3ff00000 	.word	0x3ff00000
 8008530:	43400000 	.word	0x43400000
 8008534:	0003988e 	.word	0x0003988e
 8008538:	000bb679 	.word	0x000bb679
 800853c:	08009b78 	.word	0x08009b78
 8008540:	3ff00000 	.word	0x3ff00000
 8008544:	40080000 	.word	0x40080000
 8008548:	08009b98 	.word	0x08009b98
 800854c:	08009b88 	.word	0x08009b88
 8008550:	a3b4      	add	r3, pc, #720	; (adr r3, 8008824 <__ieee754_pow+0xa14>)
 8008552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008556:	4640      	mov	r0, r8
 8008558:	4649      	mov	r1, r9
 800855a:	f7f7 fe3f 	bl	80001dc <__adddf3>
 800855e:	4622      	mov	r2, r4
 8008560:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008564:	462b      	mov	r3, r5
 8008566:	4630      	mov	r0, r6
 8008568:	4639      	mov	r1, r7
 800856a:	f7f7 fe35 	bl	80001d8 <__aeabi_dsub>
 800856e:	4602      	mov	r2, r0
 8008570:	460b      	mov	r3, r1
 8008572:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008576:	f7f8 fa77 	bl	8000a68 <__aeabi_dcmpgt>
 800857a:	2800      	cmp	r0, #0
 800857c:	f47f adfe 	bne.w	800817c <__ieee754_pow+0x36c>
 8008580:	4aa3      	ldr	r2, [pc, #652]	; (8008810 <__ieee754_pow+0xa00>)
 8008582:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008586:	4293      	cmp	r3, r2
 8008588:	f340 810a 	ble.w	80087a0 <__ieee754_pow+0x990>
 800858c:	151b      	asrs	r3, r3, #20
 800858e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008592:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008596:	fa4a f303 	asr.w	r3, sl, r3
 800859a:	445b      	add	r3, fp
 800859c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80085a0:	4e9c      	ldr	r6, [pc, #624]	; (8008814 <__ieee754_pow+0xa04>)
 80085a2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80085a6:	4116      	asrs	r6, r2
 80085a8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80085ac:	2000      	movs	r0, #0
 80085ae:	ea23 0106 	bic.w	r1, r3, r6
 80085b2:	f1c2 0214 	rsb	r2, r2, #20
 80085b6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80085ba:	fa4a fa02 	asr.w	sl, sl, r2
 80085be:	f1bb 0f00 	cmp.w	fp, #0
 80085c2:	4602      	mov	r2, r0
 80085c4:	460b      	mov	r3, r1
 80085c6:	4620      	mov	r0, r4
 80085c8:	4629      	mov	r1, r5
 80085ca:	bfb8      	it	lt
 80085cc:	f1ca 0a00 	rsblt	sl, sl, #0
 80085d0:	f7f7 fe02 	bl	80001d8 <__aeabi_dsub>
 80085d4:	e9cd 0100 	strd	r0, r1, [sp]
 80085d8:	4642      	mov	r2, r8
 80085da:	464b      	mov	r3, r9
 80085dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085e0:	f7f7 fdfc 	bl	80001dc <__adddf3>
 80085e4:	2000      	movs	r0, #0
 80085e6:	a378      	add	r3, pc, #480	; (adr r3, 80087c8 <__ieee754_pow+0x9b8>)
 80085e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ec:	4604      	mov	r4, r0
 80085ee:	460d      	mov	r5, r1
 80085f0:	f7f7 ffaa 	bl	8000548 <__aeabi_dmul>
 80085f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085f8:	4606      	mov	r6, r0
 80085fa:	460f      	mov	r7, r1
 80085fc:	4620      	mov	r0, r4
 80085fe:	4629      	mov	r1, r5
 8008600:	f7f7 fdea 	bl	80001d8 <__aeabi_dsub>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	4640      	mov	r0, r8
 800860a:	4649      	mov	r1, r9
 800860c:	f7f7 fde4 	bl	80001d8 <__aeabi_dsub>
 8008610:	a36f      	add	r3, pc, #444	; (adr r3, 80087d0 <__ieee754_pow+0x9c0>)
 8008612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008616:	f7f7 ff97 	bl	8000548 <__aeabi_dmul>
 800861a:	a36f      	add	r3, pc, #444	; (adr r3, 80087d8 <__ieee754_pow+0x9c8>)
 800861c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008620:	4680      	mov	r8, r0
 8008622:	4689      	mov	r9, r1
 8008624:	4620      	mov	r0, r4
 8008626:	4629      	mov	r1, r5
 8008628:	f7f7 ff8e 	bl	8000548 <__aeabi_dmul>
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	4640      	mov	r0, r8
 8008632:	4649      	mov	r1, r9
 8008634:	f7f7 fdd2 	bl	80001dc <__adddf3>
 8008638:	4604      	mov	r4, r0
 800863a:	460d      	mov	r5, r1
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	4630      	mov	r0, r6
 8008642:	4639      	mov	r1, r7
 8008644:	f7f7 fdca 	bl	80001dc <__adddf3>
 8008648:	4632      	mov	r2, r6
 800864a:	463b      	mov	r3, r7
 800864c:	4680      	mov	r8, r0
 800864e:	4689      	mov	r9, r1
 8008650:	f7f7 fdc2 	bl	80001d8 <__aeabi_dsub>
 8008654:	4602      	mov	r2, r0
 8008656:	460b      	mov	r3, r1
 8008658:	4620      	mov	r0, r4
 800865a:	4629      	mov	r1, r5
 800865c:	f7f7 fdbc 	bl	80001d8 <__aeabi_dsub>
 8008660:	4642      	mov	r2, r8
 8008662:	4606      	mov	r6, r0
 8008664:	460f      	mov	r7, r1
 8008666:	464b      	mov	r3, r9
 8008668:	4640      	mov	r0, r8
 800866a:	4649      	mov	r1, r9
 800866c:	f7f7 ff6c 	bl	8000548 <__aeabi_dmul>
 8008670:	a35b      	add	r3, pc, #364	; (adr r3, 80087e0 <__ieee754_pow+0x9d0>)
 8008672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008676:	4604      	mov	r4, r0
 8008678:	460d      	mov	r5, r1
 800867a:	f7f7 ff65 	bl	8000548 <__aeabi_dmul>
 800867e:	a35a      	add	r3, pc, #360	; (adr r3, 80087e8 <__ieee754_pow+0x9d8>)
 8008680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008684:	f7f7 fda8 	bl	80001d8 <__aeabi_dsub>
 8008688:	4622      	mov	r2, r4
 800868a:	462b      	mov	r3, r5
 800868c:	f7f7 ff5c 	bl	8000548 <__aeabi_dmul>
 8008690:	a357      	add	r3, pc, #348	; (adr r3, 80087f0 <__ieee754_pow+0x9e0>)
 8008692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008696:	f7f7 fda1 	bl	80001dc <__adddf3>
 800869a:	4622      	mov	r2, r4
 800869c:	462b      	mov	r3, r5
 800869e:	f7f7 ff53 	bl	8000548 <__aeabi_dmul>
 80086a2:	a355      	add	r3, pc, #340	; (adr r3, 80087f8 <__ieee754_pow+0x9e8>)
 80086a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a8:	f7f7 fd96 	bl	80001d8 <__aeabi_dsub>
 80086ac:	4622      	mov	r2, r4
 80086ae:	462b      	mov	r3, r5
 80086b0:	f7f7 ff4a 	bl	8000548 <__aeabi_dmul>
 80086b4:	a352      	add	r3, pc, #328	; (adr r3, 8008800 <__ieee754_pow+0x9f0>)
 80086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ba:	f7f7 fd8f 	bl	80001dc <__adddf3>
 80086be:	4622      	mov	r2, r4
 80086c0:	462b      	mov	r3, r5
 80086c2:	f7f7 ff41 	bl	8000548 <__aeabi_dmul>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	4640      	mov	r0, r8
 80086cc:	4649      	mov	r1, r9
 80086ce:	f7f7 fd83 	bl	80001d8 <__aeabi_dsub>
 80086d2:	4604      	mov	r4, r0
 80086d4:	460d      	mov	r5, r1
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	4640      	mov	r0, r8
 80086dc:	4649      	mov	r1, r9
 80086de:	f7f7 ff33 	bl	8000548 <__aeabi_dmul>
 80086e2:	2200      	movs	r2, #0
 80086e4:	e9cd 0100 	strd	r0, r1, [sp]
 80086e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80086ec:	4620      	mov	r0, r4
 80086ee:	4629      	mov	r1, r5
 80086f0:	f7f7 fd72 	bl	80001d8 <__aeabi_dsub>
 80086f4:	4602      	mov	r2, r0
 80086f6:	460b      	mov	r3, r1
 80086f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086fc:	f7f8 f84e 	bl	800079c <__aeabi_ddiv>
 8008700:	4632      	mov	r2, r6
 8008702:	4604      	mov	r4, r0
 8008704:	460d      	mov	r5, r1
 8008706:	463b      	mov	r3, r7
 8008708:	4640      	mov	r0, r8
 800870a:	4649      	mov	r1, r9
 800870c:	f7f7 ff1c 	bl	8000548 <__aeabi_dmul>
 8008710:	4632      	mov	r2, r6
 8008712:	463b      	mov	r3, r7
 8008714:	f7f7 fd62 	bl	80001dc <__adddf3>
 8008718:	4602      	mov	r2, r0
 800871a:	460b      	mov	r3, r1
 800871c:	4620      	mov	r0, r4
 800871e:	4629      	mov	r1, r5
 8008720:	f7f7 fd5a 	bl	80001d8 <__aeabi_dsub>
 8008724:	4642      	mov	r2, r8
 8008726:	464b      	mov	r3, r9
 8008728:	f7f7 fd56 	bl	80001d8 <__aeabi_dsub>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	2000      	movs	r0, #0
 8008732:	4939      	ldr	r1, [pc, #228]	; (8008818 <__ieee754_pow+0xa08>)
 8008734:	f7f7 fd50 	bl	80001d8 <__aeabi_dsub>
 8008738:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800873c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008740:	4602      	mov	r2, r0
 8008742:	460b      	mov	r3, r1
 8008744:	da2f      	bge.n	80087a6 <__ieee754_pow+0x996>
 8008746:	4650      	mov	r0, sl
 8008748:	ec43 2b10 	vmov	d0, r2, r3
 800874c:	f001 f8fc 	bl	8009948 <scalbn>
 8008750:	ec51 0b10 	vmov	r0, r1, d0
 8008754:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008758:	f7ff bbf1 	b.w	8007f3e <__ieee754_pow+0x12e>
 800875c:	4b2f      	ldr	r3, [pc, #188]	; (800881c <__ieee754_pow+0xa0c>)
 800875e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008762:	429e      	cmp	r6, r3
 8008764:	f77f af0c 	ble.w	8008580 <__ieee754_pow+0x770>
 8008768:	4b2d      	ldr	r3, [pc, #180]	; (8008820 <__ieee754_pow+0xa10>)
 800876a:	440b      	add	r3, r1
 800876c:	4303      	orrs	r3, r0
 800876e:	d00b      	beq.n	8008788 <__ieee754_pow+0x978>
 8008770:	a325      	add	r3, pc, #148	; (adr r3, 8008808 <__ieee754_pow+0x9f8>)
 8008772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800877a:	f7f7 fee5 	bl	8000548 <__aeabi_dmul>
 800877e:	a322      	add	r3, pc, #136	; (adr r3, 8008808 <__ieee754_pow+0x9f8>)
 8008780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008784:	f7ff bbdb 	b.w	8007f3e <__ieee754_pow+0x12e>
 8008788:	4622      	mov	r2, r4
 800878a:	462b      	mov	r3, r5
 800878c:	f7f7 fd24 	bl	80001d8 <__aeabi_dsub>
 8008790:	4642      	mov	r2, r8
 8008792:	464b      	mov	r3, r9
 8008794:	f7f8 f95e 	bl	8000a54 <__aeabi_dcmpge>
 8008798:	2800      	cmp	r0, #0
 800879a:	f43f aef1 	beq.w	8008580 <__ieee754_pow+0x770>
 800879e:	e7e7      	b.n	8008770 <__ieee754_pow+0x960>
 80087a0:	f04f 0a00 	mov.w	sl, #0
 80087a4:	e718      	b.n	80085d8 <__ieee754_pow+0x7c8>
 80087a6:	4621      	mov	r1, r4
 80087a8:	e7d4      	b.n	8008754 <__ieee754_pow+0x944>
 80087aa:	2000      	movs	r0, #0
 80087ac:	491a      	ldr	r1, [pc, #104]	; (8008818 <__ieee754_pow+0xa08>)
 80087ae:	f7ff bb8f 	b.w	8007ed0 <__ieee754_pow+0xc0>
 80087b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087b6:	f7ff bb8b 	b.w	8007ed0 <__ieee754_pow+0xc0>
 80087ba:	4630      	mov	r0, r6
 80087bc:	4639      	mov	r1, r7
 80087be:	f7ff bb87 	b.w	8007ed0 <__ieee754_pow+0xc0>
 80087c2:	4693      	mov	fp, r2
 80087c4:	f7ff bb98 	b.w	8007ef8 <__ieee754_pow+0xe8>
 80087c8:	00000000 	.word	0x00000000
 80087cc:	3fe62e43 	.word	0x3fe62e43
 80087d0:	fefa39ef 	.word	0xfefa39ef
 80087d4:	3fe62e42 	.word	0x3fe62e42
 80087d8:	0ca86c39 	.word	0x0ca86c39
 80087dc:	be205c61 	.word	0xbe205c61
 80087e0:	72bea4d0 	.word	0x72bea4d0
 80087e4:	3e663769 	.word	0x3e663769
 80087e8:	c5d26bf1 	.word	0xc5d26bf1
 80087ec:	3ebbbd41 	.word	0x3ebbbd41
 80087f0:	af25de2c 	.word	0xaf25de2c
 80087f4:	3f11566a 	.word	0x3f11566a
 80087f8:	16bebd93 	.word	0x16bebd93
 80087fc:	3f66c16c 	.word	0x3f66c16c
 8008800:	5555553e 	.word	0x5555553e
 8008804:	3fc55555 	.word	0x3fc55555
 8008808:	c2f8f359 	.word	0xc2f8f359
 800880c:	01a56e1f 	.word	0x01a56e1f
 8008810:	3fe00000 	.word	0x3fe00000
 8008814:	000fffff 	.word	0x000fffff
 8008818:	3ff00000 	.word	0x3ff00000
 800881c:	4090cbff 	.word	0x4090cbff
 8008820:	3f6f3400 	.word	0x3f6f3400
 8008824:	652b82fe 	.word	0x652b82fe
 8008828:	3c971547 	.word	0x3c971547
 800882c:	00000000 	.word	0x00000000

08008830 <__ieee754_rem_pio2>:
 8008830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008834:	ec57 6b10 	vmov	r6, r7, d0
 8008838:	4bc3      	ldr	r3, [pc, #780]	; (8008b48 <__ieee754_rem_pio2+0x318>)
 800883a:	b08d      	sub	sp, #52	; 0x34
 800883c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008840:	4598      	cmp	r8, r3
 8008842:	4604      	mov	r4, r0
 8008844:	9704      	str	r7, [sp, #16]
 8008846:	dc07      	bgt.n	8008858 <__ieee754_rem_pio2+0x28>
 8008848:	2200      	movs	r2, #0
 800884a:	2300      	movs	r3, #0
 800884c:	ed84 0b00 	vstr	d0, [r4]
 8008850:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008854:	2500      	movs	r5, #0
 8008856:	e027      	b.n	80088a8 <__ieee754_rem_pio2+0x78>
 8008858:	4bbc      	ldr	r3, [pc, #752]	; (8008b4c <__ieee754_rem_pio2+0x31c>)
 800885a:	4598      	cmp	r8, r3
 800885c:	dc75      	bgt.n	800894a <__ieee754_rem_pio2+0x11a>
 800885e:	9b04      	ldr	r3, [sp, #16]
 8008860:	4dbb      	ldr	r5, [pc, #748]	; (8008b50 <__ieee754_rem_pio2+0x320>)
 8008862:	2b00      	cmp	r3, #0
 8008864:	ee10 0a10 	vmov	r0, s0
 8008868:	a3a9      	add	r3, pc, #676	; (adr r3, 8008b10 <__ieee754_rem_pio2+0x2e0>)
 800886a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886e:	4639      	mov	r1, r7
 8008870:	dd36      	ble.n	80088e0 <__ieee754_rem_pio2+0xb0>
 8008872:	f7f7 fcb1 	bl	80001d8 <__aeabi_dsub>
 8008876:	45a8      	cmp	r8, r5
 8008878:	4606      	mov	r6, r0
 800887a:	460f      	mov	r7, r1
 800887c:	d018      	beq.n	80088b0 <__ieee754_rem_pio2+0x80>
 800887e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x2e8>)
 8008880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008884:	f7f7 fca8 	bl	80001d8 <__aeabi_dsub>
 8008888:	4602      	mov	r2, r0
 800888a:	460b      	mov	r3, r1
 800888c:	e9c4 2300 	strd	r2, r3, [r4]
 8008890:	4630      	mov	r0, r6
 8008892:	4639      	mov	r1, r7
 8008894:	f7f7 fca0 	bl	80001d8 <__aeabi_dsub>
 8008898:	a39f      	add	r3, pc, #636	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x2e8>)
 800889a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889e:	f7f7 fc9b 	bl	80001d8 <__aeabi_dsub>
 80088a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80088a6:	2501      	movs	r5, #1
 80088a8:	4628      	mov	r0, r5
 80088aa:	b00d      	add	sp, #52	; 0x34
 80088ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b0:	a39b      	add	r3, pc, #620	; (adr r3, 8008b20 <__ieee754_rem_pio2+0x2f0>)
 80088b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b6:	f7f7 fc8f 	bl	80001d8 <__aeabi_dsub>
 80088ba:	a39b      	add	r3, pc, #620	; (adr r3, 8008b28 <__ieee754_rem_pio2+0x2f8>)
 80088bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c0:	4606      	mov	r6, r0
 80088c2:	460f      	mov	r7, r1
 80088c4:	f7f7 fc88 	bl	80001d8 <__aeabi_dsub>
 80088c8:	4602      	mov	r2, r0
 80088ca:	460b      	mov	r3, r1
 80088cc:	e9c4 2300 	strd	r2, r3, [r4]
 80088d0:	4630      	mov	r0, r6
 80088d2:	4639      	mov	r1, r7
 80088d4:	f7f7 fc80 	bl	80001d8 <__aeabi_dsub>
 80088d8:	a393      	add	r3, pc, #588	; (adr r3, 8008b28 <__ieee754_rem_pio2+0x2f8>)
 80088da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088de:	e7de      	b.n	800889e <__ieee754_rem_pio2+0x6e>
 80088e0:	f7f7 fc7c 	bl	80001dc <__adddf3>
 80088e4:	45a8      	cmp	r8, r5
 80088e6:	4606      	mov	r6, r0
 80088e8:	460f      	mov	r7, r1
 80088ea:	d016      	beq.n	800891a <__ieee754_rem_pio2+0xea>
 80088ec:	a38a      	add	r3, pc, #552	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x2e8>)
 80088ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f2:	f7f7 fc73 	bl	80001dc <__adddf3>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	e9c4 2300 	strd	r2, r3, [r4]
 80088fe:	4630      	mov	r0, r6
 8008900:	4639      	mov	r1, r7
 8008902:	f7f7 fc69 	bl	80001d8 <__aeabi_dsub>
 8008906:	a384      	add	r3, pc, #528	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x2e8>)
 8008908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890c:	f7f7 fc66 	bl	80001dc <__adddf3>
 8008910:	f04f 35ff 	mov.w	r5, #4294967295
 8008914:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008918:	e7c6      	b.n	80088a8 <__ieee754_rem_pio2+0x78>
 800891a:	a381      	add	r3, pc, #516	; (adr r3, 8008b20 <__ieee754_rem_pio2+0x2f0>)
 800891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008920:	f7f7 fc5c 	bl	80001dc <__adddf3>
 8008924:	a380      	add	r3, pc, #512	; (adr r3, 8008b28 <__ieee754_rem_pio2+0x2f8>)
 8008926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892a:	4606      	mov	r6, r0
 800892c:	460f      	mov	r7, r1
 800892e:	f7f7 fc55 	bl	80001dc <__adddf3>
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	e9c4 2300 	strd	r2, r3, [r4]
 800893a:	4630      	mov	r0, r6
 800893c:	4639      	mov	r1, r7
 800893e:	f7f7 fc4b 	bl	80001d8 <__aeabi_dsub>
 8008942:	a379      	add	r3, pc, #484	; (adr r3, 8008b28 <__ieee754_rem_pio2+0x2f8>)
 8008944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008948:	e7e0      	b.n	800890c <__ieee754_rem_pio2+0xdc>
 800894a:	4b82      	ldr	r3, [pc, #520]	; (8008b54 <__ieee754_rem_pio2+0x324>)
 800894c:	4598      	cmp	r8, r3
 800894e:	f300 80d0 	bgt.w	8008af2 <__ieee754_rem_pio2+0x2c2>
 8008952:	f000 fed3 	bl	80096fc <fabs>
 8008956:	ec57 6b10 	vmov	r6, r7, d0
 800895a:	ee10 0a10 	vmov	r0, s0
 800895e:	a374      	add	r3, pc, #464	; (adr r3, 8008b30 <__ieee754_rem_pio2+0x300>)
 8008960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008964:	4639      	mov	r1, r7
 8008966:	f7f7 fdef 	bl	8000548 <__aeabi_dmul>
 800896a:	2200      	movs	r2, #0
 800896c:	4b7a      	ldr	r3, [pc, #488]	; (8008b58 <__ieee754_rem_pio2+0x328>)
 800896e:	f7f7 fc35 	bl	80001dc <__adddf3>
 8008972:	f7f8 f899 	bl	8000aa8 <__aeabi_d2iz>
 8008976:	4605      	mov	r5, r0
 8008978:	f7f7 fd7c 	bl	8000474 <__aeabi_i2d>
 800897c:	a364      	add	r3, pc, #400	; (adr r3, 8008b10 <__ieee754_rem_pio2+0x2e0>)
 800897e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008982:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008986:	f7f7 fddf 	bl	8000548 <__aeabi_dmul>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	4630      	mov	r0, r6
 8008990:	4639      	mov	r1, r7
 8008992:	f7f7 fc21 	bl	80001d8 <__aeabi_dsub>
 8008996:	a360      	add	r3, pc, #384	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x2e8>)
 8008998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899c:	4682      	mov	sl, r0
 800899e:	468b      	mov	fp, r1
 80089a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089a4:	f7f7 fdd0 	bl	8000548 <__aeabi_dmul>
 80089a8:	2d1f      	cmp	r5, #31
 80089aa:	4606      	mov	r6, r0
 80089ac:	460f      	mov	r7, r1
 80089ae:	dc0c      	bgt.n	80089ca <__ieee754_rem_pio2+0x19a>
 80089b0:	1e6a      	subs	r2, r5, #1
 80089b2:	4b6a      	ldr	r3, [pc, #424]	; (8008b5c <__ieee754_rem_pio2+0x32c>)
 80089b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b8:	4543      	cmp	r3, r8
 80089ba:	d006      	beq.n	80089ca <__ieee754_rem_pio2+0x19a>
 80089bc:	4632      	mov	r2, r6
 80089be:	463b      	mov	r3, r7
 80089c0:	4650      	mov	r0, sl
 80089c2:	4659      	mov	r1, fp
 80089c4:	f7f7 fc08 	bl	80001d8 <__aeabi_dsub>
 80089c8:	e00e      	b.n	80089e8 <__ieee754_rem_pio2+0x1b8>
 80089ca:	4632      	mov	r2, r6
 80089cc:	463b      	mov	r3, r7
 80089ce:	4650      	mov	r0, sl
 80089d0:	4659      	mov	r1, fp
 80089d2:	f7f7 fc01 	bl	80001d8 <__aeabi_dsub>
 80089d6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80089da:	9305      	str	r3, [sp, #20]
 80089dc:	9a05      	ldr	r2, [sp, #20]
 80089de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	2b10      	cmp	r3, #16
 80089e6:	dc02      	bgt.n	80089ee <__ieee754_rem_pio2+0x1be>
 80089e8:	e9c4 0100 	strd	r0, r1, [r4]
 80089ec:	e039      	b.n	8008a62 <__ieee754_rem_pio2+0x232>
 80089ee:	a34c      	add	r3, pc, #304	; (adr r3, 8008b20 <__ieee754_rem_pio2+0x2f0>)
 80089f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089f8:	f7f7 fda6 	bl	8000548 <__aeabi_dmul>
 80089fc:	4606      	mov	r6, r0
 80089fe:	460f      	mov	r7, r1
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4650      	mov	r0, sl
 8008a06:	4659      	mov	r1, fp
 8008a08:	f7f7 fbe6 	bl	80001d8 <__aeabi_dsub>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	4680      	mov	r8, r0
 8008a12:	4689      	mov	r9, r1
 8008a14:	4650      	mov	r0, sl
 8008a16:	4659      	mov	r1, fp
 8008a18:	f7f7 fbde 	bl	80001d8 <__aeabi_dsub>
 8008a1c:	4632      	mov	r2, r6
 8008a1e:	463b      	mov	r3, r7
 8008a20:	f7f7 fbda 	bl	80001d8 <__aeabi_dsub>
 8008a24:	a340      	add	r3, pc, #256	; (adr r3, 8008b28 <__ieee754_rem_pio2+0x2f8>)
 8008a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	460f      	mov	r7, r1
 8008a2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a32:	f7f7 fd89 	bl	8000548 <__aeabi_dmul>
 8008a36:	4632      	mov	r2, r6
 8008a38:	463b      	mov	r3, r7
 8008a3a:	f7f7 fbcd 	bl	80001d8 <__aeabi_dsub>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	4606      	mov	r6, r0
 8008a44:	460f      	mov	r7, r1
 8008a46:	4640      	mov	r0, r8
 8008a48:	4649      	mov	r1, r9
 8008a4a:	f7f7 fbc5 	bl	80001d8 <__aeabi_dsub>
 8008a4e:	9a05      	ldr	r2, [sp, #20]
 8008a50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	2b31      	cmp	r3, #49	; 0x31
 8008a58:	dc20      	bgt.n	8008a9c <__ieee754_rem_pio2+0x26c>
 8008a5a:	e9c4 0100 	strd	r0, r1, [r4]
 8008a5e:	46c2      	mov	sl, r8
 8008a60:	46cb      	mov	fp, r9
 8008a62:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008a66:	4650      	mov	r0, sl
 8008a68:	4642      	mov	r2, r8
 8008a6a:	464b      	mov	r3, r9
 8008a6c:	4659      	mov	r1, fp
 8008a6e:	f7f7 fbb3 	bl	80001d8 <__aeabi_dsub>
 8008a72:	463b      	mov	r3, r7
 8008a74:	4632      	mov	r2, r6
 8008a76:	f7f7 fbaf 	bl	80001d8 <__aeabi_dsub>
 8008a7a:	9b04      	ldr	r3, [sp, #16]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008a82:	f6bf af11 	bge.w	80088a8 <__ieee754_rem_pio2+0x78>
 8008a86:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a8a:	6063      	str	r3, [r4, #4]
 8008a8c:	f8c4 8000 	str.w	r8, [r4]
 8008a90:	60a0      	str	r0, [r4, #8]
 8008a92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a96:	60e3      	str	r3, [r4, #12]
 8008a98:	426d      	negs	r5, r5
 8008a9a:	e705      	b.n	80088a8 <__ieee754_rem_pio2+0x78>
 8008a9c:	a326      	add	r3, pc, #152	; (adr r3, 8008b38 <__ieee754_rem_pio2+0x308>)
 8008a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aa6:	f7f7 fd4f 	bl	8000548 <__aeabi_dmul>
 8008aaa:	4606      	mov	r6, r0
 8008aac:	460f      	mov	r7, r1
 8008aae:	4602      	mov	r2, r0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	4649      	mov	r1, r9
 8008ab6:	f7f7 fb8f 	bl	80001d8 <__aeabi_dsub>
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	4682      	mov	sl, r0
 8008ac0:	468b      	mov	fp, r1
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	4649      	mov	r1, r9
 8008ac6:	f7f7 fb87 	bl	80001d8 <__aeabi_dsub>
 8008aca:	4632      	mov	r2, r6
 8008acc:	463b      	mov	r3, r7
 8008ace:	f7f7 fb83 	bl	80001d8 <__aeabi_dsub>
 8008ad2:	a31b      	add	r3, pc, #108	; (adr r3, 8008b40 <__ieee754_rem_pio2+0x310>)
 8008ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad8:	4606      	mov	r6, r0
 8008ada:	460f      	mov	r7, r1
 8008adc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ae0:	f7f7 fd32 	bl	8000548 <__aeabi_dmul>
 8008ae4:	4632      	mov	r2, r6
 8008ae6:	463b      	mov	r3, r7
 8008ae8:	f7f7 fb76 	bl	80001d8 <__aeabi_dsub>
 8008aec:	4606      	mov	r6, r0
 8008aee:	460f      	mov	r7, r1
 8008af0:	e764      	b.n	80089bc <__ieee754_rem_pio2+0x18c>
 8008af2:	4b1b      	ldr	r3, [pc, #108]	; (8008b60 <__ieee754_rem_pio2+0x330>)
 8008af4:	4598      	cmp	r8, r3
 8008af6:	dd35      	ble.n	8008b64 <__ieee754_rem_pio2+0x334>
 8008af8:	ee10 2a10 	vmov	r2, s0
 8008afc:	463b      	mov	r3, r7
 8008afe:	4630      	mov	r0, r6
 8008b00:	4639      	mov	r1, r7
 8008b02:	f7f7 fb69 	bl	80001d8 <__aeabi_dsub>
 8008b06:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b0a:	e9c4 0100 	strd	r0, r1, [r4]
 8008b0e:	e6a1      	b.n	8008854 <__ieee754_rem_pio2+0x24>
 8008b10:	54400000 	.word	0x54400000
 8008b14:	3ff921fb 	.word	0x3ff921fb
 8008b18:	1a626331 	.word	0x1a626331
 8008b1c:	3dd0b461 	.word	0x3dd0b461
 8008b20:	1a600000 	.word	0x1a600000
 8008b24:	3dd0b461 	.word	0x3dd0b461
 8008b28:	2e037073 	.word	0x2e037073
 8008b2c:	3ba3198a 	.word	0x3ba3198a
 8008b30:	6dc9c883 	.word	0x6dc9c883
 8008b34:	3fe45f30 	.word	0x3fe45f30
 8008b38:	2e000000 	.word	0x2e000000
 8008b3c:	3ba3198a 	.word	0x3ba3198a
 8008b40:	252049c1 	.word	0x252049c1
 8008b44:	397b839a 	.word	0x397b839a
 8008b48:	3fe921fb 	.word	0x3fe921fb
 8008b4c:	4002d97b 	.word	0x4002d97b
 8008b50:	3ff921fb 	.word	0x3ff921fb
 8008b54:	413921fb 	.word	0x413921fb
 8008b58:	3fe00000 	.word	0x3fe00000
 8008b5c:	08009ba8 	.word	0x08009ba8
 8008b60:	7fefffff 	.word	0x7fefffff
 8008b64:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008b68:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008b6c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008b70:	4630      	mov	r0, r6
 8008b72:	460f      	mov	r7, r1
 8008b74:	f7f7 ff98 	bl	8000aa8 <__aeabi_d2iz>
 8008b78:	f7f7 fc7c 	bl	8000474 <__aeabi_i2d>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4630      	mov	r0, r6
 8008b82:	4639      	mov	r1, r7
 8008b84:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008b88:	f7f7 fb26 	bl	80001d8 <__aeabi_dsub>
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	4b1f      	ldr	r3, [pc, #124]	; (8008c0c <__ieee754_rem_pio2+0x3dc>)
 8008b90:	f7f7 fcda 	bl	8000548 <__aeabi_dmul>
 8008b94:	460f      	mov	r7, r1
 8008b96:	4606      	mov	r6, r0
 8008b98:	f7f7 ff86 	bl	8000aa8 <__aeabi_d2iz>
 8008b9c:	f7f7 fc6a 	bl	8000474 <__aeabi_i2d>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	4639      	mov	r1, r7
 8008ba8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008bac:	f7f7 fb14 	bl	80001d8 <__aeabi_dsub>
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	4b16      	ldr	r3, [pc, #88]	; (8008c0c <__ieee754_rem_pio2+0x3dc>)
 8008bb4:	f7f7 fcc8 	bl	8000548 <__aeabi_dmul>
 8008bb8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008bbc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008bc0:	f04f 0803 	mov.w	r8, #3
 8008bc4:	2600      	movs	r6, #0
 8008bc6:	2700      	movs	r7, #0
 8008bc8:	4632      	mov	r2, r6
 8008bca:	463b      	mov	r3, r7
 8008bcc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008bd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8008bd4:	f7f7 ff20 	bl	8000a18 <__aeabi_dcmpeq>
 8008bd8:	b9b0      	cbnz	r0, 8008c08 <__ieee754_rem_pio2+0x3d8>
 8008bda:	4b0d      	ldr	r3, [pc, #52]	; (8008c10 <__ieee754_rem_pio2+0x3e0>)
 8008bdc:	9301      	str	r3, [sp, #4]
 8008bde:	2302      	movs	r3, #2
 8008be0:	9300      	str	r3, [sp, #0]
 8008be2:	462a      	mov	r2, r5
 8008be4:	4643      	mov	r3, r8
 8008be6:	4621      	mov	r1, r4
 8008be8:	a806      	add	r0, sp, #24
 8008bea:	f000 f98d 	bl	8008f08 <__kernel_rem_pio2>
 8008bee:	9b04      	ldr	r3, [sp, #16]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	4605      	mov	r5, r0
 8008bf4:	f6bf ae58 	bge.w	80088a8 <__ieee754_rem_pio2+0x78>
 8008bf8:	6863      	ldr	r3, [r4, #4]
 8008bfa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008bfe:	6063      	str	r3, [r4, #4]
 8008c00:	68e3      	ldr	r3, [r4, #12]
 8008c02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008c06:	e746      	b.n	8008a96 <__ieee754_rem_pio2+0x266>
 8008c08:	46d0      	mov	r8, sl
 8008c0a:	e7dd      	b.n	8008bc8 <__ieee754_rem_pio2+0x398>
 8008c0c:	41700000 	.word	0x41700000
 8008c10:	08009c28 	.word	0x08009c28

08008c14 <__ieee754_sqrt>:
 8008c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c18:	4955      	ldr	r1, [pc, #340]	; (8008d70 <__ieee754_sqrt+0x15c>)
 8008c1a:	ec55 4b10 	vmov	r4, r5, d0
 8008c1e:	43a9      	bics	r1, r5
 8008c20:	462b      	mov	r3, r5
 8008c22:	462a      	mov	r2, r5
 8008c24:	d112      	bne.n	8008c4c <__ieee754_sqrt+0x38>
 8008c26:	ee10 2a10 	vmov	r2, s0
 8008c2a:	ee10 0a10 	vmov	r0, s0
 8008c2e:	4629      	mov	r1, r5
 8008c30:	f7f7 fc8a 	bl	8000548 <__aeabi_dmul>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4620      	mov	r0, r4
 8008c3a:	4629      	mov	r1, r5
 8008c3c:	f7f7 face 	bl	80001dc <__adddf3>
 8008c40:	4604      	mov	r4, r0
 8008c42:	460d      	mov	r5, r1
 8008c44:	ec45 4b10 	vmov	d0, r4, r5
 8008c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c4c:	2d00      	cmp	r5, #0
 8008c4e:	ee10 0a10 	vmov	r0, s0
 8008c52:	4621      	mov	r1, r4
 8008c54:	dc0f      	bgt.n	8008c76 <__ieee754_sqrt+0x62>
 8008c56:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008c5a:	4330      	orrs	r0, r6
 8008c5c:	d0f2      	beq.n	8008c44 <__ieee754_sqrt+0x30>
 8008c5e:	b155      	cbz	r5, 8008c76 <__ieee754_sqrt+0x62>
 8008c60:	ee10 2a10 	vmov	r2, s0
 8008c64:	4620      	mov	r0, r4
 8008c66:	4629      	mov	r1, r5
 8008c68:	f7f7 fab6 	bl	80001d8 <__aeabi_dsub>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	460b      	mov	r3, r1
 8008c70:	f7f7 fd94 	bl	800079c <__aeabi_ddiv>
 8008c74:	e7e4      	b.n	8008c40 <__ieee754_sqrt+0x2c>
 8008c76:	151b      	asrs	r3, r3, #20
 8008c78:	d073      	beq.n	8008d62 <__ieee754_sqrt+0x14e>
 8008c7a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c7e:	07dd      	lsls	r5, r3, #31
 8008c80:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008c84:	bf48      	it	mi
 8008c86:	0fc8      	lsrmi	r0, r1, #31
 8008c88:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008c8c:	bf44      	itt	mi
 8008c8e:	0049      	lslmi	r1, r1, #1
 8008c90:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008c94:	2500      	movs	r5, #0
 8008c96:	1058      	asrs	r0, r3, #1
 8008c98:	0fcb      	lsrs	r3, r1, #31
 8008c9a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008c9e:	0049      	lsls	r1, r1, #1
 8008ca0:	2316      	movs	r3, #22
 8008ca2:	462c      	mov	r4, r5
 8008ca4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008ca8:	19a7      	adds	r7, r4, r6
 8008caa:	4297      	cmp	r7, r2
 8008cac:	bfde      	ittt	le
 8008cae:	19bc      	addle	r4, r7, r6
 8008cb0:	1bd2      	suble	r2, r2, r7
 8008cb2:	19ad      	addle	r5, r5, r6
 8008cb4:	0fcf      	lsrs	r7, r1, #31
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008cbc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008cc0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008cc4:	d1f0      	bne.n	8008ca8 <__ieee754_sqrt+0x94>
 8008cc6:	f04f 0c20 	mov.w	ip, #32
 8008cca:	469e      	mov	lr, r3
 8008ccc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008cd0:	42a2      	cmp	r2, r4
 8008cd2:	eb06 070e 	add.w	r7, r6, lr
 8008cd6:	dc02      	bgt.n	8008cde <__ieee754_sqrt+0xca>
 8008cd8:	d112      	bne.n	8008d00 <__ieee754_sqrt+0xec>
 8008cda:	428f      	cmp	r7, r1
 8008cdc:	d810      	bhi.n	8008d00 <__ieee754_sqrt+0xec>
 8008cde:	2f00      	cmp	r7, #0
 8008ce0:	eb07 0e06 	add.w	lr, r7, r6
 8008ce4:	da42      	bge.n	8008d6c <__ieee754_sqrt+0x158>
 8008ce6:	f1be 0f00 	cmp.w	lr, #0
 8008cea:	db3f      	blt.n	8008d6c <__ieee754_sqrt+0x158>
 8008cec:	f104 0801 	add.w	r8, r4, #1
 8008cf0:	1b12      	subs	r2, r2, r4
 8008cf2:	428f      	cmp	r7, r1
 8008cf4:	bf88      	it	hi
 8008cf6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008cfa:	1bc9      	subs	r1, r1, r7
 8008cfc:	4433      	add	r3, r6
 8008cfe:	4644      	mov	r4, r8
 8008d00:	0052      	lsls	r2, r2, #1
 8008d02:	f1bc 0c01 	subs.w	ip, ip, #1
 8008d06:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008d0a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008d0e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008d12:	d1dd      	bne.n	8008cd0 <__ieee754_sqrt+0xbc>
 8008d14:	430a      	orrs	r2, r1
 8008d16:	d006      	beq.n	8008d26 <__ieee754_sqrt+0x112>
 8008d18:	1c5c      	adds	r4, r3, #1
 8008d1a:	bf13      	iteet	ne
 8008d1c:	3301      	addne	r3, #1
 8008d1e:	3501      	addeq	r5, #1
 8008d20:	4663      	moveq	r3, ip
 8008d22:	f023 0301 	bicne.w	r3, r3, #1
 8008d26:	106a      	asrs	r2, r5, #1
 8008d28:	085b      	lsrs	r3, r3, #1
 8008d2a:	07e9      	lsls	r1, r5, #31
 8008d2c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008d30:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008d34:	bf48      	it	mi
 8008d36:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008d3a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008d3e:	461c      	mov	r4, r3
 8008d40:	e780      	b.n	8008c44 <__ieee754_sqrt+0x30>
 8008d42:	0aca      	lsrs	r2, r1, #11
 8008d44:	3815      	subs	r0, #21
 8008d46:	0549      	lsls	r1, r1, #21
 8008d48:	2a00      	cmp	r2, #0
 8008d4a:	d0fa      	beq.n	8008d42 <__ieee754_sqrt+0x12e>
 8008d4c:	02d6      	lsls	r6, r2, #11
 8008d4e:	d50a      	bpl.n	8008d66 <__ieee754_sqrt+0x152>
 8008d50:	f1c3 0420 	rsb	r4, r3, #32
 8008d54:	fa21 f404 	lsr.w	r4, r1, r4
 8008d58:	1e5d      	subs	r5, r3, #1
 8008d5a:	4099      	lsls	r1, r3
 8008d5c:	4322      	orrs	r2, r4
 8008d5e:	1b43      	subs	r3, r0, r5
 8008d60:	e78b      	b.n	8008c7a <__ieee754_sqrt+0x66>
 8008d62:	4618      	mov	r0, r3
 8008d64:	e7f0      	b.n	8008d48 <__ieee754_sqrt+0x134>
 8008d66:	0052      	lsls	r2, r2, #1
 8008d68:	3301      	adds	r3, #1
 8008d6a:	e7ef      	b.n	8008d4c <__ieee754_sqrt+0x138>
 8008d6c:	46a0      	mov	r8, r4
 8008d6e:	e7bf      	b.n	8008cf0 <__ieee754_sqrt+0xdc>
 8008d70:	7ff00000 	.word	0x7ff00000
 8008d74:	00000000 	.word	0x00000000

08008d78 <__kernel_cos>:
 8008d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7c:	ec59 8b10 	vmov	r8, r9, d0
 8008d80:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8008d84:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008d88:	ed2d 8b02 	vpush	{d8}
 8008d8c:	eeb0 8a41 	vmov.f32	s16, s2
 8008d90:	eef0 8a61 	vmov.f32	s17, s3
 8008d94:	da07      	bge.n	8008da6 <__kernel_cos+0x2e>
 8008d96:	ee10 0a10 	vmov	r0, s0
 8008d9a:	4649      	mov	r1, r9
 8008d9c:	f7f7 fe84 	bl	8000aa8 <__aeabi_d2iz>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	f000 8089 	beq.w	8008eb8 <__kernel_cos+0x140>
 8008da6:	4642      	mov	r2, r8
 8008da8:	464b      	mov	r3, r9
 8008daa:	4640      	mov	r0, r8
 8008dac:	4649      	mov	r1, r9
 8008dae:	f7f7 fbcb 	bl	8000548 <__aeabi_dmul>
 8008db2:	2200      	movs	r2, #0
 8008db4:	4b4e      	ldr	r3, [pc, #312]	; (8008ef0 <__kernel_cos+0x178>)
 8008db6:	4604      	mov	r4, r0
 8008db8:	460d      	mov	r5, r1
 8008dba:	f7f7 fbc5 	bl	8000548 <__aeabi_dmul>
 8008dbe:	a340      	add	r3, pc, #256	; (adr r3, 8008ec0 <__kernel_cos+0x148>)
 8008dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc4:	4682      	mov	sl, r0
 8008dc6:	468b      	mov	fp, r1
 8008dc8:	4620      	mov	r0, r4
 8008dca:	4629      	mov	r1, r5
 8008dcc:	f7f7 fbbc 	bl	8000548 <__aeabi_dmul>
 8008dd0:	a33d      	add	r3, pc, #244	; (adr r3, 8008ec8 <__kernel_cos+0x150>)
 8008dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd6:	f7f7 fa01 	bl	80001dc <__adddf3>
 8008dda:	4622      	mov	r2, r4
 8008ddc:	462b      	mov	r3, r5
 8008dde:	f7f7 fbb3 	bl	8000548 <__aeabi_dmul>
 8008de2:	a33b      	add	r3, pc, #236	; (adr r3, 8008ed0 <__kernel_cos+0x158>)
 8008de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de8:	f7f7 f9f6 	bl	80001d8 <__aeabi_dsub>
 8008dec:	4622      	mov	r2, r4
 8008dee:	462b      	mov	r3, r5
 8008df0:	f7f7 fbaa 	bl	8000548 <__aeabi_dmul>
 8008df4:	a338      	add	r3, pc, #224	; (adr r3, 8008ed8 <__kernel_cos+0x160>)
 8008df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfa:	f7f7 f9ef 	bl	80001dc <__adddf3>
 8008dfe:	4622      	mov	r2, r4
 8008e00:	462b      	mov	r3, r5
 8008e02:	f7f7 fba1 	bl	8000548 <__aeabi_dmul>
 8008e06:	a336      	add	r3, pc, #216	; (adr r3, 8008ee0 <__kernel_cos+0x168>)
 8008e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0c:	f7f7 f9e4 	bl	80001d8 <__aeabi_dsub>
 8008e10:	4622      	mov	r2, r4
 8008e12:	462b      	mov	r3, r5
 8008e14:	f7f7 fb98 	bl	8000548 <__aeabi_dmul>
 8008e18:	a333      	add	r3, pc, #204	; (adr r3, 8008ee8 <__kernel_cos+0x170>)
 8008e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1e:	f7f7 f9dd 	bl	80001dc <__adddf3>
 8008e22:	4622      	mov	r2, r4
 8008e24:	462b      	mov	r3, r5
 8008e26:	f7f7 fb8f 	bl	8000548 <__aeabi_dmul>
 8008e2a:	4622      	mov	r2, r4
 8008e2c:	462b      	mov	r3, r5
 8008e2e:	f7f7 fb8b 	bl	8000548 <__aeabi_dmul>
 8008e32:	ec53 2b18 	vmov	r2, r3, d8
 8008e36:	4604      	mov	r4, r0
 8008e38:	460d      	mov	r5, r1
 8008e3a:	4640      	mov	r0, r8
 8008e3c:	4649      	mov	r1, r9
 8008e3e:	f7f7 fb83 	bl	8000548 <__aeabi_dmul>
 8008e42:	460b      	mov	r3, r1
 8008e44:	4602      	mov	r2, r0
 8008e46:	4629      	mov	r1, r5
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f7f7 f9c5 	bl	80001d8 <__aeabi_dsub>
 8008e4e:	4b29      	ldr	r3, [pc, #164]	; (8008ef4 <__kernel_cos+0x17c>)
 8008e50:	429e      	cmp	r6, r3
 8008e52:	4680      	mov	r8, r0
 8008e54:	4689      	mov	r9, r1
 8008e56:	dc11      	bgt.n	8008e7c <__kernel_cos+0x104>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	4650      	mov	r0, sl
 8008e5e:	4659      	mov	r1, fp
 8008e60:	f7f7 f9ba 	bl	80001d8 <__aeabi_dsub>
 8008e64:	460b      	mov	r3, r1
 8008e66:	4924      	ldr	r1, [pc, #144]	; (8008ef8 <__kernel_cos+0x180>)
 8008e68:	4602      	mov	r2, r0
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	f7f7 f9b4 	bl	80001d8 <__aeabi_dsub>
 8008e70:	ecbd 8b02 	vpop	{d8}
 8008e74:	ec41 0b10 	vmov	d0, r0, r1
 8008e78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e7c:	4b1f      	ldr	r3, [pc, #124]	; (8008efc <__kernel_cos+0x184>)
 8008e7e:	491e      	ldr	r1, [pc, #120]	; (8008ef8 <__kernel_cos+0x180>)
 8008e80:	429e      	cmp	r6, r3
 8008e82:	bfcc      	ite	gt
 8008e84:	4d1e      	ldrgt	r5, [pc, #120]	; (8008f00 <__kernel_cos+0x188>)
 8008e86:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008e8a:	2400      	movs	r4, #0
 8008e8c:	4622      	mov	r2, r4
 8008e8e:	462b      	mov	r3, r5
 8008e90:	2000      	movs	r0, #0
 8008e92:	f7f7 f9a1 	bl	80001d8 <__aeabi_dsub>
 8008e96:	4622      	mov	r2, r4
 8008e98:	4606      	mov	r6, r0
 8008e9a:	460f      	mov	r7, r1
 8008e9c:	462b      	mov	r3, r5
 8008e9e:	4650      	mov	r0, sl
 8008ea0:	4659      	mov	r1, fp
 8008ea2:	f7f7 f999 	bl	80001d8 <__aeabi_dsub>
 8008ea6:	4642      	mov	r2, r8
 8008ea8:	464b      	mov	r3, r9
 8008eaa:	f7f7 f995 	bl	80001d8 <__aeabi_dsub>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	4639      	mov	r1, r7
 8008eb6:	e7d9      	b.n	8008e6c <__kernel_cos+0xf4>
 8008eb8:	2000      	movs	r0, #0
 8008eba:	490f      	ldr	r1, [pc, #60]	; (8008ef8 <__kernel_cos+0x180>)
 8008ebc:	e7d8      	b.n	8008e70 <__kernel_cos+0xf8>
 8008ebe:	bf00      	nop
 8008ec0:	be8838d4 	.word	0xbe8838d4
 8008ec4:	bda8fae9 	.word	0xbda8fae9
 8008ec8:	bdb4b1c4 	.word	0xbdb4b1c4
 8008ecc:	3e21ee9e 	.word	0x3e21ee9e
 8008ed0:	809c52ad 	.word	0x809c52ad
 8008ed4:	3e927e4f 	.word	0x3e927e4f
 8008ed8:	19cb1590 	.word	0x19cb1590
 8008edc:	3efa01a0 	.word	0x3efa01a0
 8008ee0:	16c15177 	.word	0x16c15177
 8008ee4:	3f56c16c 	.word	0x3f56c16c
 8008ee8:	5555554c 	.word	0x5555554c
 8008eec:	3fa55555 	.word	0x3fa55555
 8008ef0:	3fe00000 	.word	0x3fe00000
 8008ef4:	3fd33332 	.word	0x3fd33332
 8008ef8:	3ff00000 	.word	0x3ff00000
 8008efc:	3fe90000 	.word	0x3fe90000
 8008f00:	3fd20000 	.word	0x3fd20000
 8008f04:	00000000 	.word	0x00000000

08008f08 <__kernel_rem_pio2>:
 8008f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f0c:	ed2d 8b02 	vpush	{d8}
 8008f10:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008f14:	1ed4      	subs	r4, r2, #3
 8008f16:	9308      	str	r3, [sp, #32]
 8008f18:	9101      	str	r1, [sp, #4]
 8008f1a:	4bc5      	ldr	r3, [pc, #788]	; (8009230 <__kernel_rem_pio2+0x328>)
 8008f1c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008f1e:	9009      	str	r0, [sp, #36]	; 0x24
 8008f20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f24:	9304      	str	r3, [sp, #16]
 8008f26:	9b08      	ldr	r3, [sp, #32]
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	9307      	str	r3, [sp, #28]
 8008f2c:	2318      	movs	r3, #24
 8008f2e:	fb94 f4f3 	sdiv	r4, r4, r3
 8008f32:	f06f 0317 	mvn.w	r3, #23
 8008f36:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8008f3a:	fb04 3303 	mla	r3, r4, r3, r3
 8008f3e:	eb03 0a02 	add.w	sl, r3, r2
 8008f42:	9b04      	ldr	r3, [sp, #16]
 8008f44:	9a07      	ldr	r2, [sp, #28]
 8008f46:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009220 <__kernel_rem_pio2+0x318>
 8008f4a:	eb03 0802 	add.w	r8, r3, r2
 8008f4e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008f50:	1aa7      	subs	r7, r4, r2
 8008f52:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008f56:	ae22      	add	r6, sp, #136	; 0x88
 8008f58:	2500      	movs	r5, #0
 8008f5a:	4545      	cmp	r5, r8
 8008f5c:	dd13      	ble.n	8008f86 <__kernel_rem_pio2+0x7e>
 8008f5e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8009220 <__kernel_rem_pio2+0x318>
 8008f62:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008f66:	2600      	movs	r6, #0
 8008f68:	9b04      	ldr	r3, [sp, #16]
 8008f6a:	429e      	cmp	r6, r3
 8008f6c:	dc32      	bgt.n	8008fd4 <__kernel_rem_pio2+0xcc>
 8008f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f70:	9302      	str	r3, [sp, #8]
 8008f72:	9b08      	ldr	r3, [sp, #32]
 8008f74:	199d      	adds	r5, r3, r6
 8008f76:	ab22      	add	r3, sp, #136	; 0x88
 8008f78:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008f7c:	9306      	str	r3, [sp, #24]
 8008f7e:	ec59 8b18 	vmov	r8, r9, d8
 8008f82:	2700      	movs	r7, #0
 8008f84:	e01f      	b.n	8008fc6 <__kernel_rem_pio2+0xbe>
 8008f86:	42ef      	cmn	r7, r5
 8008f88:	d407      	bmi.n	8008f9a <__kernel_rem_pio2+0x92>
 8008f8a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008f8e:	f7f7 fa71 	bl	8000474 <__aeabi_i2d>
 8008f92:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008f96:	3501      	adds	r5, #1
 8008f98:	e7df      	b.n	8008f5a <__kernel_rem_pio2+0x52>
 8008f9a:	ec51 0b18 	vmov	r0, r1, d8
 8008f9e:	e7f8      	b.n	8008f92 <__kernel_rem_pio2+0x8a>
 8008fa0:	9906      	ldr	r1, [sp, #24]
 8008fa2:	9d02      	ldr	r5, [sp, #8]
 8008fa4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8008fa8:	9106      	str	r1, [sp, #24]
 8008faa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8008fae:	9502      	str	r5, [sp, #8]
 8008fb0:	f7f7 faca 	bl	8000548 <__aeabi_dmul>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4640      	mov	r0, r8
 8008fba:	4649      	mov	r1, r9
 8008fbc:	f7f7 f90e 	bl	80001dc <__adddf3>
 8008fc0:	3701      	adds	r7, #1
 8008fc2:	4680      	mov	r8, r0
 8008fc4:	4689      	mov	r9, r1
 8008fc6:	9b07      	ldr	r3, [sp, #28]
 8008fc8:	429f      	cmp	r7, r3
 8008fca:	dde9      	ble.n	8008fa0 <__kernel_rem_pio2+0x98>
 8008fcc:	e8eb 8902 	strd	r8, r9, [fp], #8
 8008fd0:	3601      	adds	r6, #1
 8008fd2:	e7c9      	b.n	8008f68 <__kernel_rem_pio2+0x60>
 8008fd4:	9b04      	ldr	r3, [sp, #16]
 8008fd6:	aa0e      	add	r2, sp, #56	; 0x38
 8008fd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008fdc:	930c      	str	r3, [sp, #48]	; 0x30
 8008fde:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008fe0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008fe4:	9c04      	ldr	r4, [sp, #16]
 8008fe6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fe8:	ab9a      	add	r3, sp, #616	; 0x268
 8008fea:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8008fee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ff2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ff6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8008ffa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8008ffe:	ab9a      	add	r3, sp, #616	; 0x268
 8009000:	445b      	add	r3, fp
 8009002:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8009006:	2500      	movs	r5, #0
 8009008:	1b63      	subs	r3, r4, r5
 800900a:	2b00      	cmp	r3, #0
 800900c:	dc78      	bgt.n	8009100 <__kernel_rem_pio2+0x1f8>
 800900e:	4650      	mov	r0, sl
 8009010:	ec49 8b10 	vmov	d0, r8, r9
 8009014:	f000 fc98 	bl	8009948 <scalbn>
 8009018:	ec57 6b10 	vmov	r6, r7, d0
 800901c:	2200      	movs	r2, #0
 800901e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009022:	ee10 0a10 	vmov	r0, s0
 8009026:	4639      	mov	r1, r7
 8009028:	f7f7 fa8e 	bl	8000548 <__aeabi_dmul>
 800902c:	ec41 0b10 	vmov	d0, r0, r1
 8009030:	f000 fb76 	bl	8009720 <floor>
 8009034:	2200      	movs	r2, #0
 8009036:	ec51 0b10 	vmov	r0, r1, d0
 800903a:	4b7e      	ldr	r3, [pc, #504]	; (8009234 <__kernel_rem_pio2+0x32c>)
 800903c:	f7f7 fa84 	bl	8000548 <__aeabi_dmul>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	4630      	mov	r0, r6
 8009046:	4639      	mov	r1, r7
 8009048:	f7f7 f8c6 	bl	80001d8 <__aeabi_dsub>
 800904c:	460f      	mov	r7, r1
 800904e:	4606      	mov	r6, r0
 8009050:	f7f7 fd2a 	bl	8000aa8 <__aeabi_d2iz>
 8009054:	9006      	str	r0, [sp, #24]
 8009056:	f7f7 fa0d 	bl	8000474 <__aeabi_i2d>
 800905a:	4602      	mov	r2, r0
 800905c:	460b      	mov	r3, r1
 800905e:	4630      	mov	r0, r6
 8009060:	4639      	mov	r1, r7
 8009062:	f7f7 f8b9 	bl	80001d8 <__aeabi_dsub>
 8009066:	f1ba 0f00 	cmp.w	sl, #0
 800906a:	4606      	mov	r6, r0
 800906c:	460f      	mov	r7, r1
 800906e:	dd6c      	ble.n	800914a <__kernel_rem_pio2+0x242>
 8009070:	1e62      	subs	r2, r4, #1
 8009072:	ab0e      	add	r3, sp, #56	; 0x38
 8009074:	f1ca 0118 	rsb	r1, sl, #24
 8009078:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800907c:	9d06      	ldr	r5, [sp, #24]
 800907e:	fa40 f301 	asr.w	r3, r0, r1
 8009082:	441d      	add	r5, r3
 8009084:	408b      	lsls	r3, r1
 8009086:	1ac0      	subs	r0, r0, r3
 8009088:	ab0e      	add	r3, sp, #56	; 0x38
 800908a:	9506      	str	r5, [sp, #24]
 800908c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009090:	f1ca 0317 	rsb	r3, sl, #23
 8009094:	fa40 f303 	asr.w	r3, r0, r3
 8009098:	9302      	str	r3, [sp, #8]
 800909a:	9b02      	ldr	r3, [sp, #8]
 800909c:	2b00      	cmp	r3, #0
 800909e:	dd62      	ble.n	8009166 <__kernel_rem_pio2+0x25e>
 80090a0:	9b06      	ldr	r3, [sp, #24]
 80090a2:	2200      	movs	r2, #0
 80090a4:	3301      	adds	r3, #1
 80090a6:	9306      	str	r3, [sp, #24]
 80090a8:	4615      	mov	r5, r2
 80090aa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80090ae:	4294      	cmp	r4, r2
 80090b0:	f300 8095 	bgt.w	80091de <__kernel_rem_pio2+0x2d6>
 80090b4:	f1ba 0f00 	cmp.w	sl, #0
 80090b8:	dd07      	ble.n	80090ca <__kernel_rem_pio2+0x1c2>
 80090ba:	f1ba 0f01 	cmp.w	sl, #1
 80090be:	f000 80a2 	beq.w	8009206 <__kernel_rem_pio2+0x2fe>
 80090c2:	f1ba 0f02 	cmp.w	sl, #2
 80090c6:	f000 80c1 	beq.w	800924c <__kernel_rem_pio2+0x344>
 80090ca:	9b02      	ldr	r3, [sp, #8]
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d14a      	bne.n	8009166 <__kernel_rem_pio2+0x25e>
 80090d0:	4632      	mov	r2, r6
 80090d2:	463b      	mov	r3, r7
 80090d4:	2000      	movs	r0, #0
 80090d6:	4958      	ldr	r1, [pc, #352]	; (8009238 <__kernel_rem_pio2+0x330>)
 80090d8:	f7f7 f87e 	bl	80001d8 <__aeabi_dsub>
 80090dc:	4606      	mov	r6, r0
 80090de:	460f      	mov	r7, r1
 80090e0:	2d00      	cmp	r5, #0
 80090e2:	d040      	beq.n	8009166 <__kernel_rem_pio2+0x25e>
 80090e4:	4650      	mov	r0, sl
 80090e6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009228 <__kernel_rem_pio2+0x320>
 80090ea:	f000 fc2d 	bl	8009948 <scalbn>
 80090ee:	4630      	mov	r0, r6
 80090f0:	4639      	mov	r1, r7
 80090f2:	ec53 2b10 	vmov	r2, r3, d0
 80090f6:	f7f7 f86f 	bl	80001d8 <__aeabi_dsub>
 80090fa:	4606      	mov	r6, r0
 80090fc:	460f      	mov	r7, r1
 80090fe:	e032      	b.n	8009166 <__kernel_rem_pio2+0x25e>
 8009100:	2200      	movs	r2, #0
 8009102:	4b4e      	ldr	r3, [pc, #312]	; (800923c <__kernel_rem_pio2+0x334>)
 8009104:	4640      	mov	r0, r8
 8009106:	4649      	mov	r1, r9
 8009108:	f7f7 fa1e 	bl	8000548 <__aeabi_dmul>
 800910c:	f7f7 fccc 	bl	8000aa8 <__aeabi_d2iz>
 8009110:	f7f7 f9b0 	bl	8000474 <__aeabi_i2d>
 8009114:	2200      	movs	r2, #0
 8009116:	4b4a      	ldr	r3, [pc, #296]	; (8009240 <__kernel_rem_pio2+0x338>)
 8009118:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800911c:	f7f7 fa14 	bl	8000548 <__aeabi_dmul>
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	4640      	mov	r0, r8
 8009126:	4649      	mov	r1, r9
 8009128:	f7f7 f856 	bl	80001d8 <__aeabi_dsub>
 800912c:	f7f7 fcbc 	bl	8000aa8 <__aeabi_d2iz>
 8009130:	ab0e      	add	r3, sp, #56	; 0x38
 8009132:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8009136:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800913a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800913e:	f7f7 f84d 	bl	80001dc <__adddf3>
 8009142:	3501      	adds	r5, #1
 8009144:	4680      	mov	r8, r0
 8009146:	4689      	mov	r9, r1
 8009148:	e75e      	b.n	8009008 <__kernel_rem_pio2+0x100>
 800914a:	d105      	bne.n	8009158 <__kernel_rem_pio2+0x250>
 800914c:	1e63      	subs	r3, r4, #1
 800914e:	aa0e      	add	r2, sp, #56	; 0x38
 8009150:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009154:	15c3      	asrs	r3, r0, #23
 8009156:	e79f      	b.n	8009098 <__kernel_rem_pio2+0x190>
 8009158:	2200      	movs	r2, #0
 800915a:	4b3a      	ldr	r3, [pc, #232]	; (8009244 <__kernel_rem_pio2+0x33c>)
 800915c:	f7f7 fc7a 	bl	8000a54 <__aeabi_dcmpge>
 8009160:	2800      	cmp	r0, #0
 8009162:	d139      	bne.n	80091d8 <__kernel_rem_pio2+0x2d0>
 8009164:	9002      	str	r0, [sp, #8]
 8009166:	2200      	movs	r2, #0
 8009168:	2300      	movs	r3, #0
 800916a:	4630      	mov	r0, r6
 800916c:	4639      	mov	r1, r7
 800916e:	f7f7 fc53 	bl	8000a18 <__aeabi_dcmpeq>
 8009172:	2800      	cmp	r0, #0
 8009174:	f000 80c7 	beq.w	8009306 <__kernel_rem_pio2+0x3fe>
 8009178:	1e65      	subs	r5, r4, #1
 800917a:	462b      	mov	r3, r5
 800917c:	2200      	movs	r2, #0
 800917e:	9904      	ldr	r1, [sp, #16]
 8009180:	428b      	cmp	r3, r1
 8009182:	da6a      	bge.n	800925a <__kernel_rem_pio2+0x352>
 8009184:	2a00      	cmp	r2, #0
 8009186:	f000 8088 	beq.w	800929a <__kernel_rem_pio2+0x392>
 800918a:	ab0e      	add	r3, sp, #56	; 0x38
 800918c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009190:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 80b4 	beq.w	8009302 <__kernel_rem_pio2+0x3fa>
 800919a:	4650      	mov	r0, sl
 800919c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8009228 <__kernel_rem_pio2+0x320>
 80091a0:	f000 fbd2 	bl	8009948 <scalbn>
 80091a4:	00ec      	lsls	r4, r5, #3
 80091a6:	ab72      	add	r3, sp, #456	; 0x1c8
 80091a8:	191e      	adds	r6, r3, r4
 80091aa:	ec59 8b10 	vmov	r8, r9, d0
 80091ae:	f106 0a08 	add.w	sl, r6, #8
 80091b2:	462f      	mov	r7, r5
 80091b4:	2f00      	cmp	r7, #0
 80091b6:	f280 80df 	bge.w	8009378 <__kernel_rem_pio2+0x470>
 80091ba:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8009220 <__kernel_rem_pio2+0x318>
 80091be:	f04f 0a00 	mov.w	sl, #0
 80091c2:	eba5 030a 	sub.w	r3, r5, sl
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f2c0 810a 	blt.w	80093e0 <__kernel_rem_pio2+0x4d8>
 80091cc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8009248 <__kernel_rem_pio2+0x340>
 80091d0:	ec59 8b18 	vmov	r8, r9, d8
 80091d4:	2700      	movs	r7, #0
 80091d6:	e0f5      	b.n	80093c4 <__kernel_rem_pio2+0x4bc>
 80091d8:	2302      	movs	r3, #2
 80091da:	9302      	str	r3, [sp, #8]
 80091dc:	e760      	b.n	80090a0 <__kernel_rem_pio2+0x198>
 80091de:	ab0e      	add	r3, sp, #56	; 0x38
 80091e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e4:	b94d      	cbnz	r5, 80091fa <__kernel_rem_pio2+0x2f2>
 80091e6:	b12b      	cbz	r3, 80091f4 <__kernel_rem_pio2+0x2ec>
 80091e8:	a80e      	add	r0, sp, #56	; 0x38
 80091ea:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80091ee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80091f2:	2301      	movs	r3, #1
 80091f4:	3201      	adds	r2, #1
 80091f6:	461d      	mov	r5, r3
 80091f8:	e759      	b.n	80090ae <__kernel_rem_pio2+0x1a6>
 80091fa:	a80e      	add	r0, sp, #56	; 0x38
 80091fc:	1acb      	subs	r3, r1, r3
 80091fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009202:	462b      	mov	r3, r5
 8009204:	e7f6      	b.n	80091f4 <__kernel_rem_pio2+0x2ec>
 8009206:	1e62      	subs	r2, r4, #1
 8009208:	ab0e      	add	r3, sp, #56	; 0x38
 800920a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009212:	a90e      	add	r1, sp, #56	; 0x38
 8009214:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009218:	e757      	b.n	80090ca <__kernel_rem_pio2+0x1c2>
 800921a:	bf00      	nop
 800921c:	f3af 8000 	nop.w
	...
 800922c:	3ff00000 	.word	0x3ff00000
 8009230:	08009d70 	.word	0x08009d70
 8009234:	40200000 	.word	0x40200000
 8009238:	3ff00000 	.word	0x3ff00000
 800923c:	3e700000 	.word	0x3e700000
 8009240:	41700000 	.word	0x41700000
 8009244:	3fe00000 	.word	0x3fe00000
 8009248:	08009d30 	.word	0x08009d30
 800924c:	1e62      	subs	r2, r4, #1
 800924e:	ab0e      	add	r3, sp, #56	; 0x38
 8009250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009254:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009258:	e7db      	b.n	8009212 <__kernel_rem_pio2+0x30a>
 800925a:	a90e      	add	r1, sp, #56	; 0x38
 800925c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009260:	3b01      	subs	r3, #1
 8009262:	430a      	orrs	r2, r1
 8009264:	e78b      	b.n	800917e <__kernel_rem_pio2+0x276>
 8009266:	3301      	adds	r3, #1
 8009268:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800926c:	2900      	cmp	r1, #0
 800926e:	d0fa      	beq.n	8009266 <__kernel_rem_pio2+0x35e>
 8009270:	9a08      	ldr	r2, [sp, #32]
 8009272:	4422      	add	r2, r4
 8009274:	00d2      	lsls	r2, r2, #3
 8009276:	a922      	add	r1, sp, #136	; 0x88
 8009278:	18e3      	adds	r3, r4, r3
 800927a:	9206      	str	r2, [sp, #24]
 800927c:	440a      	add	r2, r1
 800927e:	9302      	str	r3, [sp, #8]
 8009280:	f10b 0108 	add.w	r1, fp, #8
 8009284:	f102 0308 	add.w	r3, r2, #8
 8009288:	1c66      	adds	r6, r4, #1
 800928a:	910a      	str	r1, [sp, #40]	; 0x28
 800928c:	2500      	movs	r5, #0
 800928e:	930d      	str	r3, [sp, #52]	; 0x34
 8009290:	9b02      	ldr	r3, [sp, #8]
 8009292:	42b3      	cmp	r3, r6
 8009294:	da04      	bge.n	80092a0 <__kernel_rem_pio2+0x398>
 8009296:	461c      	mov	r4, r3
 8009298:	e6a6      	b.n	8008fe8 <__kernel_rem_pio2+0xe0>
 800929a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800929c:	2301      	movs	r3, #1
 800929e:	e7e3      	b.n	8009268 <__kernel_rem_pio2+0x360>
 80092a0:	9b06      	ldr	r3, [sp, #24]
 80092a2:	18ef      	adds	r7, r5, r3
 80092a4:	ab22      	add	r3, sp, #136	; 0x88
 80092a6:	441f      	add	r7, r3
 80092a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092aa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80092ae:	f7f7 f8e1 	bl	8000474 <__aeabi_i2d>
 80092b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b4:	461c      	mov	r4, r3
 80092b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092b8:	e9c7 0100 	strd	r0, r1, [r7]
 80092bc:	eb03 0b05 	add.w	fp, r3, r5
 80092c0:	2700      	movs	r7, #0
 80092c2:	f04f 0800 	mov.w	r8, #0
 80092c6:	f04f 0900 	mov.w	r9, #0
 80092ca:	9b07      	ldr	r3, [sp, #28]
 80092cc:	429f      	cmp	r7, r3
 80092ce:	dd08      	ble.n	80092e2 <__kernel_rem_pio2+0x3da>
 80092d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092d2:	aa72      	add	r2, sp, #456	; 0x1c8
 80092d4:	18eb      	adds	r3, r5, r3
 80092d6:	4413      	add	r3, r2
 80092d8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80092dc:	3601      	adds	r6, #1
 80092de:	3508      	adds	r5, #8
 80092e0:	e7d6      	b.n	8009290 <__kernel_rem_pio2+0x388>
 80092e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80092e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80092ea:	f7f7 f92d 	bl	8000548 <__aeabi_dmul>
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	4640      	mov	r0, r8
 80092f4:	4649      	mov	r1, r9
 80092f6:	f7f6 ff71 	bl	80001dc <__adddf3>
 80092fa:	3701      	adds	r7, #1
 80092fc:	4680      	mov	r8, r0
 80092fe:	4689      	mov	r9, r1
 8009300:	e7e3      	b.n	80092ca <__kernel_rem_pio2+0x3c2>
 8009302:	3d01      	subs	r5, #1
 8009304:	e741      	b.n	800918a <__kernel_rem_pio2+0x282>
 8009306:	f1ca 0000 	rsb	r0, sl, #0
 800930a:	ec47 6b10 	vmov	d0, r6, r7
 800930e:	f000 fb1b 	bl	8009948 <scalbn>
 8009312:	ec57 6b10 	vmov	r6, r7, d0
 8009316:	2200      	movs	r2, #0
 8009318:	4b99      	ldr	r3, [pc, #612]	; (8009580 <__kernel_rem_pio2+0x678>)
 800931a:	ee10 0a10 	vmov	r0, s0
 800931e:	4639      	mov	r1, r7
 8009320:	f7f7 fb98 	bl	8000a54 <__aeabi_dcmpge>
 8009324:	b1f8      	cbz	r0, 8009366 <__kernel_rem_pio2+0x45e>
 8009326:	2200      	movs	r2, #0
 8009328:	4b96      	ldr	r3, [pc, #600]	; (8009584 <__kernel_rem_pio2+0x67c>)
 800932a:	4630      	mov	r0, r6
 800932c:	4639      	mov	r1, r7
 800932e:	f7f7 f90b 	bl	8000548 <__aeabi_dmul>
 8009332:	f7f7 fbb9 	bl	8000aa8 <__aeabi_d2iz>
 8009336:	4680      	mov	r8, r0
 8009338:	f7f7 f89c 	bl	8000474 <__aeabi_i2d>
 800933c:	2200      	movs	r2, #0
 800933e:	4b90      	ldr	r3, [pc, #576]	; (8009580 <__kernel_rem_pio2+0x678>)
 8009340:	f7f7 f902 	bl	8000548 <__aeabi_dmul>
 8009344:	460b      	mov	r3, r1
 8009346:	4602      	mov	r2, r0
 8009348:	4639      	mov	r1, r7
 800934a:	4630      	mov	r0, r6
 800934c:	f7f6 ff44 	bl	80001d8 <__aeabi_dsub>
 8009350:	f7f7 fbaa 	bl	8000aa8 <__aeabi_d2iz>
 8009354:	1c65      	adds	r5, r4, #1
 8009356:	ab0e      	add	r3, sp, #56	; 0x38
 8009358:	f10a 0a18 	add.w	sl, sl, #24
 800935c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009360:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009364:	e719      	b.n	800919a <__kernel_rem_pio2+0x292>
 8009366:	4630      	mov	r0, r6
 8009368:	4639      	mov	r1, r7
 800936a:	f7f7 fb9d 	bl	8000aa8 <__aeabi_d2iz>
 800936e:	ab0e      	add	r3, sp, #56	; 0x38
 8009370:	4625      	mov	r5, r4
 8009372:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009376:	e710      	b.n	800919a <__kernel_rem_pio2+0x292>
 8009378:	ab0e      	add	r3, sp, #56	; 0x38
 800937a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800937e:	f7f7 f879 	bl	8000474 <__aeabi_i2d>
 8009382:	4642      	mov	r2, r8
 8009384:	464b      	mov	r3, r9
 8009386:	f7f7 f8df 	bl	8000548 <__aeabi_dmul>
 800938a:	2200      	movs	r2, #0
 800938c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8009390:	4b7c      	ldr	r3, [pc, #496]	; (8009584 <__kernel_rem_pio2+0x67c>)
 8009392:	4640      	mov	r0, r8
 8009394:	4649      	mov	r1, r9
 8009396:	f7f7 f8d7 	bl	8000548 <__aeabi_dmul>
 800939a:	3f01      	subs	r7, #1
 800939c:	4680      	mov	r8, r0
 800939e:	4689      	mov	r9, r1
 80093a0:	e708      	b.n	80091b4 <__kernel_rem_pio2+0x2ac>
 80093a2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80093a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093aa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80093ae:	f7f7 f8cb 	bl	8000548 <__aeabi_dmul>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	4640      	mov	r0, r8
 80093b8:	4649      	mov	r1, r9
 80093ba:	f7f6 ff0f 	bl	80001dc <__adddf3>
 80093be:	3701      	adds	r7, #1
 80093c0:	4680      	mov	r8, r0
 80093c2:	4689      	mov	r9, r1
 80093c4:	9b04      	ldr	r3, [sp, #16]
 80093c6:	429f      	cmp	r7, r3
 80093c8:	dc01      	bgt.n	80093ce <__kernel_rem_pio2+0x4c6>
 80093ca:	45ba      	cmp	sl, r7
 80093cc:	dae9      	bge.n	80093a2 <__kernel_rem_pio2+0x49a>
 80093ce:	ab4a      	add	r3, sp, #296	; 0x128
 80093d0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80093d4:	e9c3 8900 	strd	r8, r9, [r3]
 80093d8:	f10a 0a01 	add.w	sl, sl, #1
 80093dc:	3e08      	subs	r6, #8
 80093de:	e6f0      	b.n	80091c2 <__kernel_rem_pio2+0x2ba>
 80093e0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	d85b      	bhi.n	800949e <__kernel_rem_pio2+0x596>
 80093e6:	e8df f003 	tbb	[pc, r3]
 80093ea:	264a      	.short	0x264a
 80093ec:	0226      	.short	0x0226
 80093ee:	ab9a      	add	r3, sp, #616	; 0x268
 80093f0:	441c      	add	r4, r3
 80093f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80093f6:	46a2      	mov	sl, r4
 80093f8:	46ab      	mov	fp, r5
 80093fa:	f1bb 0f00 	cmp.w	fp, #0
 80093fe:	dc6c      	bgt.n	80094da <__kernel_rem_pio2+0x5d2>
 8009400:	46a2      	mov	sl, r4
 8009402:	46ab      	mov	fp, r5
 8009404:	f1bb 0f01 	cmp.w	fp, #1
 8009408:	f300 8086 	bgt.w	8009518 <__kernel_rem_pio2+0x610>
 800940c:	2000      	movs	r0, #0
 800940e:	2100      	movs	r1, #0
 8009410:	2d01      	cmp	r5, #1
 8009412:	f300 80a0 	bgt.w	8009556 <__kernel_rem_pio2+0x64e>
 8009416:	9b02      	ldr	r3, [sp, #8]
 8009418:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800941c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8009420:	2b00      	cmp	r3, #0
 8009422:	f040 809e 	bne.w	8009562 <__kernel_rem_pio2+0x65a>
 8009426:	9b01      	ldr	r3, [sp, #4]
 8009428:	e9c3 7800 	strd	r7, r8, [r3]
 800942c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009430:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009434:	e033      	b.n	800949e <__kernel_rem_pio2+0x596>
 8009436:	3408      	adds	r4, #8
 8009438:	ab4a      	add	r3, sp, #296	; 0x128
 800943a:	441c      	add	r4, r3
 800943c:	462e      	mov	r6, r5
 800943e:	2000      	movs	r0, #0
 8009440:	2100      	movs	r1, #0
 8009442:	2e00      	cmp	r6, #0
 8009444:	da3a      	bge.n	80094bc <__kernel_rem_pio2+0x5b4>
 8009446:	9b02      	ldr	r3, [sp, #8]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d03d      	beq.n	80094c8 <__kernel_rem_pio2+0x5c0>
 800944c:	4602      	mov	r2, r0
 800944e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009452:	9c01      	ldr	r4, [sp, #4]
 8009454:	e9c4 2300 	strd	r2, r3, [r4]
 8009458:	4602      	mov	r2, r0
 800945a:	460b      	mov	r3, r1
 800945c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009460:	f7f6 feba 	bl	80001d8 <__aeabi_dsub>
 8009464:	ae4c      	add	r6, sp, #304	; 0x130
 8009466:	2401      	movs	r4, #1
 8009468:	42a5      	cmp	r5, r4
 800946a:	da30      	bge.n	80094ce <__kernel_rem_pio2+0x5c6>
 800946c:	9b02      	ldr	r3, [sp, #8]
 800946e:	b113      	cbz	r3, 8009476 <__kernel_rem_pio2+0x56e>
 8009470:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009474:	4619      	mov	r1, r3
 8009476:	9b01      	ldr	r3, [sp, #4]
 8009478:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800947c:	e00f      	b.n	800949e <__kernel_rem_pio2+0x596>
 800947e:	ab9a      	add	r3, sp, #616	; 0x268
 8009480:	441c      	add	r4, r3
 8009482:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009486:	2000      	movs	r0, #0
 8009488:	2100      	movs	r1, #0
 800948a:	2d00      	cmp	r5, #0
 800948c:	da10      	bge.n	80094b0 <__kernel_rem_pio2+0x5a8>
 800948e:	9b02      	ldr	r3, [sp, #8]
 8009490:	b113      	cbz	r3, 8009498 <__kernel_rem_pio2+0x590>
 8009492:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009496:	4619      	mov	r1, r3
 8009498:	9b01      	ldr	r3, [sp, #4]
 800949a:	e9c3 0100 	strd	r0, r1, [r3]
 800949e:	9b06      	ldr	r3, [sp, #24]
 80094a0:	f003 0007 	and.w	r0, r3, #7
 80094a4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80094a8:	ecbd 8b02 	vpop	{d8}
 80094ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80094b4:	f7f6 fe92 	bl	80001dc <__adddf3>
 80094b8:	3d01      	subs	r5, #1
 80094ba:	e7e6      	b.n	800948a <__kernel_rem_pio2+0x582>
 80094bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80094c0:	f7f6 fe8c 	bl	80001dc <__adddf3>
 80094c4:	3e01      	subs	r6, #1
 80094c6:	e7bc      	b.n	8009442 <__kernel_rem_pio2+0x53a>
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	e7c1      	b.n	8009452 <__kernel_rem_pio2+0x54a>
 80094ce:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80094d2:	f7f6 fe83 	bl	80001dc <__adddf3>
 80094d6:	3401      	adds	r4, #1
 80094d8:	e7c6      	b.n	8009468 <__kernel_rem_pio2+0x560>
 80094da:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80094de:	ed3a 7b02 	vldmdb	sl!, {d7}
 80094e2:	4640      	mov	r0, r8
 80094e4:	ec53 2b17 	vmov	r2, r3, d7
 80094e8:	4649      	mov	r1, r9
 80094ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 80094ee:	f7f6 fe75 	bl	80001dc <__adddf3>
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	4606      	mov	r6, r0
 80094f8:	460f      	mov	r7, r1
 80094fa:	4640      	mov	r0, r8
 80094fc:	4649      	mov	r1, r9
 80094fe:	f7f6 fe6b 	bl	80001d8 <__aeabi_dsub>
 8009502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009506:	f7f6 fe69 	bl	80001dc <__adddf3>
 800950a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800950e:	e9ca 0100 	strd	r0, r1, [sl]
 8009512:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8009516:	e770      	b.n	80093fa <__kernel_rem_pio2+0x4f2>
 8009518:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800951c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8009520:	4630      	mov	r0, r6
 8009522:	ec53 2b17 	vmov	r2, r3, d7
 8009526:	4639      	mov	r1, r7
 8009528:	ed8d 7b04 	vstr	d7, [sp, #16]
 800952c:	f7f6 fe56 	bl	80001dc <__adddf3>
 8009530:	4602      	mov	r2, r0
 8009532:	460b      	mov	r3, r1
 8009534:	4680      	mov	r8, r0
 8009536:	4689      	mov	r9, r1
 8009538:	4630      	mov	r0, r6
 800953a:	4639      	mov	r1, r7
 800953c:	f7f6 fe4c 	bl	80001d8 <__aeabi_dsub>
 8009540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009544:	f7f6 fe4a 	bl	80001dc <__adddf3>
 8009548:	f10b 3bff 	add.w	fp, fp, #4294967295
 800954c:	e9ca 0100 	strd	r0, r1, [sl]
 8009550:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8009554:	e756      	b.n	8009404 <__kernel_rem_pio2+0x4fc>
 8009556:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800955a:	f7f6 fe3f 	bl	80001dc <__adddf3>
 800955e:	3d01      	subs	r5, #1
 8009560:	e756      	b.n	8009410 <__kernel_rem_pio2+0x508>
 8009562:	9b01      	ldr	r3, [sp, #4]
 8009564:	9a01      	ldr	r2, [sp, #4]
 8009566:	601f      	str	r7, [r3, #0]
 8009568:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800956c:	605c      	str	r4, [r3, #4]
 800956e:	609d      	str	r5, [r3, #8]
 8009570:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009574:	60d3      	str	r3, [r2, #12]
 8009576:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800957a:	6110      	str	r0, [r2, #16]
 800957c:	6153      	str	r3, [r2, #20]
 800957e:	e78e      	b.n	800949e <__kernel_rem_pio2+0x596>
 8009580:	41700000 	.word	0x41700000
 8009584:	3e700000 	.word	0x3e700000

08009588 <__kernel_sin>:
 8009588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958c:	ec55 4b10 	vmov	r4, r5, d0
 8009590:	b085      	sub	sp, #20
 8009592:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009596:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800959a:	ed8d 1b00 	vstr	d1, [sp]
 800959e:	9002      	str	r0, [sp, #8]
 80095a0:	da06      	bge.n	80095b0 <__kernel_sin+0x28>
 80095a2:	ee10 0a10 	vmov	r0, s0
 80095a6:	4629      	mov	r1, r5
 80095a8:	f7f7 fa7e 	bl	8000aa8 <__aeabi_d2iz>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d051      	beq.n	8009654 <__kernel_sin+0xcc>
 80095b0:	4622      	mov	r2, r4
 80095b2:	462b      	mov	r3, r5
 80095b4:	4620      	mov	r0, r4
 80095b6:	4629      	mov	r1, r5
 80095b8:	f7f6 ffc6 	bl	8000548 <__aeabi_dmul>
 80095bc:	4682      	mov	sl, r0
 80095be:	468b      	mov	fp, r1
 80095c0:	4602      	mov	r2, r0
 80095c2:	460b      	mov	r3, r1
 80095c4:	4620      	mov	r0, r4
 80095c6:	4629      	mov	r1, r5
 80095c8:	f7f6 ffbe 	bl	8000548 <__aeabi_dmul>
 80095cc:	a341      	add	r3, pc, #260	; (adr r3, 80096d4 <__kernel_sin+0x14c>)
 80095ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d2:	4680      	mov	r8, r0
 80095d4:	4689      	mov	r9, r1
 80095d6:	4650      	mov	r0, sl
 80095d8:	4659      	mov	r1, fp
 80095da:	f7f6 ffb5 	bl	8000548 <__aeabi_dmul>
 80095de:	a33f      	add	r3, pc, #252	; (adr r3, 80096dc <__kernel_sin+0x154>)
 80095e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e4:	f7f6 fdf8 	bl	80001d8 <__aeabi_dsub>
 80095e8:	4652      	mov	r2, sl
 80095ea:	465b      	mov	r3, fp
 80095ec:	f7f6 ffac 	bl	8000548 <__aeabi_dmul>
 80095f0:	a33c      	add	r3, pc, #240	; (adr r3, 80096e4 <__kernel_sin+0x15c>)
 80095f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f6:	f7f6 fdf1 	bl	80001dc <__adddf3>
 80095fa:	4652      	mov	r2, sl
 80095fc:	465b      	mov	r3, fp
 80095fe:	f7f6 ffa3 	bl	8000548 <__aeabi_dmul>
 8009602:	a33a      	add	r3, pc, #232	; (adr r3, 80096ec <__kernel_sin+0x164>)
 8009604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009608:	f7f6 fde6 	bl	80001d8 <__aeabi_dsub>
 800960c:	4652      	mov	r2, sl
 800960e:	465b      	mov	r3, fp
 8009610:	f7f6 ff9a 	bl	8000548 <__aeabi_dmul>
 8009614:	a337      	add	r3, pc, #220	; (adr r3, 80096f4 <__kernel_sin+0x16c>)
 8009616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961a:	f7f6 fddf 	bl	80001dc <__adddf3>
 800961e:	9b02      	ldr	r3, [sp, #8]
 8009620:	4606      	mov	r6, r0
 8009622:	460f      	mov	r7, r1
 8009624:	b9db      	cbnz	r3, 800965e <__kernel_sin+0xd6>
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	4650      	mov	r0, sl
 800962c:	4659      	mov	r1, fp
 800962e:	f7f6 ff8b 	bl	8000548 <__aeabi_dmul>
 8009632:	a325      	add	r3, pc, #148	; (adr r3, 80096c8 <__kernel_sin+0x140>)
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	f7f6 fdce 	bl	80001d8 <__aeabi_dsub>
 800963c:	4642      	mov	r2, r8
 800963e:	464b      	mov	r3, r9
 8009640:	f7f6 ff82 	bl	8000548 <__aeabi_dmul>
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	4620      	mov	r0, r4
 800964a:	4629      	mov	r1, r5
 800964c:	f7f6 fdc6 	bl	80001dc <__adddf3>
 8009650:	4604      	mov	r4, r0
 8009652:	460d      	mov	r5, r1
 8009654:	ec45 4b10 	vmov	d0, r4, r5
 8009658:	b005      	add	sp, #20
 800965a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800965e:	2200      	movs	r2, #0
 8009660:	4b1b      	ldr	r3, [pc, #108]	; (80096d0 <__kernel_sin+0x148>)
 8009662:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009666:	f7f6 ff6f 	bl	8000548 <__aeabi_dmul>
 800966a:	4632      	mov	r2, r6
 800966c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009670:	463b      	mov	r3, r7
 8009672:	4640      	mov	r0, r8
 8009674:	4649      	mov	r1, r9
 8009676:	f7f6 ff67 	bl	8000548 <__aeabi_dmul>
 800967a:	4602      	mov	r2, r0
 800967c:	460b      	mov	r3, r1
 800967e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009682:	f7f6 fda9 	bl	80001d8 <__aeabi_dsub>
 8009686:	4652      	mov	r2, sl
 8009688:	465b      	mov	r3, fp
 800968a:	f7f6 ff5d 	bl	8000548 <__aeabi_dmul>
 800968e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009692:	f7f6 fda1 	bl	80001d8 <__aeabi_dsub>
 8009696:	a30c      	add	r3, pc, #48	; (adr r3, 80096c8 <__kernel_sin+0x140>)
 8009698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969c:	4606      	mov	r6, r0
 800969e:	460f      	mov	r7, r1
 80096a0:	4640      	mov	r0, r8
 80096a2:	4649      	mov	r1, r9
 80096a4:	f7f6 ff50 	bl	8000548 <__aeabi_dmul>
 80096a8:	4602      	mov	r2, r0
 80096aa:	460b      	mov	r3, r1
 80096ac:	4630      	mov	r0, r6
 80096ae:	4639      	mov	r1, r7
 80096b0:	f7f6 fd94 	bl	80001dc <__adddf3>
 80096b4:	4602      	mov	r2, r0
 80096b6:	460b      	mov	r3, r1
 80096b8:	4620      	mov	r0, r4
 80096ba:	4629      	mov	r1, r5
 80096bc:	f7f6 fd8c 	bl	80001d8 <__aeabi_dsub>
 80096c0:	e7c6      	b.n	8009650 <__kernel_sin+0xc8>
 80096c2:	bf00      	nop
 80096c4:	f3af 8000 	nop.w
 80096c8:	55555549 	.word	0x55555549
 80096cc:	3fc55555 	.word	0x3fc55555
 80096d0:	3fe00000 	.word	0x3fe00000
 80096d4:	5acfd57c 	.word	0x5acfd57c
 80096d8:	3de5d93a 	.word	0x3de5d93a
 80096dc:	8a2b9ceb 	.word	0x8a2b9ceb
 80096e0:	3e5ae5e6 	.word	0x3e5ae5e6
 80096e4:	57b1fe7d 	.word	0x57b1fe7d
 80096e8:	3ec71de3 	.word	0x3ec71de3
 80096ec:	19c161d5 	.word	0x19c161d5
 80096f0:	3f2a01a0 	.word	0x3f2a01a0
 80096f4:	1110f8a6 	.word	0x1110f8a6
 80096f8:	3f811111 	.word	0x3f811111

080096fc <fabs>:
 80096fc:	ec51 0b10 	vmov	r0, r1, d0
 8009700:	ee10 2a10 	vmov	r2, s0
 8009704:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009708:	ec43 2b10 	vmov	d0, r2, r3
 800970c:	4770      	bx	lr

0800970e <finite>:
 800970e:	ee10 3a90 	vmov	r3, s1
 8009712:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8009716:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800971a:	0fc0      	lsrs	r0, r0, #31
 800971c:	4770      	bx	lr
	...

08009720 <floor>:
 8009720:	ec51 0b10 	vmov	r0, r1, d0
 8009724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009728:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800972c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009730:	2e13      	cmp	r6, #19
 8009732:	460c      	mov	r4, r1
 8009734:	ee10 5a10 	vmov	r5, s0
 8009738:	4680      	mov	r8, r0
 800973a:	dc34      	bgt.n	80097a6 <floor+0x86>
 800973c:	2e00      	cmp	r6, #0
 800973e:	da16      	bge.n	800976e <floor+0x4e>
 8009740:	a335      	add	r3, pc, #212	; (adr r3, 8009818 <floor+0xf8>)
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	f7f6 fd49 	bl	80001dc <__adddf3>
 800974a:	2200      	movs	r2, #0
 800974c:	2300      	movs	r3, #0
 800974e:	f7f7 f98b 	bl	8000a68 <__aeabi_dcmpgt>
 8009752:	b148      	cbz	r0, 8009768 <floor+0x48>
 8009754:	2c00      	cmp	r4, #0
 8009756:	da59      	bge.n	800980c <floor+0xec>
 8009758:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800975c:	4a30      	ldr	r2, [pc, #192]	; (8009820 <floor+0x100>)
 800975e:	432b      	orrs	r3, r5
 8009760:	2500      	movs	r5, #0
 8009762:	42ab      	cmp	r3, r5
 8009764:	bf18      	it	ne
 8009766:	4614      	movne	r4, r2
 8009768:	4621      	mov	r1, r4
 800976a:	4628      	mov	r0, r5
 800976c:	e025      	b.n	80097ba <floor+0x9a>
 800976e:	4f2d      	ldr	r7, [pc, #180]	; (8009824 <floor+0x104>)
 8009770:	4137      	asrs	r7, r6
 8009772:	ea01 0307 	and.w	r3, r1, r7
 8009776:	4303      	orrs	r3, r0
 8009778:	d01f      	beq.n	80097ba <floor+0x9a>
 800977a:	a327      	add	r3, pc, #156	; (adr r3, 8009818 <floor+0xf8>)
 800977c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009780:	f7f6 fd2c 	bl	80001dc <__adddf3>
 8009784:	2200      	movs	r2, #0
 8009786:	2300      	movs	r3, #0
 8009788:	f7f7 f96e 	bl	8000a68 <__aeabi_dcmpgt>
 800978c:	2800      	cmp	r0, #0
 800978e:	d0eb      	beq.n	8009768 <floor+0x48>
 8009790:	2c00      	cmp	r4, #0
 8009792:	bfbe      	ittt	lt
 8009794:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009798:	fa43 f606 	asrlt.w	r6, r3, r6
 800979c:	19a4      	addlt	r4, r4, r6
 800979e:	ea24 0407 	bic.w	r4, r4, r7
 80097a2:	2500      	movs	r5, #0
 80097a4:	e7e0      	b.n	8009768 <floor+0x48>
 80097a6:	2e33      	cmp	r6, #51	; 0x33
 80097a8:	dd0b      	ble.n	80097c2 <floor+0xa2>
 80097aa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80097ae:	d104      	bne.n	80097ba <floor+0x9a>
 80097b0:	ee10 2a10 	vmov	r2, s0
 80097b4:	460b      	mov	r3, r1
 80097b6:	f7f6 fd11 	bl	80001dc <__adddf3>
 80097ba:	ec41 0b10 	vmov	d0, r0, r1
 80097be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097c2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80097c6:	f04f 33ff 	mov.w	r3, #4294967295
 80097ca:	fa23 f707 	lsr.w	r7, r3, r7
 80097ce:	4207      	tst	r7, r0
 80097d0:	d0f3      	beq.n	80097ba <floor+0x9a>
 80097d2:	a311      	add	r3, pc, #68	; (adr r3, 8009818 <floor+0xf8>)
 80097d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d8:	f7f6 fd00 	bl	80001dc <__adddf3>
 80097dc:	2200      	movs	r2, #0
 80097de:	2300      	movs	r3, #0
 80097e0:	f7f7 f942 	bl	8000a68 <__aeabi_dcmpgt>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d0bf      	beq.n	8009768 <floor+0x48>
 80097e8:	2c00      	cmp	r4, #0
 80097ea:	da02      	bge.n	80097f2 <floor+0xd2>
 80097ec:	2e14      	cmp	r6, #20
 80097ee:	d103      	bne.n	80097f8 <floor+0xd8>
 80097f0:	3401      	adds	r4, #1
 80097f2:	ea25 0507 	bic.w	r5, r5, r7
 80097f6:	e7b7      	b.n	8009768 <floor+0x48>
 80097f8:	2301      	movs	r3, #1
 80097fa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80097fe:	fa03 f606 	lsl.w	r6, r3, r6
 8009802:	4435      	add	r5, r6
 8009804:	4545      	cmp	r5, r8
 8009806:	bf38      	it	cc
 8009808:	18e4      	addcc	r4, r4, r3
 800980a:	e7f2      	b.n	80097f2 <floor+0xd2>
 800980c:	2500      	movs	r5, #0
 800980e:	462c      	mov	r4, r5
 8009810:	e7aa      	b.n	8009768 <floor+0x48>
 8009812:	bf00      	nop
 8009814:	f3af 8000 	nop.w
 8009818:	8800759c 	.word	0x8800759c
 800981c:	7e37e43c 	.word	0x7e37e43c
 8009820:	bff00000 	.word	0xbff00000
 8009824:	000fffff 	.word	0x000fffff

08009828 <matherr>:
 8009828:	2000      	movs	r0, #0
 800982a:	4770      	bx	lr
 800982c:	0000      	movs	r0, r0
	...

08009830 <nan>:
 8009830:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009838 <nan+0x8>
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	00000000 	.word	0x00000000
 800983c:	7ff80000 	.word	0x7ff80000

08009840 <rint>:
 8009840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009842:	ec51 0b10 	vmov	r0, r1, d0
 8009846:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800984a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800984e:	2e13      	cmp	r6, #19
 8009850:	460b      	mov	r3, r1
 8009852:	ee10 4a10 	vmov	r4, s0
 8009856:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800985a:	dc56      	bgt.n	800990a <rint+0xca>
 800985c:	2e00      	cmp	r6, #0
 800985e:	da2b      	bge.n	80098b8 <rint+0x78>
 8009860:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009864:	4302      	orrs	r2, r0
 8009866:	d023      	beq.n	80098b0 <rint+0x70>
 8009868:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800986c:	4302      	orrs	r2, r0
 800986e:	4254      	negs	r4, r2
 8009870:	4314      	orrs	r4, r2
 8009872:	0c4b      	lsrs	r3, r1, #17
 8009874:	0b24      	lsrs	r4, r4, #12
 8009876:	045b      	lsls	r3, r3, #17
 8009878:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800987c:	ea44 0103 	orr.w	r1, r4, r3
 8009880:	460b      	mov	r3, r1
 8009882:	492f      	ldr	r1, [pc, #188]	; (8009940 <rint+0x100>)
 8009884:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009888:	e9d1 6700 	ldrd	r6, r7, [r1]
 800988c:	4602      	mov	r2, r0
 800988e:	4639      	mov	r1, r7
 8009890:	4630      	mov	r0, r6
 8009892:	f7f6 fca3 	bl	80001dc <__adddf3>
 8009896:	e9cd 0100 	strd	r0, r1, [sp]
 800989a:	463b      	mov	r3, r7
 800989c:	4632      	mov	r2, r6
 800989e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098a2:	f7f6 fc99 	bl	80001d8 <__aeabi_dsub>
 80098a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80098aa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80098ae:	4639      	mov	r1, r7
 80098b0:	ec41 0b10 	vmov	d0, r0, r1
 80098b4:	b003      	add	sp, #12
 80098b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098b8:	4a22      	ldr	r2, [pc, #136]	; (8009944 <rint+0x104>)
 80098ba:	4132      	asrs	r2, r6
 80098bc:	ea01 0702 	and.w	r7, r1, r2
 80098c0:	4307      	orrs	r7, r0
 80098c2:	d0f5      	beq.n	80098b0 <rint+0x70>
 80098c4:	0852      	lsrs	r2, r2, #1
 80098c6:	4011      	ands	r1, r2
 80098c8:	430c      	orrs	r4, r1
 80098ca:	d00b      	beq.n	80098e4 <rint+0xa4>
 80098cc:	ea23 0202 	bic.w	r2, r3, r2
 80098d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80098d4:	2e13      	cmp	r6, #19
 80098d6:	fa43 f306 	asr.w	r3, r3, r6
 80098da:	bf0c      	ite	eq
 80098dc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80098e0:	2400      	movne	r4, #0
 80098e2:	4313      	orrs	r3, r2
 80098e4:	4916      	ldr	r1, [pc, #88]	; (8009940 <rint+0x100>)
 80098e6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80098ea:	4622      	mov	r2, r4
 80098ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 80098f0:	4620      	mov	r0, r4
 80098f2:	4629      	mov	r1, r5
 80098f4:	f7f6 fc72 	bl	80001dc <__adddf3>
 80098f8:	e9cd 0100 	strd	r0, r1, [sp]
 80098fc:	4622      	mov	r2, r4
 80098fe:	462b      	mov	r3, r5
 8009900:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009904:	f7f6 fc68 	bl	80001d8 <__aeabi_dsub>
 8009908:	e7d2      	b.n	80098b0 <rint+0x70>
 800990a:	2e33      	cmp	r6, #51	; 0x33
 800990c:	dd07      	ble.n	800991e <rint+0xde>
 800990e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009912:	d1cd      	bne.n	80098b0 <rint+0x70>
 8009914:	ee10 2a10 	vmov	r2, s0
 8009918:	f7f6 fc60 	bl	80001dc <__adddf3>
 800991c:	e7c8      	b.n	80098b0 <rint+0x70>
 800991e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8009922:	f04f 32ff 	mov.w	r2, #4294967295
 8009926:	40f2      	lsrs	r2, r6
 8009928:	4210      	tst	r0, r2
 800992a:	d0c1      	beq.n	80098b0 <rint+0x70>
 800992c:	0852      	lsrs	r2, r2, #1
 800992e:	4210      	tst	r0, r2
 8009930:	bf1f      	itttt	ne
 8009932:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009936:	ea20 0202 	bicne.w	r2, r0, r2
 800993a:	4134      	asrne	r4, r6
 800993c:	4314      	orrne	r4, r2
 800993e:	e7d1      	b.n	80098e4 <rint+0xa4>
 8009940:	08009d80 	.word	0x08009d80
 8009944:	000fffff 	.word	0x000fffff

08009948 <scalbn>:
 8009948:	b570      	push	{r4, r5, r6, lr}
 800994a:	ec55 4b10 	vmov	r4, r5, d0
 800994e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009952:	4606      	mov	r6, r0
 8009954:	462b      	mov	r3, r5
 8009956:	b9aa      	cbnz	r2, 8009984 <scalbn+0x3c>
 8009958:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800995c:	4323      	orrs	r3, r4
 800995e:	d03b      	beq.n	80099d8 <scalbn+0x90>
 8009960:	4b31      	ldr	r3, [pc, #196]	; (8009a28 <scalbn+0xe0>)
 8009962:	4629      	mov	r1, r5
 8009964:	2200      	movs	r2, #0
 8009966:	ee10 0a10 	vmov	r0, s0
 800996a:	f7f6 fded 	bl	8000548 <__aeabi_dmul>
 800996e:	4b2f      	ldr	r3, [pc, #188]	; (8009a2c <scalbn+0xe4>)
 8009970:	429e      	cmp	r6, r3
 8009972:	4604      	mov	r4, r0
 8009974:	460d      	mov	r5, r1
 8009976:	da12      	bge.n	800999e <scalbn+0x56>
 8009978:	a327      	add	r3, pc, #156	; (adr r3, 8009a18 <scalbn+0xd0>)
 800997a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997e:	f7f6 fde3 	bl	8000548 <__aeabi_dmul>
 8009982:	e009      	b.n	8009998 <scalbn+0x50>
 8009984:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009988:	428a      	cmp	r2, r1
 800998a:	d10c      	bne.n	80099a6 <scalbn+0x5e>
 800998c:	ee10 2a10 	vmov	r2, s0
 8009990:	4620      	mov	r0, r4
 8009992:	4629      	mov	r1, r5
 8009994:	f7f6 fc22 	bl	80001dc <__adddf3>
 8009998:	4604      	mov	r4, r0
 800999a:	460d      	mov	r5, r1
 800999c:	e01c      	b.n	80099d8 <scalbn+0x90>
 800999e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80099a2:	460b      	mov	r3, r1
 80099a4:	3a36      	subs	r2, #54	; 0x36
 80099a6:	4432      	add	r2, r6
 80099a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80099ac:	428a      	cmp	r2, r1
 80099ae:	dd0b      	ble.n	80099c8 <scalbn+0x80>
 80099b0:	ec45 4b11 	vmov	d1, r4, r5
 80099b4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009a20 <scalbn+0xd8>
 80099b8:	f000 f83c 	bl	8009a34 <copysign>
 80099bc:	a318      	add	r3, pc, #96	; (adr r3, 8009a20 <scalbn+0xd8>)
 80099be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c2:	ec51 0b10 	vmov	r0, r1, d0
 80099c6:	e7da      	b.n	800997e <scalbn+0x36>
 80099c8:	2a00      	cmp	r2, #0
 80099ca:	dd08      	ble.n	80099de <scalbn+0x96>
 80099cc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80099d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80099d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80099d8:	ec45 4b10 	vmov	d0, r4, r5
 80099dc:	bd70      	pop	{r4, r5, r6, pc}
 80099de:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80099e2:	da0d      	bge.n	8009a00 <scalbn+0xb8>
 80099e4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80099e8:	429e      	cmp	r6, r3
 80099ea:	ec45 4b11 	vmov	d1, r4, r5
 80099ee:	dce1      	bgt.n	80099b4 <scalbn+0x6c>
 80099f0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009a18 <scalbn+0xd0>
 80099f4:	f000 f81e 	bl	8009a34 <copysign>
 80099f8:	a307      	add	r3, pc, #28	; (adr r3, 8009a18 <scalbn+0xd0>)
 80099fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fe:	e7e0      	b.n	80099c2 <scalbn+0x7a>
 8009a00:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009a04:	3236      	adds	r2, #54	; 0x36
 8009a06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009a0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009a0e:	4620      	mov	r0, r4
 8009a10:	4629      	mov	r1, r5
 8009a12:	2200      	movs	r2, #0
 8009a14:	4b06      	ldr	r3, [pc, #24]	; (8009a30 <scalbn+0xe8>)
 8009a16:	e7b2      	b.n	800997e <scalbn+0x36>
 8009a18:	c2f8f359 	.word	0xc2f8f359
 8009a1c:	01a56e1f 	.word	0x01a56e1f
 8009a20:	8800759c 	.word	0x8800759c
 8009a24:	7e37e43c 	.word	0x7e37e43c
 8009a28:	43500000 	.word	0x43500000
 8009a2c:	ffff3cb0 	.word	0xffff3cb0
 8009a30:	3c900000 	.word	0x3c900000

08009a34 <copysign>:
 8009a34:	ec51 0b10 	vmov	r0, r1, d0
 8009a38:	ee11 0a90 	vmov	r0, s3
 8009a3c:	ee10 2a10 	vmov	r2, s0
 8009a40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009a44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009a48:	ea41 0300 	orr.w	r3, r1, r0
 8009a4c:	ec43 2b10 	vmov	d0, r2, r3
 8009a50:	4770      	bx	lr
	...

08009a54 <_init>:
 8009a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a56:	bf00      	nop
 8009a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a5a:	bc08      	pop	{r3}
 8009a5c:	469e      	mov	lr, r3
 8009a5e:	4770      	bx	lr

08009a60 <_fini>:
 8009a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a62:	bf00      	nop
 8009a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a66:	bc08      	pop	{r3}
 8009a68:	469e      	mov	lr, r3
 8009a6a:	4770      	bx	lr
